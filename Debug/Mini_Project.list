
Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edc8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c58  0800ef78  0800ef78  0001ef78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010bd0  08010bd0  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010bd0  08010bd0  00020bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010bd8  08010bd8  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010bd8  08010bd8  00020bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010bdc  08010bdc  00020bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08010be0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301d8  2**0
                  CONTENTS
 10 .bss          00006984  200001d8  200001d8  000301d8  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20006b5c  20006b5c  000301d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028b4e  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006457  00000000  00000000  00058d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002478  00000000  00000000  0005f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001bdc  00000000  00000000  00061668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00009371  00000000  00000000  00063244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002e013  00000000  00000000  0006c5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5d65  00000000  00000000  0009a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009dd4  00000000  00000000  00190330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0019a104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ef60 	.word	0x0800ef60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800ef60 	.word	0x0800ef60

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f002 fab4 	bl	8002afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f86a 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8d2 	bl	8000740 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init();
 800059c:	f002 f8e4 	bl	8002768 <BSP_SDRAM_Init>
  MX_USB_DEVICE_Init();
 80005a0:	f00d fb1e 	bl	800dbe0 <MX_USB_DEVICE_Init>
  BSP_GYRO_Init();
 80005a4:	f001 fa1a 	bl	80019dc <BSP_GYRO_Init>
  BSP_LCD_Init();//init LCD
 80005a8:	f001 fa7e 	bl	8001aa8 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);//set the layer buffer address into SDRAM
 80005ac:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80005b0:	2001      	movs	r0, #1
 80005b2:	f001 fafb 	bl	8001bac <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 80005b6:	2001      	movs	r0, #1
 80005b8:	f001 fb5c 	bl	8001c74 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 80005bc:	f001 fed6 	bl	800236c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 80005c0:	481b      	ldr	r0, [pc, #108]	; (8000630 <main+0xa4>)
 80005c2:	f001 fbc9 	bl	8001d58 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 80005c6:	481a      	ldr	r0, [pc, #104]	; (8000630 <main+0xa4>)
 80005c8:	f001 fb7c 	bl	8001cc4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 80005cc:	f04f 30ff 	mov.w	r0, #4294967295
 80005d0:	f001 fb60 	bl	8001c94 <BSP_LCD_SetTextColor>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d4:	f008 fb92 	bl	8008cfc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew (16, sizeof(Mymessage), &Queue01_attributes);
 80005d8:	4a16      	ldr	r2, [pc, #88]	; (8000634 <main+0xa8>)
 80005da:	2118      	movs	r1, #24
 80005dc:	2010      	movs	r0, #16
 80005de:	f008 fc84 	bl	8008eea <osMessageQueueNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <main+0xac>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <main+0xb0>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <main+0xb4>)
 80005ee:	f008 fbcf 	bl	8008d90 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <main+0xb8>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <main+0xbc>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4813      	ldr	r0, [pc, #76]	; (800064c <main+0xc0>)
 80005fe:	f008 fbc7 	bl	8008d90 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <main+0xc4>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <main+0xc8>)
 800060a:	2100      	movs	r1, #0
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <main+0xcc>)
 800060e:	f008 fbbf 	bl	8008d90 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a11      	ldr	r2, [pc, #68]	; (800065c <main+0xd0>)
 8000616:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 8000618:	4a11      	ldr	r2, [pc, #68]	; (8000660 <main+0xd4>)
 800061a:	2100      	movs	r1, #0
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <main+0xd8>)
 800061e:	f008 fbb7 	bl	8008d90 <osThreadNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a10      	ldr	r2, [pc, #64]	; (8000668 <main+0xdc>)
 8000626:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000628:	f008 fb8c 	bl	8008d44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0xa0>
 800062e:	bf00      	nop
 8000630:	ff0000ff 	.word	0xff0000ff
 8000634:	0800f0ac 	.word	0x0800f0ac
 8000638:	20000234 	.word	0x20000234
 800063c:	0800f01c 	.word	0x0800f01c
 8000640:	08000801 	.word	0x08000801
 8000644:	20000224 	.word	0x20000224
 8000648:	0800f040 	.word	0x0800f040
 800064c:	08000899 	.word	0x08000899
 8000650:	20000228 	.word	0x20000228
 8000654:	0800f064 	.word	0x0800f064
 8000658:	080009f9 	.word	0x080009f9
 800065c:	2000022c 	.word	0x2000022c
 8000660:	0800f088 	.word	0x0800f088
 8000664:	08000a2d 	.word	0x08000a2d
 8000668:	20000230 	.word	0x20000230

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f00d ffec 	bl	800e658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	; (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 fe8e 	bl	8005414 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fe:	f000 f9fb 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f005 f8ef 	bl	8005904 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800072c:	f000 f9e4 	bl	8000af8 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <MX_GPIO_Init+0xb8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xb8>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <MX_GPIO_Init+0xb8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_GPIO_Init+0xb8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <MX_GPIO_Init+0xb8>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xb8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_GPIO_Init+0xb8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <MX_GPIO_Init+0xb8>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_GPIO_Init+0xb8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xb8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <MX_GPIO_Init+0xb8>)
 80007b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_GPIO_Init+0xb8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_GPIO_Init+0xbc>)
 80007ce:	f003 f8dd 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007d2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0xbc>)
 80007ec:	f002 ff22 	bl	8003634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40021800 	.word	0x40021800

08000800 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  Mymessage SendX;
	  /* Infinite loop */
	  for(;;)
	  {
		if(flag == 0)
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <StartTask01+0x84>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1fb      	bne.n	8000808 <StartTask01+0x8>
		{
		L3GD20_ReadXYZAngRate(gyroValue);
 8000810:	481d      	ldr	r0, [pc, #116]	; (8000888 <StartTask01+0x88>)
 8000812:	f000 fda7 	bl	8001364 <L3GD20_ReadXYZAngRate>
		SendX.Buf[0] = (int)gyroValue[0]/1500;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <StartTask01+0x88>)
 8000818:	edd3 7a00 	vldr	s15, [r3]
 800081c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000820:	ee17 1a90 	vmov	r1, s15
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <StartTask01+0x8c>)
 8000826:	fb83 2301 	smull	r2, r3, r3, r1
 800082a:	115a      	asrs	r2, r3, #5
 800082c:	17cb      	asrs	r3, r1, #31
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	60bb      	str	r3, [r7, #8]
		SendX.Buf[1] = (int)gyroValue[1];
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <StartTask01+0x88>)
 8000834:	edd3 7a01 	vldr	s15, [r3, #4]
 8000838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800083c:	ee17 3a90 	vmov	r3, s15
 8000840:	60fb      	str	r3, [r7, #12]
		SendX.Buf[2] = (int)gyroValue[2];
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <StartTask01+0x88>)
 8000844:	edd3 7a02 	vldr	s15, [r3, #8]
 8000848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800084c:	ee17 3a90 	vmov	r3, s15
 8000850:	613b      	str	r3, [r7, #16]
		if (abs(SendX.Buf[0]) > 20)
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bfb8      	it	lt
 8000858:	425b      	neglt	r3, r3
 800085a:	2b14      	cmp	r3, #20
 800085c:	dd0b      	ble.n	8000876 <StartTask01+0x76>
		{
			hitflag = 1;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <StartTask01+0x90>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			osMessageQueuePut(Queue01Handle, &SendX, 0, 0);
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <StartTask01+0x94>)
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	f107 0108 	add.w	r1, r7, #8
 800086c:	2300      	movs	r3, #0
 800086e:	2200      	movs	r2, #0
 8000870:	f008 fbae 	bl	8008fd0 <osMessageQueuePut>
 8000874:	e002      	b.n	800087c <StartTask01+0x7c>
		}
		else
		{
			hitflag = 0;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <StartTask01+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
		}
	    osDelay(250);
 800087c:	20fa      	movs	r0, #250	; 0xfa
 800087e:	f008 fb19 	bl	8008eb4 <osDelay>
		if(flag == 0)
 8000882:	e7c1      	b.n	8000808 <StartTask01+0x8>
 8000884:	20000210 	.word	0x20000210
 8000888:	20000218 	.word	0x20000218
 800088c:	057619f1 	.word	0x057619f1
 8000890:	20000214 	.word	0x20000214
 8000894:	20000234 	.word	0x20000234

08000898 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
		int temp;
		BSP_LCD_FillCircle(X_circle, Y_circle, radius);
 80008a0:	4b4c      	ldr	r3, [pc, #304]	; (80009d4 <StartTask02+0x13c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4a4c      	ldr	r2, [pc, #304]	; (80009d8 <StartTask02+0x140>)
 80008a8:	6812      	ldr	r2, [r2, #0]
 80008aa:	b291      	uxth	r1, r2
 80008ac:	4a4b      	ldr	r2, [pc, #300]	; (80009dc <StartTask02+0x144>)
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	b292      	uxth	r2, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 fcba 	bl	800222c <BSP_LCD_FillCircle>
		Mymessage GetX;
		for(;;)
		{
			if (hitflag == 1 && flag == 0)
 80008b8:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <StartTask02+0x148>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d1fb      	bne.n	80008b8 <StartTask02+0x20>
 80008c0:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <StartTask02+0x14c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1f7      	bne.n	80008b8 <StartTask02+0x20>
			{
				osMessageQueueGet(Queue01Handle, &GetX, 0, 0);
 80008c8:	4b47      	ldr	r3, [pc, #284]	; (80009e8 <StartTask02+0x150>)
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	f107 010c 	add.w	r1, r7, #12
 80008d0:	2300      	movs	r3, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	f008 fbdc 	bl	8009090 <osMessageQueueGet>
				temp = GetX.Buf[0];
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i = 0; i <= temp; i = i + 10)
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
 80008e0:	e035      	b.n	800094e <StartTask02+0xb6>
				{
					BSP_LCD_Clear(LCD_COLOR_BLUE);
 80008e2:	4842      	ldr	r0, [pc, #264]	; (80009ec <StartTask02+0x154>)
 80008e4:	f001 fa38 	bl	8001d58 <BSP_LCD_Clear>
					BSP_LCD_FillCircle(X_circle, Y_circle, radius);
 80008e8:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <StartTask02+0x13c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4a3a      	ldr	r2, [pc, #232]	; (80009d8 <StartTask02+0x140>)
 80008f0:	6812      	ldr	r2, [r2, #0]
 80008f2:	b291      	uxth	r1, r2
 80008f4:	4a39      	ldr	r2, [pc, #228]	; (80009dc <StartTask02+0x144>)
 80008f6:	6812      	ldr	r2, [r2, #0]
 80008f8:	b292      	uxth	r2, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fc96 	bl	800222c <BSP_LCD_FillCircle>
					radius = radius + 5;
 8000900:	4b36      	ldr	r3, [pc, #216]	; (80009dc <StartTask02+0x144>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	3305      	adds	r3, #5
 8000906:	4a35      	ldr	r2, [pc, #212]	; (80009dc <StartTask02+0x144>)
 8000908:	6013      	str	r3, [r2, #0]
					if(radius==50){
 800090a:	4b34      	ldr	r3, [pc, #208]	; (80009dc <StartTask02+0x144>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b32      	cmp	r3, #50	; 0x32
 8000910:	d113      	bne.n	800093a <StartTask02+0xa2>
						realScore = realScore + 1;
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <StartTask02+0x158>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	4a35      	ldr	r2, [pc, #212]	; (80009f0 <StartTask02+0x158>)
 800091a:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000922:	4834      	ldr	r0, [pc, #208]	; (80009f4 <StartTask02+0x15c>)
 8000924:	f003 f832 	bl	800398c <HAL_GPIO_WritePin>
						osDelay(250);
 8000928:	20fa      	movs	r0, #250	; 0xfa
 800092a:	f008 fac3 	bl	8008eb4 <osDelay>
						HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	482f      	ldr	r0, [pc, #188]	; (80009f4 <StartTask02+0x15c>)
 8000936:	f003 f829 	bl	800398c <HAL_GPIO_WritePin>
					}
					if (radius > 90){
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <StartTask02+0x144>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b5a      	cmp	r3, #90	; 0x5a
 8000940:	dc0a      	bgt.n	8000958 <StartTask02+0xc0>
						break;
					}
					osDelay(100);
 8000942:	2064      	movs	r0, #100	; 0x64
 8000944:	f008 fab6 	bl	8008eb4 <osDelay>
				for (int i = 0; i <= temp; i = i + 10)
 8000948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094a:	330a      	adds	r3, #10
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
 800094e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000952:	429a      	cmp	r2, r3
 8000954:	ddc5      	ble.n	80008e2 <StartTask02+0x4a>
 8000956:	e000      	b.n	800095a <StartTask02+0xc2>
						break;
 8000958:	bf00      	nop
				}
				if(temp<=140)//Set lại giá trị temp khi tâng bóng không đủ lực
 800095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095c:	2b8c      	cmp	r3, #140	; 0x8c
 800095e:	dc01      	bgt.n	8000964 <StartTask02+0xcc>
					temp = 200;
 8000960:	23c8      	movs	r3, #200	; 0xc8
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i = temp; i >= 0; i = i - 10)
 8000964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
 8000968:	e02d      	b.n	80009c6 <StartTask02+0x12e>
				{
					BSP_LCD_Clear(LCD_COLOR_BLUE);
 800096a:	4820      	ldr	r0, [pc, #128]	; (80009ec <StartTask02+0x154>)
 800096c:	f001 f9f4 	bl	8001d58 <BSP_LCD_Clear>
					BSP_LCD_FillCircle(X_circle, Y_circle, radius);
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <StartTask02+0x13c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	b29b      	uxth	r3, r3
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <StartTask02+0x140>)
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	b291      	uxth	r1, r2
 800097c:	4a17      	ldr	r2, [pc, #92]	; (80009dc <StartTask02+0x144>)
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	b292      	uxth	r2, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fc52 	bl	800222c <BSP_LCD_FillCircle>
					radius = radius - 5;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <StartTask02+0x144>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3b05      	subs	r3, #5
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <StartTask02+0x144>)
 8000990:	6013      	str	r3, [r2, #0]
					if (radius >= 20 && radius <= 50)
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <StartTask02+0x144>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b13      	cmp	r3, #19
 8000998:	dd07      	ble.n	80009aa <StartTask02+0x112>
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <StartTask02+0x144>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b32      	cmp	r3, #50	; 0x32
 80009a0:	dc03      	bgt.n	80009aa <StartTask02+0x112>
					{
						if(hitflag==1)
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <StartTask02+0x148>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d011      	beq.n	80009ce <StartTask02+0x136>
							break;
					}
					if (radius < 20)
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <StartTask02+0x144>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b13      	cmp	r3, #19
 80009b0:	dc03      	bgt.n	80009ba <StartTask02+0x122>
					{
						flag = 1;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <StartTask02+0x14c>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	601a      	str	r2, [r3, #0]
						break;
 80009b8:	e00a      	b.n	80009d0 <StartTask02+0x138>
					}
					osDelay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f008 fa7a 	bl	8008eb4 <osDelay>
				for (int i = temp; i >= 0; i = i - 10)
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	3b0a      	subs	r3, #10
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dace      	bge.n	800096a <StartTask02+0xd2>
 80009cc:	e774      	b.n	80008b8 <StartTask02+0x20>
							break;
 80009ce:	bf00      	nop
			if (hitflag == 1 && flag == 0)
 80009d0:	e772      	b.n	80008b8 <StartTask02+0x20>
 80009d2:	bf00      	nop
 80009d4:	20000004 	.word	0x20000004
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000214 	.word	0x20000214
 80009e4:	20000210 	.word	0x20000210
 80009e8:	20000234 	.word	0x20000234
 80009ec:	ff0000ff 	.word	0xff0000ff
 80009f0:	2000020c 	.word	0x2000020c
 80009f4:	40021800 	.word	0x40021800

080009f8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
		for(;;)
		{
			sprintf(buf2, "\n%d", radius);
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <StartTask03+0x28>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4907      	ldr	r1, [pc, #28]	; (8000a24 <StartTask03+0x2c>)
 8000a08:	4807      	ldr	r0, [pc, #28]	; (8000a28 <StartTask03+0x30>)
 8000a0a:	f00d fe05 	bl	800e618 <siprintf>
			CDC_Transmit_HS(buf2,sizeof(buf2));
 8000a0e:	210a      	movs	r1, #10
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <StartTask03+0x30>)
 8000a12:	f00d f9a3 	bl	800dd5c <CDC_Transmit_HS>
			osDelay(100);
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f008 fa4c 	bl	8008eb4 <osDelay>
			sprintf(buf2, "\n%d", radius);
 8000a1c:	e7f0      	b.n	8000a00 <StartTask03+0x8>
 8000a1e:	bf00      	nop
 8000a20:	20000000 	.word	0x20000000
 8000a24:	0800efa0 	.word	0x0800efa0
 8000a28:	20000200 	.word	0x20000200

08000a2c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
		if (flag == 0)
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <StartTask04+0x80>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10b      	bne.n	8000a54 <StartTask04+0x28>
		{
			sprintf((char*)buf1, "Score: %d", realScore);
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <StartTask04+0x84>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	491c      	ldr	r1, [pc, #112]	; (8000ab4 <StartTask04+0x88>)
 8000a44:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <StartTask04+0x8c>)
 8000a46:	f00d fde7 	bl	800e618 <siprintf>
			BSP_LCD_DisplayStringAtLine(1, buf1);
 8000a4a:	491b      	ldr	r1, [pc, #108]	; (8000ab8 <StartTask04+0x8c>)
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f001 faad 	bl	8001fac <BSP_LCD_DisplayStringAtLine>
 8000a52:	e7ef      	b.n	8000a34 <StartTask04+0x8>
		}
		else if (flag == 1)
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <StartTask04+0x80>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d1eb      	bne.n	8000a34 <StartTask04+0x8>
		{
			BSP_LCD_Clear(LCD_COLOR_RED);
 8000a5c:	4817      	ldr	r0, [pc, #92]	; (8000abc <StartTask04+0x90>)
 8000a5e:	f001 f97b 	bl	8001d58 <BSP_LCD_Clear>
			BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8000a62:	4816      	ldr	r0, [pc, #88]	; (8000abc <StartTask04+0x90>)
 8000a64:	f001 f92e 	bl	8001cc4 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(1,130,(uint8_t*)"GAME OVER", CENTER_MODE);
 8000a68:	2301      	movs	r3, #1
 8000a6a:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <StartTask04+0x94>)
 8000a6c:	2182      	movs	r1, #130	; 0x82
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f001 f9de 	bl	8001e30 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(1,150,(uint8_t*)buf1,CENTER_MODE);
 8000a74:	2301      	movs	r3, #1
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <StartTask04+0x8c>)
 8000a78:	2196      	movs	r1, #150	; 0x96
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f001 f9d8 	bl	8001e30 <BSP_LCD_DisplayStringAt>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a86:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <StartTask04+0x98>)
 8000a88:	f002 ff80 	bl	800398c <HAL_GPIO_WritePin>
			vTaskDelete(Task01Handle);
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <StartTask04+0x9c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f009 ffc1 	bl	800aa18 <vTaskDelete>
			vTaskDelete(Task02Handle);
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <StartTask04+0xa0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f009 ffbc 	bl	800aa18 <vTaskDelete>
			vTaskDelete(Task03Handle);
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <StartTask04+0xa4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f009 ffb7 	bl	800aa18 <vTaskDelete>
		if (flag == 0)
 8000aaa:	e7c3      	b.n	8000a34 <StartTask04+0x8>
 8000aac:	20000210 	.word	0x20000210
 8000ab0:	2000020c 	.word	0x2000020c
 8000ab4:	0800efa4 	.word	0x0800efa4
 8000ab8:	200001f4 	.word	0x200001f4
 8000abc:	ffff0000 	.word	0xffff0000
 8000ac0:	0800efb0 	.word	0x0800efb0
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	20000224 	.word	0x20000224
 8000acc:	20000228 	.word	0x20000228
 8000ad0:	2000022c 	.word	0x2000022c

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f002 f82b 	bl	8002b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40001000 	.word	0x40001000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_MspInit+0x54>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_MspInit+0x54>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_MspInit+0x54>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_MspInit+0x54>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_MspInit+0x54>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_MspInit+0x54>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	210f      	movs	r1, #15
 8000b46:	f06f 0001 	mvn.w	r0, #1
 8000b4a:	f002 f8f5 	bl	8002d38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <HAL_InitTick+0xe4>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <HAL_InitTick+0xe4>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7c:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <HAL_InitTick+0xe4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b88:	f107 0210 	add.w	r2, r7, #16
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f005 f8c2 	bl	8005d1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d103      	bne.n	8000baa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ba2:	f005 f8a7 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8000ba6:	6378      	str	r0, [r7, #52]	; 0x34
 8000ba8:	e004      	b.n	8000bb4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000baa:	f005 f8a3 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb6:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <HAL_InitTick+0xe8>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0c9b      	lsrs	r3, r3, #18
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_InitTick+0xec>)
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <HAL_InitTick+0xf0>)
 8000bc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <HAL_InitTick+0xec>)
 8000bca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <HAL_InitTick+0xec>)
 8000bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_InitTick+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_InitTick+0xec>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_InitTick+0xec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000be8:	4817      	ldr	r0, [pc, #92]	; (8000c48 <HAL_InitTick+0xec>)
 8000bea:	f006 f945 	bl	8006e78 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d11b      	bne.n	8000c34 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <HAL_InitTick+0xec>)
 8000bfe:	f006 f995 	bl	8006f2c <HAL_TIM_Base_Start_IT>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d111      	bne.n	8000c34 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c10:	2036      	movs	r0, #54	; 0x36
 8000c12:	f002 f8ad 	bl	8002d70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d808      	bhi.n	8000c2e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2036      	movs	r0, #54	; 0x36
 8000c22:	f002 f889 	bl	8002d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_InitTick+0xf4>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e002      	b.n	8000c34 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3738      	adds	r7, #56	; 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	20000238 	.word	0x20000238
 8000c4c:	40001000 	.word	0x40001000
 8000c50:	2000008c 	.word	0x2000008c

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM6_DAC_IRQHandler+0x10>)
 8000c86:	f006 f9c1 	bl	800700c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000238 	.word	0x20000238

08000c94 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <OTG_HS_IRQHandler+0x10>)
 8000c9a:	f003 faae 	bl	80041fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20006310 	.word	0x20006310

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f00d fcc6 	bl	800e668 <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20030000 	.word	0x20030000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	20000280 	.word	0x20000280
 8000d10:	20006b60 	.word	0x20006b60

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3c:	f7ff ffea 	bl	8000d14 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f00d fc85 	bl	800e674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc0f 	bl	800058c <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d70:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000d7c:	08010be0 	.word	0x08010be0
  ldr r2, =_sbss
 8000d80:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000d84:	20006b5c 	.word	0x20006b5c

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>

08000d8a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000d8e:	f000 fc73 	bl	8001678 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000d92:	20ca      	movs	r0, #202	; 0xca
 8000d94:	f000 f95d 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000d98:	20c3      	movs	r0, #195	; 0xc3
 8000d9a:	f000 f967 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000d9e:	2008      	movs	r0, #8
 8000da0:	f000 f964 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000da4:	2050      	movs	r0, #80	; 0x50
 8000da6:	f000 f961 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000daa:	20cf      	movs	r0, #207	; 0xcf
 8000dac:	f000 f951 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 f95b 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000db6:	20c1      	movs	r0, #193	; 0xc1
 8000db8:	f000 f958 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000dbc:	2030      	movs	r0, #48	; 0x30
 8000dbe:	f000 f955 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000dc2:	20ed      	movs	r0, #237	; 0xed
 8000dc4:	f000 f945 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000dc8:	2064      	movs	r0, #100	; 0x64
 8000dca:	f000 f94f 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f94c 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000dd4:	2012      	movs	r0, #18
 8000dd6:	f000 f949 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000dda:	2081      	movs	r0, #129	; 0x81
 8000ddc:	f000 f946 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000de0:	20e8      	movs	r0, #232	; 0xe8
 8000de2:	f000 f936 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000de6:	2085      	movs	r0, #133	; 0x85
 8000de8:	f000 f940 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 f93d 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000df2:	2078      	movs	r0, #120	; 0x78
 8000df4:	f000 f93a 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000df8:	20cb      	movs	r0, #203	; 0xcb
 8000dfa:	f000 f92a 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000dfe:	2039      	movs	r0, #57	; 0x39
 8000e00:	f000 f934 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000e04:	202c      	movs	r0, #44	; 0x2c
 8000e06:	f000 f931 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f92e 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000e10:	2034      	movs	r0, #52	; 0x34
 8000e12:	f000 f92b 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000e16:	2002      	movs	r0, #2
 8000e18:	f000 f928 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000e1c:	20f7      	movs	r0, #247	; 0xf7
 8000e1e:	f000 f918 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000e22:	2020      	movs	r0, #32
 8000e24:	f000 f922 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000e28:	20ea      	movs	r0, #234	; 0xea
 8000e2a:	f000 f912 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f91c 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f919 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000e3a:	20b1      	movs	r0, #177	; 0xb1
 8000e3c:	f000 f909 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 f913 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000e46:	201b      	movs	r0, #27
 8000e48:	f000 f910 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000e4c:	20b6      	movs	r0, #182	; 0xb6
 8000e4e:	f000 f900 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000e52:	200a      	movs	r0, #10
 8000e54:	f000 f90a 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000e58:	20a2      	movs	r0, #162	; 0xa2
 8000e5a:	f000 f907 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000e5e:	20c0      	movs	r0, #192	; 0xc0
 8000e60:	f000 f8f7 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e64:	2010      	movs	r0, #16
 8000e66:	f000 f901 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000e6a:	20c1      	movs	r0, #193	; 0xc1
 8000e6c:	f000 f8f1 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e70:	2010      	movs	r0, #16
 8000e72:	f000 f8fb 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000e76:	20c5      	movs	r0, #197	; 0xc5
 8000e78:	f000 f8eb 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000e7c:	2045      	movs	r0, #69	; 0x45
 8000e7e:	f000 f8f5 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000e82:	2015      	movs	r0, #21
 8000e84:	f000 f8f2 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000e88:	20c7      	movs	r0, #199	; 0xc7
 8000e8a:	f000 f8e2 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000e8e:	2090      	movs	r0, #144	; 0x90
 8000e90:	f000 f8ec 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000e94:	2036      	movs	r0, #54	; 0x36
 8000e96:	f000 f8dc 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000e9a:	20c8      	movs	r0, #200	; 0xc8
 8000e9c:	f000 f8e6 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000ea0:	20f2      	movs	r0, #242	; 0xf2
 8000ea2:	f000 f8d6 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f8e0 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000eac:	20b0      	movs	r0, #176	; 0xb0
 8000eae:	f000 f8d0 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000eb2:	20c2      	movs	r0, #194	; 0xc2
 8000eb4:	f000 f8da 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000eb8:	20b6      	movs	r0, #182	; 0xb6
 8000eba:	f000 f8ca 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f000 f8d4 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000ec4:	20a7      	movs	r0, #167	; 0xa7
 8000ec6:	f000 f8d1 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000eca:	2027      	movs	r0, #39	; 0x27
 8000ecc:	f000 f8ce 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000ed0:	2004      	movs	r0, #4
 8000ed2:	f000 f8cb 	bl	800106c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000ed6:	202a      	movs	r0, #42	; 0x2a
 8000ed8:	f000 f8bb 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f8c5 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f8c2 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 f8bf 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000eee:	20ef      	movs	r0, #239	; 0xef
 8000ef0:	f000 f8bc 	bl	800106c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000ef4:	202b      	movs	r0, #43	; 0x2b
 8000ef6:	f000 f8ac 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f8b6 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 f8b3 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 f8b0 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000f0c:	203f      	movs	r0, #63	; 0x3f
 8000f0e:	f000 f8ad 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000f12:	20f6      	movs	r0, #246	; 0xf6
 8000f14:	f000 f89d 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f000 f8a7 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f8a4 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000f24:	2006      	movs	r0, #6
 8000f26:	f000 f8a1 	bl	800106c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000f2a:	202c      	movs	r0, #44	; 0x2c
 8000f2c:	f000 f891 	bl	8001052 <ili9341_WriteReg>
  LCD_Delay(200);
 8000f30:	20c8      	movs	r0, #200	; 0xc8
 8000f32:	f000 fc8f 	bl	8001854 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000f36:	2026      	movs	r0, #38	; 0x26
 8000f38:	f000 f88b 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f000 f895 	bl	800106c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000f42:	20e0      	movs	r0, #224	; 0xe0
 8000f44:	f000 f885 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000f48:	200f      	movs	r0, #15
 8000f4a:	f000 f88f 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000f4e:	2029      	movs	r0, #41	; 0x29
 8000f50:	f000 f88c 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000f54:	2024      	movs	r0, #36	; 0x24
 8000f56:	f000 f889 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000f5a:	200c      	movs	r0, #12
 8000f5c:	f000 f886 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000f60:	200e      	movs	r0, #14
 8000f62:	f000 f883 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f66:	2009      	movs	r0, #9
 8000f68:	f000 f880 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000f6c:	204e      	movs	r0, #78	; 0x4e
 8000f6e:	f000 f87d 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f72:	2078      	movs	r0, #120	; 0x78
 8000f74:	f000 f87a 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000f78:	203c      	movs	r0, #60	; 0x3c
 8000f7a:	f000 f877 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f7e:	2009      	movs	r0, #9
 8000f80:	f000 f874 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000f84:	2013      	movs	r0, #19
 8000f86:	f000 f871 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f000 f86e 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000f90:	2017      	movs	r0, #23
 8000f92:	f000 f86b 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000f96:	2011      	movs	r0, #17
 8000f98:	f000 f868 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 f865 	bl	800106c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000fa2:	20e1      	movs	r0, #225	; 0xe1
 8000fa4:	f000 f855 	bl	8001052 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 f85f 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000fae:	2016      	movs	r0, #22
 8000fb0:	f000 f85c 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000fb4:	201b      	movs	r0, #27
 8000fb6:	f000 f859 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000fba:	2004      	movs	r0, #4
 8000fbc:	f000 f856 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000fc0:	2011      	movs	r0, #17
 8000fc2:	f000 f853 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	f000 f850 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000fcc:	2031      	movs	r0, #49	; 0x31
 8000fce:	f000 f84d 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000fd2:	2033      	movs	r0, #51	; 0x33
 8000fd4:	f000 f84a 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000fd8:	2042      	movs	r0, #66	; 0x42
 8000fda:	f000 f847 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000fde:	2005      	movs	r0, #5
 8000fe0:	f000 f844 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000fe4:	200c      	movs	r0, #12
 8000fe6:	f000 f841 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f000 f83e 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000ff0:	2028      	movs	r0, #40	; 0x28
 8000ff2:	f000 f83b 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000ff6:	202f      	movs	r0, #47	; 0x2f
 8000ff8:	f000 f838 	bl	800106c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000ffc:	200f      	movs	r0, #15
 8000ffe:	f000 f835 	bl	800106c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001002:	2011      	movs	r0, #17
 8001004:	f000 f825 	bl	8001052 <ili9341_WriteReg>
  LCD_Delay(200);
 8001008:	20c8      	movs	r0, #200	; 0xc8
 800100a:	f000 fc23 	bl	8001854 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800100e:	2029      	movs	r0, #41	; 0x29
 8001010:	f000 f81f 	bl	8001052 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001014:	202c      	movs	r0, #44	; 0x2c
 8001016:	f000 f81c 	bl	8001052 <ili9341_WriteReg>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}

0800101e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001022:	f000 fb29 	bl	8001678 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001026:	2103      	movs	r1, #3
 8001028:	20d3      	movs	r0, #211	; 0xd3
 800102a:	f000 f82c 	bl	8001086 <ili9341_ReadData>
 800102e:	4603      	mov	r3, r0
 8001030:	b29b      	uxth	r3, r3
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}

08001036 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800103a:	2029      	movs	r0, #41	; 0x29
 800103c:	f000 f809 	bl	8001052 <ili9341_WriteReg>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001048:	2028      	movs	r0, #40	; 0x28
 800104a:	f000 f802 	bl	8001052 <ili9341_WriteReg>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}

08001052 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fba4 	bl	80017ac <LCD_IO_WriteReg>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fb75 	bl	8001768 <LCD_IO_WriteData>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	460a      	mov	r2, r1
 8001090:	80fb      	strh	r3, [r7, #6]
 8001092:	4613      	mov	r3, r2
 8001094:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001096:	797a      	ldrb	r2, [r7, #5]
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fba7 	bl	80017f0 <LCD_IO_ReadData>
 80010a2:	4603      	mov	r3, r0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80010b0:	23f0      	movs	r3, #240	; 0xf0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80010c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80010dc:	f000 fbc6 	bl	800186c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80010e6:	f107 030f 	add.w	r3, r7, #15
 80010ea:	2201      	movs	r2, #1
 80010ec:	2120      	movs	r1, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fc08 	bl	8001904 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	2201      	movs	r2, #1
 8001104:	2123      	movs	r1, #35	; 0x23
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fbfc 	bl	8001904 <GYRO_IO_Write>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001128:	f000 fba0 	bl	800186c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	2201      	movs	r2, #1
 8001130:	210f      	movs	r1, #15
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fc18 	bl	8001968 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001138:	79fb      	ldrb	r3, [r7, #7]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	2201      	movs	r2, #1
 800114c:	2124      	movs	r1, #36	; 0x24
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fc0a 	bl	8001968 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115a:	b2db      	uxtb	r3, r3
 800115c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	2201      	movs	r2, #1
 8001162:	2124      	movs	r1, #36	; 0x24
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fbcd 	bl	8001904 <GYRO_IO_Write>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001186:	f107 030f 	add.w	r3, r7, #15
 800118a:	2201      	movs	r2, #1
 800118c:	2120      	movs	r1, #32
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fbb8 	bl	8001904 <GYRO_IO_Write>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	2300      	movs	r3, #0
 80011ac:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80011ae:	f107 030f 	add.w	r3, r7, #15
 80011b2:	2201      	movs	r2, #1
 80011b4:	2130      	movs	r1, #48	; 0x30
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fbd6 	bl	8001968 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80011bc:	f107 030e 	add.w	r3, r7, #14
 80011c0:	2201      	movs	r2, #1
 80011c2:	2122      	movs	r1, #34	; 0x22
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fbcf 	bl	8001968 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	121b      	asrs	r3, r3, #8
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
 80011ea:	f023 0320 	bic.w	r3, r3, #32
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80011fe:	f107 030f 	add.w	r3, r7, #15
 8001202:	2201      	movs	r2, #1
 8001204:	2130      	movs	r1, #48	; 0x30
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fb7c 	bl	8001904 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800120c:	f107 030e 	add.w	r3, r7, #14
 8001210:	2201      	movs	r2, #1
 8001212:	2122      	movs	r1, #34	; 0x22
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fb75 	bl	8001904 <GYRO_IO_Write>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800122c:	f107 030f 	add.w	r3, r7, #15
 8001230:	2201      	movs	r2, #1
 8001232:	2122      	movs	r1, #34	; 0x22
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fb97 	bl	8001968 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10a      	bne.n	8001256 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001246:	b2db      	uxtb	r3, r3
 8001248:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001250:	b2db      	uxtb	r3, r3
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e00c      	b.n	8001270 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d109      	bne.n	8001270 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	f023 0308 	bic.w	r3, r3, #8
 8001262:	b2db      	uxtb	r3, r3
 8001264:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	b2db      	uxtb	r3, r3
 800126e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001270:	f107 030f 	add.w	r3, r7, #15
 8001274:	2201      	movs	r2, #1
 8001276:	2122      	movs	r1, #34	; 0x22
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fb43 	bl	8001904 <GYRO_IO_Write>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001290:	f107 030f 	add.w	r3, r7, #15
 8001294:	2201      	movs	r2, #1
 8001296:	2122      	movs	r1, #34	; 0x22
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fb65 	bl	8001968 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e009      	b.n	80012c8 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	f023 0308 	bic.w	r3, r3, #8
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80012c8:	f107 030f 	add.w	r3, r7, #15
 80012cc:	2201      	movs	r2, #1
 80012ce:	2122      	movs	r1, #34	; 0x22
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fb17 	bl	8001904 <GYRO_IO_Write>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80012e8:	f107 030f 	add.w	r3, r7, #15
 80012ec:	2201      	movs	r2, #1
 80012ee:	2121      	movs	r1, #33	; 0x21
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fb39 	bl	8001968 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4313      	orrs	r3, r2
 8001306:	b2db      	uxtb	r3, r3
 8001308:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800130a:	f107 030f 	add.w	r3, r7, #15
 800130e:	2201      	movs	r2, #1
 8001310:	2121      	movs	r1, #33	; 0x21
 8001312:	4618      	mov	r0, r3
 8001314:	f000 faf6 	bl	8001904 <GYRO_IO_Write>
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800132a:	f107 030f 	add.w	r3, r7, #15
 800132e:	2201      	movs	r2, #1
 8001330:	2124      	movs	r1, #36	; 0x24
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fb18 	bl	8001968 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	f023 0310 	bic.w	r3, r3, #16
 800133e:	b2db      	uxtb	r3, r3
 8001340:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4313      	orrs	r3, r2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800134c:	f107 030f 	add.w	r3, r7, #15
 8001350:	2201      	movs	r2, #1
 8001352:	2124      	movs	r1, #36	; 0x24
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fad5 	bl	8001904 <GYRO_IO_Write>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	2300      	movs	r3, #0
 8001372:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800138c:	f107 030f 	add.w	r3, r7, #15
 8001390:	2201      	movs	r2, #1
 8001392:	2123      	movs	r1, #35	; 0x23
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fae7 	bl	8001968 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	2206      	movs	r2, #6
 80013a0:	2128      	movs	r1, #40	; 0x28
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fae0 	bl	8001968 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d123      	bne.n	80013fa <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
 80013b6:	e01c      	b.n	80013f2 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	3301      	adds	r3, #1
 80013be:	3328      	adds	r3, #40	; 0x28
 80013c0:	443b      	add	r3, r7
 80013c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	3328      	adds	r3, #40	; 0x28
 80013d2:	443b      	add	r3, r7
 80013d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4413      	add	r3, r2
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b21a      	sxth	r2, r3
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	3328      	adds	r3, #40	; 0x28
 80013e6:	443b      	add	r3, r7
 80013e8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	3301      	adds	r3, #1
 80013f0:	623b      	str	r3, [r7, #32]
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	dddf      	ble.n	80013b8 <L3GD20_ReadXYZAngRate+0x54>
 80013f8:	e022      	b.n	8001440 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	e01c      	b.n	800143a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	3328      	adds	r3, #40	; 0x28
 8001406:	443b      	add	r3, r7
 8001408:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800140c:	b29b      	uxth	r3, r3
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b29a      	uxth	r2, r3
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	3301      	adds	r3, #1
 8001418:	3328      	adds	r3, #40	; 0x28
 800141a:	443b      	add	r3, r7
 800141c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4413      	add	r3, r2
 8001424:	b29b      	uxth	r3, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	3328      	adds	r3, #40	; 0x28
 800142e:	443b      	add	r3, r7
 8001430:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	3301      	adds	r3, #1
 8001438:	623b      	str	r3, [r7, #32]
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	2b02      	cmp	r3, #2
 800143e:	dddf      	ble.n	8001400 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001446:	2b20      	cmp	r3, #32
 8001448:	d00c      	beq.n	8001464 <L3GD20_ReadXYZAngRate+0x100>
 800144a:	2b20      	cmp	r3, #32
 800144c:	dc0d      	bgt.n	800146a <L3GD20_ReadXYZAngRate+0x106>
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <L3GD20_ReadXYZAngRate+0xf4>
 8001452:	2b10      	cmp	r3, #16
 8001454:	d003      	beq.n	800145e <L3GD20_ReadXYZAngRate+0xfa>
 8001456:	e008      	b.n	800146a <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <L3GD20_ReadXYZAngRate+0x14c>)
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800145c:	e005      	b.n	800146a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <L3GD20_ReadXYZAngRate+0x150>)
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001462:	e002      	b.n	800146a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <L3GD20_ReadXYZAngRate+0x154>)
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001468:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	e016      	b.n	800149e <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	3328      	adds	r3, #40	; 0x28
 8001476:	443b      	add	r3, r7
 8001478:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001494:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	3301      	adds	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	dde5      	ble.n	8001470 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	410c0000 	.word	0x410c0000
 80014b4:	418c0000 	.word	0x418c0000
 80014b8:	428c0000 	.word	0x428c0000

080014bc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80014c0:	4819      	ldr	r0, [pc, #100]	; (8001528 <SPIx_Init+0x6c>)
 80014c2:	f005 fb88 	bl	8006bd6 <HAL_SPI_GetState>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12b      	bne.n	8001524 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <SPIx_Init+0x6c>)
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <SPIx_Init+0x70>)
 80014d0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <SPIx_Init+0x6c>)
 80014d4:	2218      	movs	r2, #24
 80014d6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <SPIx_Init+0x6c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <SPIx_Init+0x6c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <SPIx_Init+0x6c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <SPIx_Init+0x6c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <SPIx_Init+0x6c>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <SPIx_Init+0x6c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <SPIx_Init+0x6c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <SPIx_Init+0x6c>)
 8001504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001508:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <SPIx_Init+0x6c>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SPIx_Init+0x6c>)
 8001512:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001516:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <SPIx_Init+0x6c>)
 800151a:	f000 f873 	bl	8001604 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800151e:	4802      	ldr	r0, [pc, #8]	; (8001528 <SPIx_Init+0x6c>)
 8001520:	f004 fe89 	bl	8006236 <HAL_SPI_Init>
  }
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000284 	.word	0x20000284
 800152c:	40015000 	.word	0x40015000

08001530 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <SPIx_Read+0x38>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f107 0108 	add.w	r1, r7, #8
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <SPIx_Read+0x3c>)
 800154c:	f005 f87b 	bl	8006646 <HAL_SPI_Receive>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800155a:	f000 f847 	bl	80015ec <SPIx_Error>
  }

  return readvalue;
 800155e:	68bb      	ldr	r3, [r7, #8]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000007c 	.word	0x2000007c
 800156c:	20000284 	.word	0x20000284

08001570 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <SPIx_Write+0x34>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	1db9      	adds	r1, r7, #6
 8001584:	2201      	movs	r2, #1
 8001586:	4808      	ldr	r0, [pc, #32]	; (80015a8 <SPIx_Write+0x38>)
 8001588:	f004 ff1a 	bl	80063c0 <HAL_SPI_Transmit>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001596:	f000 f829 	bl	80015ec <SPIx_Error>
  }
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000007c 	.word	0x2000007c
 80015a8:	20000284 	.word	0x20000284

080015ac <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <SPIx_WriteRead+0x38>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f107 020f 	add.w	r2, r7, #15
 80015c2:	1df9      	adds	r1, r7, #7
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <SPIx_WriteRead+0x3c>)
 80015ca:	f005 f954 	bl	8006876 <HAL_SPI_TransmitReceive>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80015d4:	f000 f80a 	bl	80015ec <SPIx_Error>
  }

  return receivedbyte;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000007c 	.word	0x2000007c
 80015e8:	20000284 	.word	0x20000284

080015ec <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <SPIx_Error+0x14>)
 80015f2:	f004 fea9 	bl	8006348 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80015f6:	f7ff ff61 	bl	80014bc <SPIx_Init>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000284 	.word	0x20000284

08001604 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <SPIx_MspInit+0x6c>)
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <SPIx_MspInit+0x6c>)
 8001616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800161a:	6453      	str	r3, [r2, #68]	; 0x44
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <SPIx_MspInit+0x6c>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <SPIx_MspInit+0x6c>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <SPIx_MspInit+0x6c>)
 8001632:	f043 0320 	orr.w	r3, r3, #32
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <SPIx_MspInit+0x6c>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001644:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800164e:	2302      	movs	r3, #2
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001652:	2301      	movs	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001656:	2305      	movs	r3, #5
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <SPIx_MspInit+0x70>)
 8001662:	f001 ffe7 	bl	8003634 <HAL_GPIO_Init>
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40021400 	.word	0x40021400

08001678 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <LCD_IO_Init+0xe0>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d164      	bne.n	8001750 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <LCD_IO_Init+0xe0>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <LCD_IO_Init+0xe4>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4a31      	ldr	r2, [pc, #196]	; (800175c <LCD_IO_Init+0xe4>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6313      	str	r3, [r2, #48]	; 0x30
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <LCD_IO_Init+0xe4>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	4827      	ldr	r0, [pc, #156]	; (8001760 <LCD_IO_Init+0xe8>)
 80016c2:	f001 ffb7 	bl	8003634 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <LCD_IO_Init+0xe4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a23      	ldr	r2, [pc, #140]	; (800175c <LCD_IO_Init+0xe4>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <LCD_IO_Init+0xe4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <LCD_IO_Init+0xe8>)
 80016fc:	f001 ff9a 	bl	8003634 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <LCD_IO_Init+0xe4>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <LCD_IO_Init+0xe4>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <LCD_IO_Init+0xe4>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800171c:	2304      	movs	r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <LCD_IO_Init+0xec>)
 8001734:	f001 ff7e 	bl	8003634 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001738:	2200      	movs	r2, #0
 800173a:	2104      	movs	r1, #4
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <LCD_IO_Init+0xec>)
 800173e:	f002 f925 	bl	800398c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001742:	2201      	movs	r2, #1
 8001744:	2104      	movs	r1, #4
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <LCD_IO_Init+0xec>)
 8001748:	f002 f920 	bl	800398c <HAL_GPIO_WritePin>

    SPIx_Init();
 800174c:	f7ff feb6 	bl	80014bc <SPIx_Init>
  }
}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200002dc 	.word	0x200002dc
 800175c:	40023800 	.word	0x40023800
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40020800 	.word	0x40020800

08001768 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <LCD_IO_WriteData+0x3c>)
 800177a:	f002 f907 	bl	800398c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800177e:	2200      	movs	r2, #0
 8001780:	2104      	movs	r1, #4
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <LCD_IO_WriteData+0x40>)
 8001784:	f002 f902 	bl	800398c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fef0 	bl	8001570 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001790:	2201      	movs	r2, #1
 8001792:	2104      	movs	r1, #4
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <LCD_IO_WriteData+0x40>)
 8001796:	f002 f8f9 	bl	800398c <HAL_GPIO_WritePin>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40020800 	.word	0x40020800

080017ac <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <LCD_IO_WriteReg+0x3c>)
 80017be:	f002 f8e5 	bl	800398c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80017c2:	2200      	movs	r2, #0
 80017c4:	2104      	movs	r1, #4
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <LCD_IO_WriteReg+0x40>)
 80017c8:	f002 f8e0 	bl	800398c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fecd 	bl	8001570 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80017d6:	2201      	movs	r2, #1
 80017d8:	2104      	movs	r1, #4
 80017da:	4804      	ldr	r0, [pc, #16]	; (80017ec <LCD_IO_WriteReg+0x40>)
 80017dc:	f002 f8d6 	bl	800398c <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40020800 	.word	0x40020800

080017f0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	4613      	mov	r3, r2
 80017fe:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001804:	2200      	movs	r2, #0
 8001806:	2104      	movs	r1, #4
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <LCD_IO_ReadData+0x5c>)
 800180a:	f002 f8bf 	bl	800398c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001814:	480e      	ldr	r0, [pc, #56]	; (8001850 <LCD_IO_ReadData+0x60>)
 8001816:	f002 f8b9 	bl	800398c <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fea7 	bl	8001570 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001822:	797b      	ldrb	r3, [r7, #5]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe83 	bl	8001530 <SPIx_Read>
 800182a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <LCD_IO_ReadData+0x60>)
 8001834:	f002 f8aa 	bl	800398c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001838:	2201      	movs	r2, #1
 800183a:	2104      	movs	r1, #4
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <LCD_IO_ReadData+0x5c>)
 800183e:	f002 f8a5 	bl	800398c <HAL_GPIO_WritePin>

  return readvalue;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00

08001854 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f001 f98f 	bl	8002b80 <HAL_Delay>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <GYRO_IO_Init+0x8c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <GYRO_IO_Init+0x8c>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <GYRO_IO_Init+0x8c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800188e:	2302      	movs	r3, #2
 8001890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <GYRO_IO_Init+0x90>)
 80018a6:	f001 fec5 	bl	8003634 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80018aa:	2201      	movs	r2, #1
 80018ac:	2102      	movs	r1, #2
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <GYRO_IO_Init+0x90>)
 80018b0:	f002 f86c 	bl	800398c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <GYRO_IO_Init+0x8c>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <GYRO_IO_Init+0x8c>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <GYRO_IO_Init+0x8c>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80018d0:	2306      	movs	r3, #6
 80018d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80018d8:	2302      	movs	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <GYRO_IO_Init+0x94>)
 80018e8:	f001 fea4 	bl	8003634 <HAL_GPIO_Init>

  SPIx_Init();
 80018ec:	f7ff fde6 	bl	80014bc <SPIx_Init>
}
 80018f0:	bf00      	nop
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000

08001904 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
 8001910:	4613      	mov	r3, r2
 8001912:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001914:	883b      	ldrh	r3, [r7, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d903      	bls.n	8001922 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001922:	2200      	movs	r2, #0
 8001924:	2102      	movs	r1, #2
 8001926:	480f      	ldr	r0, [pc, #60]	; (8001964 <GYRO_IO_Write+0x60>)
 8001928:	f002 f830 	bl	800398c <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe3c 	bl	80015ac <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001934:	e00a      	b.n	800194c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fe36 	bl	80015ac <SPIx_WriteRead>
    NumByteToWrite--;
 8001940:	883b      	ldrh	r3, [r7, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3301      	adds	r3, #1
 800194a:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 800194c:	883b      	ldrh	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f1      	bne.n	8001936 <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001952:	2201      	movs	r2, #1
 8001954:	2102      	movs	r1, #2
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <GYRO_IO_Write+0x60>)
 8001958:	f002 f818 	bl	800398c <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020800 	.word	0x40020800

08001968 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
 8001974:	4613      	mov	r3, r2
 8001976:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8001978:	883b      	ldrh	r3, [r7, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d904      	bls.n	8001988 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001984:	70fb      	strb	r3, [r7, #3]
 8001986:	e003      	b.n	8001990 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800198e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001990:	2200      	movs	r2, #0
 8001992:	2102      	movs	r1, #2
 8001994:	4810      	ldr	r0, [pc, #64]	; (80019d8 <GYRO_IO_Read+0x70>)
 8001996:	f001 fff9 	bl	800398c <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe05 	bl	80015ac <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 80019a2:	e00c      	b.n	80019be <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fe01 	bl	80015ac <SPIx_WriteRead>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80019b2:	883b      	ldrh	r3, [r7, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 80019be:	883b      	ldrh	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ef      	bne.n	80019a4 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 80019c4:	2201      	movs	r2, #1
 80019c6:	2102      	movs	r1, #2
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <GYRO_IO_Read+0x70>)
 80019ca:	f001 ffdf 	bl	800398c <HAL_GPIO_WritePin>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020800 	.word	0x40020800

080019dc <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80019e6:	2300      	movs	r3, #0
 80019e8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 80019ea:	2300      	movs	r3, #0
 80019ec:	703b      	strb	r3, [r7, #0]
 80019ee:	2300      	movs	r3, #0
 80019f0:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <BSP_GYRO_Init+0xc4>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	4798      	blx	r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	2bd4      	cmp	r3, #212	; 0xd4
 80019fc:	d005      	beq.n	8001a0a <BSP_GYRO_Init+0x2e>
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <BSP_GYRO_Init+0xc4>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4798      	blx	r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	2bd5      	cmp	r3, #213	; 0xd5
 8001a08:	d145      	bne.n	8001a96 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <BSP_GYRO_Init+0xc8>)
 8001a0c:	4a24      	ldr	r2, [pc, #144]	; (8001aa0 <BSP_GYRO_Init+0xc4>)
 8001a0e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8001a10:	2308      	movs	r3, #8
 8001a12:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8001a1c:	2330      	movs	r3, #48	; 0x30
 8001a1e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001a20:	2300      	movs	r3, #0
 8001a22:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8001a24:	2300      	movs	r3, #0
 8001a26:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8001a28:	2310      	movs	r3, #16
 8001a2a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001a2c:	793a      	ldrb	r2, [r7, #4]
 8001a2e:	797b      	ldrb	r3, [r7, #5]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001a34:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001a42:	7a3a      	ldrb	r2, [r7, #8]
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8001a4a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	89bb      	ldrh	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <BSP_GYRO_Init+0xc8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	89ba      	ldrh	r2, [r7, #12]
 8001a64:	4610      	mov	r0, r2
 8001a66:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8001a70:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001a72:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <BSP_GYRO_Init+0xc8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	89ba      	ldrh	r2, [r7, #12]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	4610      	mov	r0, r2
 8001a86:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <BSP_GYRO_Init+0xc8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	2010      	movs	r0, #16
 8001a90:	4798      	blx	r3

    ret = GYRO_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000048 	.word	0x20000048
 8001aa4:	200002e0 	.word	0x200002e0

08001aa8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001aae:	4a2e      	ldr	r2, [pc, #184]	; (8001b68 <BSP_LCD_Init+0xc0>)
 8001ab0:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001ab4:	2209      	movs	r2, #9
 8001ab6:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001ac0:	221d      	movs	r2, #29
 8001ac2:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001acc:	f240 120d 	movw	r2, #269	; 0x10d
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001ad4:	f240 1243 	movw	r2, #323	; 0x143
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001adc:	f240 1217 	movw	r2, #279	; 0x117
 8001ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001ae4:	f240 1247 	movw	r2, #327	; 0x147
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <BSP_LCD_Init+0xc4>)
 8001b04:	2208      	movs	r2, #8
 8001b06:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <BSP_LCD_Init+0xc4>)
 8001b0a:	22c0      	movs	r2, #192	; 0xc0
 8001b0c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <BSP_LCD_Init+0xc4>)
 8001b10:	2204      	movs	r2, #4
 8001b12:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <BSP_LCD_Init+0xc4>)
 8001b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <BSP_LCD_Init+0xc4>)
 8001b1e:	f004 f92f 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8001b3a:	f000 fc27 	bl	800238c <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001b3e:	4809      	ldr	r0, [pc, #36]	; (8001b64 <BSP_LCD_Init+0xbc>)
 8001b40:	f001 ff3e 	bl	80039c0 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <BSP_LCD_Init+0xc8>)
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <BSP_LCD_Init+0xcc>)
 8001b48:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <BSP_LCD_Init+0xc8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001b52:	f000 fe09 	bl	8002768 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001b56:	4808      	ldr	r0, [pc, #32]	; (8001b78 <BSP_LCD_Init+0xd0>)
 8001b58:	f000 f8ce 	bl	8001cf8 <BSP_LCD_SetFont>

  return LCD_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200002e4 	.word	0x200002e4
 8001b68:	40016800 	.word	0x40016800
 8001b6c:	200003cc 	.word	0x200003cc
 8001b70:	20000418 	.word	0x20000418
 8001b74:	20000010 	.word	0x20000010
 8001b78:	20000080 	.word	0x20000080

08001b7c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <BSP_LCD_GetXSize+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	4798      	blx	r3
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000418 	.word	0x20000418

08001b94 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <BSP_LCD_GetYSize+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	4798      	blx	r3
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000418 	.word	0x20000418

08001bac <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b090      	sub	sp, #64	; 0x40
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001bbc:	f7ff ffde 	bl	8001b7c <BSP_LCD_GetXSize>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001bc8:	f7ff ffe4 	bl	8001b94 <BSP_LCD_GetYSize>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001bd8:	23ff      	movs	r3, #255	; 0xff
 8001bda:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bf2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001bfc:	f7ff ffbe 	bl	8001b7c <BSP_LCD_GetXSize>
 8001c00:	4603      	mov	r3, r0
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001c04:	f7ff ffc6 	bl	8001b94 <BSP_LCD_GetYSize>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4619      	mov	r1, r3
 8001c14:	4814      	ldr	r0, [pc, #80]	; (8001c68 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001c16:	f001 ffad 	bl	8003b74 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001c1a:	88fa      	ldrh	r2, [r7, #6]
 8001c1c:	4913      	ldr	r1, [pc, #76]	; (8001c6c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3304      	adds	r3, #4
 8001c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3308      	adds	r3, #8
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001c42:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001c44:	88fa      	ldrh	r2, [r7, #6]
 8001c46:	4909      	ldr	r1, [pc, #36]	; (8001c6c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001c56:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001c5a:	f001 ffc9 	bl	8003bf0 <HAL_LTDC_EnableDither>
}
 8001c5e:	bf00      	nop
 8001c60:	3740      	adds	r7, #64	; 0x40
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200002e4 	.word	0x200002e4
 8001c6c:	20000400 	.word	0x20000400
 8001c70:	20000080 	.word	0x20000080

08001c74 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <BSP_LCD_SelectLayer+0x1c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200003fc 	.word	0x200003fc

08001c94 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <BSP_LCD_SetTextColor+0x28>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <BSP_LCD_SetTextColor+0x2c>)
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	200003fc 	.word	0x200003fc
 8001cc0:	20000400 	.word	0x20000400

08001cc4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <BSP_LCD_SetBackColor+0x2c>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <BSP_LCD_SetBackColor+0x30>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3304      	adds	r3, #4
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	200003fc 	.word	0x200003fc
 8001cf4:	20000400 	.word	0x20000400

08001cf8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <BSP_LCD_SetFont+0x2c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4908      	ldr	r1, [pc, #32]	; (8001d28 <BSP_LCD_SetFont+0x30>)
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	3308      	adds	r3, #8
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200003fc 	.word	0x200003fc
 8001d28:	20000400 	.word	0x20000400

08001d2c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <BSP_LCD_GetFont+0x24>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4907      	ldr	r1, [pc, #28]	; (8001d54 <BSP_LCD_GetFont+0x28>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3308      	adds	r3, #8
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	200003fc 	.word	0x200003fc
 8001d54:	20000400 	.word	0x20000400

08001d58 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <BSP_LCD_Clear+0x48>)
 8001d62:	681c      	ldr	r4, [r3, #0]
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <BSP_LCD_Clear+0x48>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <BSP_LCD_Clear+0x4c>)
 8001d6a:	2134      	movs	r1, #52	; 0x34
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	335c      	adds	r3, #92	; 0x5c
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461e      	mov	r6, r3
 8001d78:	f7ff ff00 	bl	8001b7c <BSP_LCD_GetXSize>
 8001d7c:	4605      	mov	r5, r0
 8001d7e:	f7ff ff09 	bl	8001b94 <BSP_LCD_GetYSize>
 8001d82:	4602      	mov	r2, r0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	462a      	mov	r2, r5
 8001d90:	4631      	mov	r1, r6
 8001d92:	4620      	mov	r0, r4
 8001d94:	f000 fcb0 	bl	80026f8 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da0:	200003fc 	.word	0x200003fc
 8001da4:	200002e4 	.word	0x200002e4

08001da8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
 8001db2:	460b      	mov	r3, r1
 8001db4:	80bb      	strh	r3, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001dba:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <BSP_LCD_DisplayChar+0x80>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	491b      	ldr	r1, [pc, #108]	; (8001e2c <BSP_LCD_DisplayChar+0x84>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3308      	adds	r3, #8
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <BSP_LCD_DisplayChar+0x80>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4c14      	ldr	r4, [pc, #80]	; (8001e2c <BSP_LCD_DisplayChar+0x84>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4423      	add	r3, r4
 8001de6:	3308      	adds	r3, #8
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001dec:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <BSP_LCD_DisplayChar+0x80>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4c0d      	ldr	r4, [pc, #52]	; (8001e2c <BSP_LCD_DisplayChar+0x84>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4423      	add	r3, r4
 8001e00:	3308      	adds	r3, #8
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	889b      	ldrh	r3, [r3, #4]
 8001e06:	3307      	adds	r3, #7
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da00      	bge.n	8001e0e <BSP_LCD_DisplayChar+0x66>
 8001e0c:	3307      	adds	r3, #7
 8001e0e:	10db      	asrs	r3, r3, #3
 8001e10:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001e14:	18ca      	adds	r2, r1, r3
 8001e16:	88b9      	ldrh	r1, [r7, #4]
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fbb2 	bl	8002584 <DrawChar>
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}
 8001e28:	200003fc 	.word	0x200003fc
 8001e2c:	20000400 	.word	0x20000400

08001e30 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60ba      	str	r2, [r7, #8]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	81fb      	strh	r3, [r7, #14]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	81bb      	strh	r3, [r7, #12]
 8001e42:	4613      	mov	r3, r2
 8001e44:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001e46:	2301      	movs	r3, #1
 8001e48:	83fb      	strh	r3, [r7, #30]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8001e5a:	e002      	b.n	8001e62 <BSP_LCD_DisplayStringAt+0x32>
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	617a      	str	r2, [r7, #20]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f6      	bne.n	8001e5c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8001e6e:	f7ff fe85 	bl	8001b7c <BSP_LCD_GetXSize>
 8001e72:	4601      	mov	r1, r0
 8001e74:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <BSP_LCD_DisplayStringAt+0x174>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	484b      	ldr	r0, [pc, #300]	; (8001fa8 <BSP_LCD_DisplayStringAt+0x178>)
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4403      	add	r3, r0
 8001e84:	3308      	adds	r3, #8
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	889b      	ldrh	r3, [r3, #4]
 8001e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8e:	613b      	str	r3, [r7, #16]

  switch (mode)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d01c      	beq.n	8001ed0 <BSP_LCD_DisplayStringAt+0xa0>
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	dc33      	bgt.n	8001f02 <BSP_LCD_DisplayStringAt+0xd2>
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d002      	beq.n	8001ea4 <BSP_LCD_DisplayStringAt+0x74>
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d019      	beq.n	8001ed6 <BSP_LCD_DisplayStringAt+0xa6>
 8001ea2:	e02e      	b.n	8001f02 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	1ad1      	subs	r1, r2, r3
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <BSP_LCD_DisplayStringAt+0x174>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	483e      	ldr	r0, [pc, #248]	; (8001fa8 <BSP_LCD_DisplayStringAt+0x178>)
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4403      	add	r3, r0
 8001eba:	3308      	adds	r3, #8
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	889b      	ldrh	r3, [r3, #4]
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	89fb      	ldrh	r3, [r7, #14]
 8001eca:	4413      	add	r3, r2
 8001ecc:	83fb      	strh	r3, [r7, #30]
      break;
 8001ece:	e01b      	b.n	8001f08 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
 8001ed2:	83fb      	strh	r3, [r7, #30]
      break;
 8001ed4:	e018      	b.n	8001f08 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	b299      	uxth	r1, r3
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <BSP_LCD_DisplayStringAt+0x174>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4831      	ldr	r0, [pc, #196]	; (8001fa8 <BSP_LCD_DisplayStringAt+0x178>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4403      	add	r3, r0
 8001eee:	3308      	adds	r3, #8
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	889b      	ldrh	r3, [r3, #4]
 8001ef4:	fb11 f303 	smulbb	r3, r1, r3
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	4413      	add	r3, r2
 8001efe:	83fb      	strh	r3, [r7, #30]
      break;
 8001f00:	e002      	b.n	8001f08 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	83fb      	strh	r3, [r7, #30]
      break;
 8001f06:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001f08:	e01a      	b.n	8001f40 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	89b9      	ldrh	r1, [r7, #12]
 8001f10:	8bfb      	ldrh	r3, [r7, #30]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff48 	bl	8001da8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <BSP_LCD_DisplayStringAt+0x174>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4922      	ldr	r1, [pc, #136]	; (8001fa8 <BSP_LCD_DisplayStringAt+0x178>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	3308      	adds	r3, #8
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	889a      	ldrh	r2, [r3, #4]
 8001f2e:	8bfb      	ldrh	r3, [r7, #30]
 8001f30:	4413      	add	r3, r2
 8001f32:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	3301      	adds	r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
    i++;
 8001f3a:	8bbb      	ldrh	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2dc      	uxtb	r4, r3
 8001f4e:	f7ff fe15 	bl	8001b7c <BSP_LCD_GetXSize>
 8001f52:	8bb9      	ldrh	r1, [r7, #28]
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <BSP_LCD_DisplayStringAt+0x174>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4d13      	ldr	r5, [pc, #76]	; (8001fa8 <BSP_LCD_DisplayStringAt+0x178>)
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	442b      	add	r3, r5
 8001f64:	3308      	adds	r3, #8
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	889b      	ldrh	r3, [r3, #4]
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	1ac3      	subs	r3, r0, r3
 8001f70:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <BSP_LCD_DisplayStringAt+0x174>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <BSP_LCD_DisplayStringAt+0x178>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4403      	add	r3, r0
 8001f82:	3308      	adds	r3, #8
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001f88:	4299      	cmp	r1, r3
 8001f8a:	bf2c      	ite	cs
 8001f8c:	2301      	movcs	r3, #1
 8001f8e:	2300      	movcc	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4023      	ands	r3, r4
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1b7      	bne.n	8001f0a <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa4:	200003fc 	.word	0x200003fc
 8001fa8:	20000400 	.word	0x20000400

08001fac <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001fb8:	f7ff feb8 	bl	8001d2c <BSP_LCD_GetFont>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	88db      	ldrh	r3, [r3, #6]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	fb12 f303 	smulbb	r3, r2, r3
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	2303      	movs	r3, #3
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ff2f 	bl	8001e30 <BSP_LCD_DisplayStringAt>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001fdc:	b5b0      	push	{r4, r5, r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	80bb      	strh	r3, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <BSP_LCD_DrawHLine+0x70>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a16      	ldr	r2, [pc, #88]	; (8002050 <BSP_LCD_DrawHLine+0x74>)
 8001ff8:	2134      	movs	r1, #52	; 0x34
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	335c      	adds	r3, #92	; 0x5c
 8002002:	681c      	ldr	r4, [r3, #0]
 8002004:	f7ff fdba 	bl	8001b7c <BSP_LCD_GetXSize>
 8002008:	4602      	mov	r2, r0
 800200a:	88bb      	ldrh	r3, [r7, #4]
 800200c:	fb03 f202 	mul.w	r2, r3, r2
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4423      	add	r3, r4
 8002018:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <BSP_LCD_DrawHLine+0x70>)
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	887c      	ldrh	r4, [r7, #2]
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <BSP_LCD_DrawHLine+0x70>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4d0b      	ldr	r5, [pc, #44]	; (8002054 <BSP_LCD_DrawHLine+0x78>)
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	442b      	add	r3, r5
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	2300      	movs	r3, #0
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2301      	movs	r3, #1
 800203c:	4622      	mov	r2, r4
 800203e:	f000 fb5b 	bl	80026f8 <FillBuffer>
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bdb0      	pop	{r4, r5, r7, pc}
 800204a:	bf00      	nop
 800204c:	200003fc 	.word	0x200003fc
 8002050:	200002e4 	.word	0x200002e4
 8002054:	20000400 	.word	0x20000400

08002058 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
 8002062:	460b      	mov	r3, r1
 8002064:	80bb      	strh	r3, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	f1c3 0303 	rsb	r3, r3, #3
 8002072:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	60fb      	str	r3, [r7, #12]

  while (curx <= cury)
 800207c:	e0c7      	b.n	800220e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	b29a      	uxth	r2, r3
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	4413      	add	r3, r2
 8002086:	b298      	uxth	r0, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	b29b      	uxth	r3, r3
 800208c:	88ba      	ldrh	r2, [r7, #4]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	b299      	uxth	r1, r3
 8002092:	4b64      	ldr	r3, [pc, #400]	; (8002224 <BSP_LCD_DrawCircle+0x1cc>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4c64      	ldr	r4, [pc, #400]	; (8002228 <BSP_LCD_DrawCircle+0x1d0>)
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4423      	add	r3, r4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	f000 fa47 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	88fa      	ldrh	r2, [r7, #6]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	b298      	uxth	r0, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	88ba      	ldrh	r2, [r7, #4]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	b299      	uxth	r1, r3
 80020be:	4b59      	ldr	r3, [pc, #356]	; (8002224 <BSP_LCD_DrawCircle+0x1cc>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4c59      	ldr	r4, [pc, #356]	; (8002228 <BSP_LCD_DrawCircle+0x1d0>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4423      	add	r3, r4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	f000 fa31 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4413      	add	r3, r2
 80020de:	b298      	uxth	r0, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	88ba      	ldrh	r2, [r7, #4]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	b299      	uxth	r1, r3
 80020ea:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <BSP_LCD_DrawCircle+0x1cc>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4c4e      	ldr	r4, [pc, #312]	; (8002228 <BSP_LCD_DrawCircle+0x1d0>)
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4423      	add	r3, r4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f000 fa1b 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	b29b      	uxth	r3, r3
 8002106:	88fa      	ldrh	r2, [r7, #6]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	b298      	uxth	r0, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	b29b      	uxth	r3, r3
 8002110:	88ba      	ldrh	r2, [r7, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	b299      	uxth	r1, r3
 8002116:	4b43      	ldr	r3, [pc, #268]	; (8002224 <BSP_LCD_DrawCircle+0x1cc>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4c43      	ldr	r4, [pc, #268]	; (8002228 <BSP_LCD_DrawCircle+0x1d0>)
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4423      	add	r3, r4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	f000 fa05 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	b29a      	uxth	r2, r3
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	4413      	add	r3, r2
 8002136:	b298      	uxth	r0, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	b29a      	uxth	r2, r3
 800213c:	88bb      	ldrh	r3, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	b299      	uxth	r1, r3
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <BSP_LCD_DrawCircle+0x1cc>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4c38      	ldr	r4, [pc, #224]	; (8002228 <BSP_LCD_DrawCircle+0x1d0>)
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4423      	add	r3, r4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	f000 f9ef 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	b29b      	uxth	r3, r3
 800215e:	88fa      	ldrh	r2, [r7, #6]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	b298      	uxth	r0, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	b29a      	uxth	r2, r3
 8002168:	88bb      	ldrh	r3, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	b299      	uxth	r1, r3
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <BSP_LCD_DrawCircle+0x1cc>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4c2d      	ldr	r4, [pc, #180]	; (8002228 <BSP_LCD_DrawCircle+0x1d0>)
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4423      	add	r3, r4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	f000 f9d9 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	b29a      	uxth	r2, r3
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	4413      	add	r3, r2
 800218e:	b298      	uxth	r0, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	b29a      	uxth	r2, r3
 8002194:	88bb      	ldrh	r3, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	b299      	uxth	r1, r3
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <BSP_LCD_DrawCircle+0x1cc>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4c22      	ldr	r4, [pc, #136]	; (8002228 <BSP_LCD_DrawCircle+0x1d0>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4423      	add	r3, r4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	f000 f9c3 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	b298      	uxth	r0, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	88bb      	ldrh	r3, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	b299      	uxth	r1, r3
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <BSP_LCD_DrawCircle+0x1cc>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4c17      	ldr	r4, [pc, #92]	; (8002228 <BSP_LCD_DrawCircle+0x1d0>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4423      	add	r3, r4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	f000 f9ad 	bl	8002538 <BSP_LCD_DrawPixel>

    if (d < 0)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	da06      	bge.n	80021f2 <BSP_LCD_DrawCircle+0x19a>
    {
      d += (curx << 2) + 6;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	009a      	lsls	r2, r3, #2
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4413      	add	r3, r2
 80021ec:	3306      	adds	r3, #6
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e00a      	b.n	8002208 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	009a      	lsls	r2, r3, #2
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4413      	add	r3, r2
 80021fe:	330a      	adds	r3, #10
 8002200:	617b      	str	r3, [r7, #20]
      cury--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3b01      	subs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	3301      	adds	r3, #1
 800220c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	429a      	cmp	r2, r3
 8002214:	f67f af33 	bls.w	800207e <BSP_LCD_DrawCircle+0x26>
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	bf00      	nop
 8002224:	200003fc 	.word	0x200003fc
 8002228:	20000400 	.word	0x20000400

0800222c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
 8002236:	460b      	mov	r3, r1
 8002238:	80bb      	strh	r3, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	f1c3 0303 	rsb	r3, r3, #3
 8002246:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002250:	4b44      	ldr	r3, [pc, #272]	; (8002364 <BSP_LCD_FillCircle+0x138>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4944      	ldr	r1, [pc, #272]	; (8002368 <BSP_LCD_FillCircle+0x13c>)
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fd16 	bl	8001c94 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002268:	e061      	b.n	800232e <BSP_LCD_FillCircle+0x102>
  {
    if (cury > 0)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d021      	beq.n	80022b4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	b29b      	uxth	r3, r3
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	b298      	uxth	r0, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	b29a      	uxth	r2, r3
 800227e:	88bb      	ldrh	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	b299      	uxth	r1, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	b29b      	uxth	r3, r3
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	b29b      	uxth	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	f7ff fea5 	bl	8001fdc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	b29b      	uxth	r3, r3
 8002296:	88fa      	ldrh	r2, [r7, #6]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b298      	uxth	r0, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	88ba      	ldrh	r2, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b299      	uxth	r1, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	f7ff fe94 	bl	8001fdc <BSP_LCD_DrawHLine>
    }

    if (curx > 0)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d021      	beq.n	80022fe <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	b298      	uxth	r0, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	88ba      	ldrh	r2, [r7, #4]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b299      	uxth	r1, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	f7ff fe80 	bl	8001fdc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	b298      	uxth	r0, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	b299      	uxth	r1, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	f7ff fe6f 	bl	8001fdc <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da06      	bge.n	8002312 <BSP_LCD_FillCircle+0xe6>
    {
      d += (curx << 2) + 6;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	009a      	lsls	r2, r3, #2
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	4413      	add	r3, r2
 800230c:	3306      	adds	r3, #6
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e00a      	b.n	8002328 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4413      	add	r3, r2
 800231e:	330a      	adds	r3, #10
 8002320:	617b      	str	r3, [r7, #20]
      cury--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3b01      	subs	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	3301      	adds	r3, #1
 800232c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	d999      	bls.n	800226a <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <BSP_LCD_FillCircle+0x138>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	490b      	ldr	r1, [pc, #44]	; (8002368 <BSP_LCD_FillCircle+0x13c>)
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fca3 	bl	8001c94 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	88b9      	ldrh	r1, [r7, #4]
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe7f 	bl	8002058 <BSP_LCD_DrawCircle>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200003fc 	.word	0x200003fc
 8002368:	20000400 	.word	0x20000400

0800236c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <BSP_LCD_DisplayOn+0x1c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800237a:	4b03      	ldr	r3, [pc, #12]	; (8002388 <BSP_LCD_DisplayOn+0x1c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4798      	blx	r3
  }
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000418 	.word	0x20000418

0800238c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	4b61      	ldr	r3, [pc, #388]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a60      	ldr	r2, [pc, #384]	; (800251c <BSP_LCD_MspInit+0x190>)
 800239c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b5e      	ldr	r3, [pc, #376]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	4b5a      	ldr	r3, [pc, #360]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a59      	ldr	r2, [pc, #356]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b57      	ldr	r3, [pc, #348]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	4b53      	ldr	r3, [pc, #332]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a52      	ldr	r2, [pc, #328]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	4b4c      	ldr	r3, [pc, #304]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a4b      	ldr	r2, [pc, #300]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b49      	ldr	r3, [pc, #292]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b45      	ldr	r3, [pc, #276]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a44      	ldr	r2, [pc, #272]	; (800251c <BSP_LCD_MspInit+0x190>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b42      	ldr	r3, [pc, #264]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a3d      	ldr	r2, [pc, #244]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a36      	ldr	r2, [pc, #216]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002444:	f043 0320 	orr.w	r3, r3, #32
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <BSP_LCD_MspInit+0x190>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <BSP_LCD_MspInit+0x190>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a2f      	ldr	r2, [pc, #188]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002472:	f641 0358 	movw	r3, #6232	; 0x1858
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002480:	2302      	movs	r3, #2
 8002482:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8002484:	230e      	movs	r3, #14
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248c:	4619      	mov	r1, r3
 800248e:	4824      	ldr	r0, [pc, #144]	; (8002520 <BSP_LCD_MspInit+0x194>)
 8002490:	f001 f8d0 	bl	8003634 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002494:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	4619      	mov	r1, r3
 80024a0:	4820      	ldr	r0, [pc, #128]	; (8002524 <BSP_LCD_MspInit+0x198>)
 80024a2:	f001 f8c7 	bl	8003634 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80024a6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	481d      	ldr	r0, [pc, #116]	; (8002528 <BSP_LCD_MspInit+0x19c>)
 80024b4:	f001 f8be 	bl	8003634 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80024b8:	2348      	movs	r3, #72	; 0x48
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80024bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c0:	4619      	mov	r1, r3
 80024c2:	481a      	ldr	r0, [pc, #104]	; (800252c <BSP_LCD_MspInit+0x1a0>)
 80024c4:	f001 f8b6 	bl	8003634 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80024c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	4816      	ldr	r0, [pc, #88]	; (8002530 <BSP_LCD_MspInit+0x1a4>)
 80024d6:	f001 f8ad 	bl	8003634 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80024da:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80024e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e4:	4619      	mov	r1, r3
 80024e6:	4813      	ldr	r0, [pc, #76]	; (8002534 <BSP_LCD_MspInit+0x1a8>)
 80024e8:	f001 f8a4 	bl	8003634 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80024ec:	2303      	movs	r3, #3
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80024f0:	2309      	movs	r3, #9
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80024f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f8:	4619      	mov	r1, r3
 80024fa:	480a      	ldr	r0, [pc, #40]	; (8002524 <BSP_LCD_MspInit+0x198>)
 80024fc:	f001 f89a 	bl	8003634 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002500:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <BSP_LCD_MspInit+0x1a8>)
 800250e:	f001 f891 	bl	8003634 <HAL_GPIO_Init>
}
 8002512:	bf00      	nop
 8002514:	3738      	adds	r7, #56	; 0x38
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021400 	.word	0x40021400
 8002534:	40021800 	.word	0x40021800

08002538 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	603a      	str	r2, [r7, #0]
 8002542:	80fb      	strh	r3, [r7, #6]
 8002544:	460b      	mov	r3, r1
 8002546:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <BSP_LCD_DrawPixel+0x44>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <BSP_LCD_DrawPixel+0x48>)
 800254e:	2134      	movs	r1, #52	; 0x34
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	335c      	adds	r3, #92	; 0x5c
 8002558:	681c      	ldr	r4, [r3, #0]
 800255a:	88bd      	ldrh	r5, [r7, #4]
 800255c:	f7ff fb0e 	bl	8001b7c <BSP_LCD_GetXSize>
 8002560:	4603      	mov	r3, r0
 8002562:	fb03 f205 	mul.w	r2, r3, r5
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4423      	add	r3, r4
 800256e:	461a      	mov	r2, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bdb0      	pop	{r4, r5, r7, pc}
 800257c:	200003fc 	.word	0x200003fc
 8002580:	200002e4 	.word	0x200002e4

08002584 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	603a      	str	r2, [r7, #0]
 800258e:	80fb      	strh	r3, [r7, #6]
 8002590:	460b      	mov	r3, r1
 8002592:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <DrawChar+0x16c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4953      	ldr	r1, [pc, #332]	; (80026f4 <DrawChar+0x170>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	3308      	adds	r3, #8
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	88db      	ldrh	r3, [r3, #6]
 80025b6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80025b8:	4b4d      	ldr	r3, [pc, #308]	; (80026f0 <DrawChar+0x16c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	494d      	ldr	r1, [pc, #308]	; (80026f4 <DrawChar+0x170>)
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	3308      	adds	r3, #8
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	889b      	ldrh	r3, [r3, #4]
 80025ce:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80025d0:	8a3b      	ldrh	r3, [r7, #16]
 80025d2:	3307      	adds	r3, #7
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	da00      	bge.n	80025da <DrawChar+0x56>
 80025d8:	3307      	adds	r3, #7
 80025da:	10db      	asrs	r3, r3, #3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	8a3b      	ldrh	r3, [r7, #16]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e076      	b.n	80026de <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80025f0:	8a3b      	ldrh	r3, [r7, #16]
 80025f2:	3307      	adds	r3, #7
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da00      	bge.n	80025fa <DrawChar+0x76>
 80025f8:	3307      	adds	r3, #7
 80025fa:	10db      	asrs	r3, r3, #3
 80025fc:	461a      	mov	r2, r3
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4413      	add	r3, r2
 8002608:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800260a:	8a3b      	ldrh	r3, [r7, #16]
 800260c:	3307      	adds	r3, #7
 800260e:	2b00      	cmp	r3, #0
 8002610:	da00      	bge.n	8002614 <DrawChar+0x90>
 8002612:	3307      	adds	r3, #7
 8002614:	10db      	asrs	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d002      	beq.n	8002620 <DrawChar+0x9c>
 800261a:	2b02      	cmp	r3, #2
 800261c:	d004      	beq.n	8002628 <DrawChar+0xa4>
 800261e:	e00c      	b.n	800263a <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	617b      	str	r3, [r7, #20]
        break;
 8002626:	e016      	b.n	8002656 <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	3201      	adds	r2, #1
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
        break;
 8002638:	e00d      	b.n	8002656 <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	041a      	lsls	r2, r3, #16
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3301      	adds	r3, #1
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	4313      	orrs	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	3202      	adds	r2, #2
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
        break;
 8002654:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e036      	b.n	80026ca <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 800265c:	8a3a      	ldrh	r2, [r7, #16]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	1ad2      	subs	r2, r2, r3
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	4413      	add	r3, r2
 8002666:	3b01      	subs	r3, #1
 8002668:	2201      	movs	r2, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	461a      	mov	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	b29a      	uxth	r2, r3
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	4413      	add	r3, r2
 8002680:	b298      	uxth	r0, r3
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <DrawChar+0x16c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	491b      	ldr	r1, [pc, #108]	; (80026f4 <DrawChar+0x170>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	88bb      	ldrh	r3, [r7, #4]
 8002696:	4619      	mov	r1, r3
 8002698:	f7ff ff4e 	bl	8002538 <BSP_LCD_DrawPixel>
 800269c:	e012      	b.n	80026c4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	4413      	add	r3, r2
 80026a6:	b298      	uxth	r0, r3
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <DrawChar+0x16c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4911      	ldr	r1, [pc, #68]	; (80026f4 <DrawChar+0x170>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	3304      	adds	r3, #4
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	88bb      	ldrh	r3, [r7, #4]
 80026be:	4619      	mov	r1, r3
 80026c0:	f7ff ff3a 	bl	8002538 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	8a3b      	ldrh	r3, [r7, #16]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3c4      	bcc.n	800265c <DrawChar+0xd8>
      }
    }
    Ypos++;
 80026d2:	88bb      	ldrh	r3, [r7, #4]
 80026d4:	3301      	adds	r3, #1
 80026d6:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3301      	adds	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	8a7b      	ldrh	r3, [r7, #18]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d384      	bcc.n	80025f0 <DrawChar+0x6c>
  }
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200003fc 	.word	0x200003fc
 80026f4:	20000400 	.word	0x20000400

080026f8 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <FillBuffer+0x68>)
 8002708:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800270c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <FillBuffer+0x68>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <FillBuffer+0x68>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <FillBuffer+0x68>)
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <FillBuffer+0x6c>)
 800271e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8002720:	480f      	ldr	r0, [pc, #60]	; (8002760 <FillBuffer+0x68>)
 8002722:	f000 fcf1 	bl	8003108 <HAL_DMA2D_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d115      	bne.n	8002758 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 800272c:	68f9      	ldr	r1, [r7, #12]
 800272e:	480c      	ldr	r0, [pc, #48]	; (8002760 <FillBuffer+0x68>)
 8002730:	f000 fe52 	bl	80033d8 <HAL_DMA2D_ConfigLayer>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10e      	bne.n	8002758 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69f9      	ldr	r1, [r7, #28]
 8002744:	4806      	ldr	r0, [pc, #24]	; (8002760 <FillBuffer+0x68>)
 8002746:	f000 fd32 	bl	80031ae <HAL_DMA2D_Start>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002750:	210a      	movs	r1, #10
 8002752:	4803      	ldr	r0, [pc, #12]	; (8002760 <FillBuffer+0x68>)
 8002754:	f000 fd56 	bl	8003204 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2000038c 	.word	0x2000038c
 8002764:	4002b000 	.word	0x4002b000

08002768 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <BSP_SDRAM_Init+0xac>)
 800276e:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <BSP_SDRAM_Init+0xb0>)
 8002770:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002774:	2202      	movs	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <BSP_SDRAM_Init+0xb4>)
 800277a:	2207      	movs	r2, #7
 800277c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002780:	2204      	movs	r2, #4
 8002782:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002786:	2207      	movs	r2, #7
 8002788:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <BSP_SDRAM_Init+0xb4>)
 800278c:	2202      	movs	r2, #2
 800278e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002792:	2202      	movs	r2, #2
 8002794:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002798:	2202      	movs	r2, #2
 800279a:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <BSP_SDRAM_Init+0xac>)
 800279e:	2201      	movs	r2, #1
 80027a0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027aa:	2204      	movs	r2, #4
 80027ac:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027b0:	2210      	movs	r2, #16
 80027b2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80027c0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ce:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80027de:	2100      	movs	r1, #0
 80027e0:	480c      	ldr	r0, [pc, #48]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027e2:	f000 f87f 	bl	80028e4 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <BSP_SDRAM_Init+0xb4>)
 80027e8:	480a      	ldr	r0, [pc, #40]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027ea:	f003 fc89 	bl	8006100 <HAL_SDRAM_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <BSP_SDRAM_Init+0xb8>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e002      	b.n	8002802 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <BSP_SDRAM_Init+0xb8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002802:	f240 506a 	movw	r0, #1386	; 0x56a
 8002806:	f000 f80d 	bl	8002824 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <BSP_SDRAM_Init+0xb8>)
 800280c:	781b      	ldrb	r3, [r3, #0]
}
 800280e:	4618      	mov	r0, r3
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000041c 	.word	0x2000041c
 8002818:	a0000140 	.word	0xa0000140
 800281c:	20000450 	.word	0x20000450
 8002820:	20000088 	.word	0x20000088

08002824 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002836:	4b29      	ldr	r3, [pc, #164]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002838:	2208      	movs	r2, #8
 800283a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800283e:	2201      	movs	r2, #1
 8002840:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800284c:	4923      	ldr	r1, [pc, #140]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800284e:	4824      	ldr	r0, [pc, #144]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002850:	f003 fc94 	bl	800617c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002854:	2001      	movs	r0, #1
 8002856:	f000 f993 	bl	8002b80 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800285c:	2202      	movs	r2, #2
 800285e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002860:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002862:	2208      	movs	r2, #8
 8002864:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002868:	2201      	movs	r2, #1
 800286a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002876:	4919      	ldr	r1, [pc, #100]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002878:	4819      	ldr	r0, [pc, #100]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800287a:	f003 fc7f 	bl	800617c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002880:	2203      	movs	r2, #3
 8002882:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002886:	2208      	movs	r2, #8
 8002888:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800288c:	2204      	movs	r2, #4
 800288e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800289a:	4910      	ldr	r1, [pc, #64]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800289c:	4810      	ldr	r0, [pc, #64]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800289e:	f003 fc6d 	bl	800617c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80028a2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80028a6:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028aa:	2204      	movs	r2, #4
 80028ac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028b0:	2208      	movs	r2, #8
 80028b2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a07      	ldr	r2, [pc, #28]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028be:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80028c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c4:	4905      	ldr	r1, [pc, #20]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028c6:	4806      	ldr	r0, [pc, #24]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028c8:	f003 fc58 	bl	800617c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4804      	ldr	r0, [pc, #16]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028d0:	f003 fc89 	bl	80061e6 <HAL_SDRAM_ProgramRefreshRate>
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	2000046c 	.word	0x2000046c
 80028e0:	2000041c 	.word	0x2000041c

080028e4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b090      	sub	sp, #64	; 0x40
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80ec 	beq.w	8002ace <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fa:	4b77      	ldr	r3, [pc, #476]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	4a76      	ldr	r2, [pc, #472]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6393      	str	r3, [r2, #56]	; 0x38
 8002906:	4b74      	ldr	r3, [pc, #464]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 800291c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a61      	ldr	r2, [pc, #388]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b5f      	ldr	r3, [pc, #380]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a5a      	ldr	r2, [pc, #360]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b58      	ldr	r3, [pc, #352]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	4b54      	ldr	r3, [pc, #336]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a53      	ldr	r2, [pc, #332]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 800298c:	f043 0310 	orr.w	r3, r3, #16
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a4c      	ldr	r2, [pc, #304]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029a8:	f043 0320 	orr.w	r3, r3, #32
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b46      	ldr	r3, [pc, #280]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a45      	ldr	r2, [pc, #276]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80029da:	2302      	movs	r3, #2
 80029dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80029e2:	230c      	movs	r3, #12
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80029e6:	2360      	movs	r3, #96	; 0x60
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ee:	4619      	mov	r1, r3
 80029f0:	483a      	ldr	r0, [pc, #232]	; (8002adc <BSP_SDRAM_MspInit+0x1f8>)
 80029f2:	f000 fe1f 	bl	8003634 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 80029f6:	2301      	movs	r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80029fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029fe:	4619      	mov	r1, r3
 8002a00:	4837      	ldr	r0, [pc, #220]	; (8002ae0 <BSP_SDRAM_MspInit+0x1fc>)
 8002a02:	f000 fe17 	bl	8003634 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002a06:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a10:	4619      	mov	r1, r3
 8002a12:	4834      	ldr	r0, [pc, #208]	; (8002ae4 <BSP_SDRAM_MspInit+0x200>)
 8002a14:	f000 fe0e 	bl	8003634 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002a18:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a22:	4619      	mov	r1, r3
 8002a24:	4830      	ldr	r0, [pc, #192]	; (8002ae8 <BSP_SDRAM_MspInit+0x204>)
 8002a26:	f000 fe05 	bl	8003634 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002a2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a34:	4619      	mov	r1, r3
 8002a36:	482d      	ldr	r0, [pc, #180]	; (8002aec <BSP_SDRAM_MspInit+0x208>)
 8002a38:	f000 fdfc 	bl	8003634 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002a3c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a46:	4619      	mov	r1, r3
 8002a48:	4829      	ldr	r0, [pc, #164]	; (8002af0 <BSP_SDRAM_MspInit+0x20c>)
 8002a4a:	f000 fdf3 	bl	8003634 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002a4e:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002a54:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a60:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a68:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a70:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a78:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a86:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a90:	2203      	movs	r2, #3
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <BSP_SDRAM_MspInit+0x214>)
 8002aa4:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002aac:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002ab2:	4810      	ldr	r0, [pc, #64]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002ab4:	f000 fa18 	bl	8002ee8 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002ab8:	480e      	ldr	r0, [pc, #56]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002aba:	f000 f967 	bl	8002d8c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	210f      	movs	r1, #15
 8002ac2:	2038      	movs	r0, #56	; 0x38
 8002ac4:	f000 f938 	bl	8002d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002ac8:	2038      	movs	r0, #56	; 0x38
 8002aca:	f000 f951 	bl	8002d70 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002ace:	bf00      	nop
 8002ad0:	3740      	adds	r7, #64	; 0x40
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020400 	.word	0x40020400
 8002ae0:	40020800 	.word	0x40020800
 8002ae4:	40020c00 	.word	0x40020c00
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40021400 	.word	0x40021400
 8002af0:	40021800 	.word	0x40021800
 8002af4:	2000047c 	.word	0x2000047c
 8002af8:	40026410 	.word	0x40026410

08002afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_Init+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <HAL_Init+0x40>)
 8002b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_Init+0x40>)
 8002b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <HAL_Init+0x40>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <HAL_Init+0x40>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b24:	2003      	movs	r0, #3
 8002b26:	f000 f8fc 	bl	8002d22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b2a:	200f      	movs	r0, #15
 8002b2c:	f7fe f816 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b30:	f7fd ffe8 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00

08002b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_IncTick+0x20>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_IncTick+0x24>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_IncTick+0x24>)
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000090 	.word	0x20000090
 8002b64:	200004dc 	.word	0x200004dc

08002b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_GetTick+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200004dc 	.word	0x200004dc

08002b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b88:	f7ff ffee 	bl	8002b68 <HAL_GetTick>
 8002b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d005      	beq.n	8002ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_Delay+0x44>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ba6:	bf00      	nop
 8002ba8:	f7ff ffde 	bl	8002b68 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d8f7      	bhi.n	8002ba8 <HAL_Delay+0x28>
  {
  }
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000090 	.word	0x20000090

08002bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <__NVIC_SetPriorityGrouping+0x44>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be4:	4013      	ands	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfa:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	60d3      	str	r3, [r2, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <__NVIC_GetPriorityGrouping+0x18>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	f003 0307 	and.w	r3, r3, #7
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db0b      	blt.n	8002c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	4907      	ldr	r1, [pc, #28]	; (8002c64 <__NVIC_EnableIRQ+0x38>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db0a      	blt.n	8002c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	490c      	ldr	r1, [pc, #48]	; (8002cb4 <__NVIC_SetPriority+0x4c>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c90:	e00a      	b.n	8002ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <__NVIC_SetPriority+0x50>)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	3b04      	subs	r3, #4
 8002ca0:	0112      	lsls	r2, r2, #4
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	761a      	strb	r2, [r3, #24]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000e100 	.word	0xe000e100
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f1c3 0307 	rsb	r3, r3, #7
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	bf28      	it	cs
 8002cda:	2304      	movcs	r3, #4
 8002cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d902      	bls.n	8002cec <NVIC_EncodePriority+0x30>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3b03      	subs	r3, #3
 8002cea:	e000      	b.n	8002cee <NVIC_EncodePriority+0x32>
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	401a      	ands	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43d9      	mvns	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	4313      	orrs	r3, r2
         );
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ff4c 	bl	8002bc8 <__NVIC_SetPriorityGrouping>
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4a:	f7ff ff61 	bl	8002c10 <__NVIC_GetPriorityGrouping>
 8002d4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	6978      	ldr	r0, [r7, #20]
 8002d56:	f7ff ffb1 	bl	8002cbc <NVIC_EncodePriority>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff80 	bl	8002c68 <__NVIC_SetPriority>
}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff54 	bl	8002c2c <__NVIC_EnableIRQ>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff fee6 	bl	8002b68 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e099      	b.n	8002edc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc8:	e00f      	b.n	8002dea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dca:	f7ff fecd 	bl	8002b68 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d908      	bls.n	8002dea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2203      	movs	r2, #3
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e078      	b.n	8002edc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e8      	bne.n	8002dca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <HAL_DMA_Init+0x158>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d107      	bne.n	8002e54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f023 0307 	bic.w	r3, r3, #7
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d117      	bne.n	8002eae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f8bd 	bl	8003010 <DMA_CheckFifoParam>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2240      	movs	r2, #64	; 0x40
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e016      	b.n	8002edc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f874 	bl	8002fa4 <DMA_CalcBaseAndBitshift>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	223f      	movs	r2, #63	; 0x3f
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	f010803f 	.word	0xf010803f

08002ee8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e050      	b.n	8002f9c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d101      	bne.n	8002f0a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	e048      	b.n	8002f9c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2221      	movs	r2, #33	; 0x21
 8002f48:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f82a 	bl	8002fa4 <DMA_CalcBaseAndBitshift>
 8002f50:	4603      	mov	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	223f      	movs	r2, #63	; 0x3f
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	3b10      	subs	r3, #16
 8002fb4:	4a14      	ldr	r2, [pc, #80]	; (8003008 <DMA_CalcBaseAndBitshift+0x64>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fbe:	4a13      	ldr	r2, [pc, #76]	; (800300c <DMA_CalcBaseAndBitshift+0x68>)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d909      	bls.n	8002fe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fda:	f023 0303 	bic.w	r3, r3, #3
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	659a      	str	r2, [r3, #88]	; 0x58
 8002fe4:	e007      	b.n	8002ff6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	aaaaaaab 	.word	0xaaaaaaab
 800300c:	08010b94 	.word	0x08010b94

08003010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d11f      	bne.n	800306a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d856      	bhi.n	80030de <DMA_CheckFifoParam+0xce>
 8003030:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <DMA_CheckFifoParam+0x28>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	08003049 	.word	0x08003049
 800303c:	0800305b 	.word	0x0800305b
 8003040:	08003049 	.word	0x08003049
 8003044:	080030df 	.word	0x080030df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d046      	beq.n	80030e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003058:	e043      	b.n	80030e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003062:	d140      	bne.n	80030e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003068:	e03d      	b.n	80030e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003072:	d121      	bne.n	80030b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d837      	bhi.n	80030ea <DMA_CheckFifoParam+0xda>
 800307a:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <DMA_CheckFifoParam+0x70>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	08003091 	.word	0x08003091
 8003084:	08003097 	.word	0x08003097
 8003088:	08003091 	.word	0x08003091
 800308c:	080030a9 	.word	0x080030a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      break;
 8003094:	e030      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d025      	beq.n	80030ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a6:	e022      	b.n	80030ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b0:	d11f      	bne.n	80030f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030b6:	e01c      	b.n	80030f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d903      	bls.n	80030c6 <DMA_CheckFifoParam+0xb6>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d003      	beq.n	80030cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030c4:	e018      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
      break;
 80030ca:	e015      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e00b      	b.n	80030f6 <DMA_CheckFifoParam+0xe6>
      break;
 80030de:	bf00      	nop
 80030e0:	e00a      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030e2:	bf00      	nop
 80030e4:	e008      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030e6:	bf00      	nop
 80030e8:	e006      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
 80030ec:	e004      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
    }
  } 
  
  return status; 
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop

08003108 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e03b      	b.n	8003192 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f833 	bl	800319a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	f023 0107 	bic.w	r1, r3, #7
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003172:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68d1      	ldr	r1, [r2, #12]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	430b      	orrs	r3, r1
 8003180:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af02      	add	r7, sp, #8
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_DMA2D_Start+0x1c>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e018      	b.n	80031fc <HAL_DMA2D_Start+0x4e>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f989 	bl	80034fc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0201 	orr.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d056      	beq.n	80032ce <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003220:	f7ff fca2 	bl	8002b68 <HAL_GetTick>
 8003224:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003226:	e04b      	b.n	80032c0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003236:	2b00      	cmp	r3, #0
 8003238:	d023      	beq.n	8003282 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	f043 0202 	orr.w	r2, r3, #2
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	f043 0201 	orr.w	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2221      	movs	r2, #33	; 0x21
 800326c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2204      	movs	r2, #4
 8003272:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0a5      	b.n	80033ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d01a      	beq.n	80032c0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7ff fc6d 	bl	8002b68 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <HAL_DMA2D_PollForTransfer+0x9c>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10f      	bne.n	80032c0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2203      	movs	r2, #3
 80032b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e086      	b.n	80033ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ac      	beq.n	8003228 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d061      	beq.n	80033b4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80032f0:	f7ff fc3a 	bl	8002b68 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80032f6:	e056      	b.n	80033a6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02e      	beq.n	8003368 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2229      	movs	r2, #41	; 0x29
 8003352:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2204      	movs	r2, #4
 8003358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e032      	b.n	80033ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d01a      	beq.n	80033a6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7ff fbfa 	bl	8002b68 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <HAL_DMA2D_PollForTransfer+0x182>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e013      	b.n	80033ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0a1      	beq.n	80032f8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2212      	movs	r2, #18
 80033ba:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_DMA2D_ConfigLayer+0x20>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e079      	b.n	80034ec <HAL_DMA2D_ConfigLayer+0x114>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	3318      	adds	r3, #24
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_DMA2D_ConfigLayer+0x120>)
 8003424:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b0a      	cmp	r3, #10
 800342c:	d003      	beq.n	8003436 <HAL_DMA2D_ConfigLayer+0x5e>
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b09      	cmp	r3, #9
 8003434:	d107      	bne.n	8003446 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e005      	b.n	8003452 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	061b      	lsls	r3, r3, #24
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d120      	bne.n	800349a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	43db      	mvns	r3, r3
 8003462:	ea02 0103 	and.w	r1, r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	430a      	orrs	r2, r1
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b0a      	cmp	r3, #10
 8003480:	d003      	beq.n	800348a <HAL_DMA2D_ConfigLayer+0xb2>
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b09      	cmp	r3, #9
 8003488:	d127      	bne.n	80034da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
 8003498:	e01f      	b.n	80034da <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	ea02 0103 	and.w	r1, r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b0a      	cmp	r3, #10
 80034c2:	d003      	beq.n	80034cc <HAL_DMA2D_ConfigLayer+0xf4>
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b09      	cmp	r3, #9
 80034ca:	d106      	bne.n	80034da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80034d8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	ff03000f 	.word	0xff03000f

080034fc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b08b      	sub	sp, #44	; 0x2c
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	041a      	lsls	r2, r3, #16
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	431a      	orrs	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003534:	d174      	bne.n	8003620 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800353c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003544:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800354c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	431a      	orrs	r2, r3
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	4313      	orrs	r3, r2
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
 800356c:	e053      	b.n	8003616 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d106      	bne.n	8003584 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	4313      	orrs	r3, r2
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	e048      	b.n	8003616 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d111      	bne.n	80035b0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	0cdb      	lsrs	r3, r3, #19
 8003590:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	0a9b      	lsrs	r3, r3, #10
 8003596:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	08db      	lsrs	r3, r3, #3
 800359c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	02db      	lsls	r3, r3, #11
 80035a6:	4313      	orrs	r3, r2
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	e032      	b.n	8003616 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d117      	bne.n	80035e8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	0fdb      	lsrs	r3, r3, #31
 80035bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	0cdb      	lsrs	r3, r3, #19
 80035c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	0adb      	lsrs	r3, r3, #11
 80035c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	029b      	lsls	r3, r3, #10
 80035d8:	431a      	orrs	r2, r3
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	03db      	lsls	r3, r3, #15
 80035de:	4313      	orrs	r3, r2
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	e016      	b.n	8003616 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	0f1b      	lsrs	r3, r3, #28
 80035ec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	0d1b      	lsrs	r3, r3, #20
 80035f2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	0b1b      	lsrs	r3, r3, #12
 80035f8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	011a      	lsls	r2, r3, #4
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	431a      	orrs	r2, r3
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	031b      	lsls	r3, r3, #12
 800360e:	4313      	orrs	r3, r2
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800361e:	e003      	b.n	8003628 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	60da      	str	r2, [r3, #12]
}
 8003628:	bf00      	nop
 800362a:	372c      	adds	r7, #44	; 0x2c
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e177      	b.n	8003940 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003650:	2201      	movs	r2, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	f040 8166 	bne.w	800393a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d005      	beq.n	8003686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003682:	2b02      	cmp	r3, #2
 8003684:	d130      	bne.n	80036e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036bc:	2201      	movs	r2, #1
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 0201 	and.w	r2, r3, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d017      	beq.n	8003724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d123      	bne.n	8003778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	08da      	lsrs	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3208      	adds	r2, #8
 8003738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	220f      	movs	r2, #15
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	08da      	lsrs	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3208      	adds	r2, #8
 8003772:	69b9      	ldr	r1, [r7, #24]
 8003774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0203 	and.w	r2, r3, #3
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80c0 	beq.w	800393a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b66      	ldr	r3, [pc, #408]	; (8003958 <HAL_GPIO_Init+0x324>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	4a65      	ldr	r2, [pc, #404]	; (8003958 <HAL_GPIO_Init+0x324>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	4b63      	ldr	r3, [pc, #396]	; (8003958 <HAL_GPIO_Init+0x324>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037d6:	4a61      	ldr	r2, [pc, #388]	; (800395c <HAL_GPIO_Init+0x328>)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a58      	ldr	r2, [pc, #352]	; (8003960 <HAL_GPIO_Init+0x32c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d037      	beq.n	8003872 <HAL_GPIO_Init+0x23e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_GPIO_Init+0x330>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d031      	beq.n	800386e <HAL_GPIO_Init+0x23a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a56      	ldr	r2, [pc, #344]	; (8003968 <HAL_GPIO_Init+0x334>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02b      	beq.n	800386a <HAL_GPIO_Init+0x236>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a55      	ldr	r2, [pc, #340]	; (800396c <HAL_GPIO_Init+0x338>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d025      	beq.n	8003866 <HAL_GPIO_Init+0x232>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a54      	ldr	r2, [pc, #336]	; (8003970 <HAL_GPIO_Init+0x33c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01f      	beq.n	8003862 <HAL_GPIO_Init+0x22e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a53      	ldr	r2, [pc, #332]	; (8003974 <HAL_GPIO_Init+0x340>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d019      	beq.n	800385e <HAL_GPIO_Init+0x22a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_GPIO_Init+0x344>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_GPIO_Init+0x226>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a51      	ldr	r2, [pc, #324]	; (800397c <HAL_GPIO_Init+0x348>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00d      	beq.n	8003856 <HAL_GPIO_Init+0x222>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a50      	ldr	r2, [pc, #320]	; (8003980 <HAL_GPIO_Init+0x34c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <HAL_GPIO_Init+0x21e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4f      	ldr	r2, [pc, #316]	; (8003984 <HAL_GPIO_Init+0x350>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_GPIO_Init+0x21a>
 800384a:	2309      	movs	r3, #9
 800384c:	e012      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800384e:	230a      	movs	r3, #10
 8003850:	e010      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003852:	2308      	movs	r3, #8
 8003854:	e00e      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003856:	2307      	movs	r3, #7
 8003858:	e00c      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800385a:	2306      	movs	r3, #6
 800385c:	e00a      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800385e:	2305      	movs	r3, #5
 8003860:	e008      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003862:	2304      	movs	r3, #4
 8003864:	e006      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003866:	2303      	movs	r3, #3
 8003868:	e004      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800386a:	2302      	movs	r3, #2
 800386c:	e002      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003872:	2300      	movs	r3, #0
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	f002 0203 	and.w	r2, r2, #3
 800387a:	0092      	lsls	r2, r2, #2
 800387c:	4093      	lsls	r3, r2
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003884:	4935      	ldr	r1, [pc, #212]	; (800395c <HAL_GPIO_Init+0x328>)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	3302      	adds	r3, #2
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003892:	4b3d      	ldr	r3, [pc, #244]	; (8003988 <HAL_GPIO_Init+0x354>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038b6:	4a34      	ldr	r2, [pc, #208]	; (8003988 <HAL_GPIO_Init+0x354>)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038bc:	4b32      	ldr	r3, [pc, #200]	; (8003988 <HAL_GPIO_Init+0x354>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e0:	4a29      	ldr	r2, [pc, #164]	; (8003988 <HAL_GPIO_Init+0x354>)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038e6:	4b28      	ldr	r3, [pc, #160]	; (8003988 <HAL_GPIO_Init+0x354>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800390a:	4a1f      	ldr	r2, [pc, #124]	; (8003988 <HAL_GPIO_Init+0x354>)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_GPIO_Init+0x354>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <HAL_GPIO_Init+0x354>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3301      	adds	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b0f      	cmp	r3, #15
 8003944:	f67f ae84 	bls.w	8003650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	3724      	adds	r7, #36	; 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	40013800 	.word	0x40013800
 8003960:	40020000 	.word	0x40020000
 8003964:	40020400 	.word	0x40020400
 8003968:	40020800 	.word	0x40020800
 800396c:	40020c00 	.word	0x40020c00
 8003970:	40021000 	.word	0x40021000
 8003974:	40021400 	.word	0x40021400
 8003978:	40021800 	.word	0x40021800
 800397c:	40021c00 	.word	0x40021c00
 8003980:	40022000 	.word	0x40022000
 8003984:	40022400 	.word	0x40022400
 8003988:	40013c00 	.word	0x40013c00

0800398c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
 8003998:	4613      	mov	r3, r2
 800399a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800399c:	787b      	ldrb	r3, [r7, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a8:	e003      	b.n	80039b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	041a      	lsls	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	619a      	str	r2, [r3, #24]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0bf      	b.n	8003b52 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f8ba 	bl	8003b60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003a02:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6999      	ldr	r1, [r3, #24]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a18:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6899      	ldr	r1, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <HAL_LTDC_Init+0x19c>)
 8003a34:	400b      	ands	r3, r1
 8003a36:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6899      	ldr	r1, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68d9      	ldr	r1, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b3e      	ldr	r3, [pc, #248]	; (8003b5c <HAL_LTDC_Init+0x19c>)
 8003a62:	400b      	ands	r3, r1
 8003a64:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68d9      	ldr	r1, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6919      	ldr	r1, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <HAL_LTDC_Init+0x19c>)
 8003a90:	400b      	ands	r3, r1
 8003a92:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6919      	ldr	r1, [r3, #16]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6959      	ldr	r1, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <HAL_LTDC_Init+0x19c>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6959      	ldr	r1, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0206 	orr.w	r2, r2, #6
 8003b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	f000f800 	.word	0xf000f800

08003b60 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b74:	b5b0      	push	{r4, r5, r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_LTDC_ConfigLayer+0x1a>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e02c      	b.n	8003be8 <HAL_LTDC_ConfigLayer+0x74>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2134      	movs	r1, #52	; 0x34
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f83b 	bl	8003c44 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bdb0      	pop	{r4, r5, r7, pc}

08003bf0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_LTDC_EnableDither+0x16>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e016      	b.n	8003c34 <HAL_LTDC_EnableDither+0x44>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_LTDC_EnableDither+0x50>)
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_LTDC_EnableDither+0x50>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40016800 	.word	0x40016800

08003c44 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	4413      	add	r3, r2
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	01db      	lsls	r3, r3, #7
 8003c70:	4413      	add	r3, r2
 8003c72:	3384      	adds	r3, #132	; 0x84
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	01d2      	lsls	r2, r2, #7
 8003c80:	440a      	add	r2, r1
 8003c82:	3284      	adds	r2, #132	; 0x84
 8003c84:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003c88:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c9a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c9c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	01db      	lsls	r3, r3, #7
 8003ca8:	440b      	add	r3, r1
 8003caa:	3384      	adds	r3, #132	; 0x84
 8003cac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003cb2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cc2:	4413      	add	r3, r2
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	01db      	lsls	r3, r3, #7
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3384      	adds	r3, #132	; 0x84
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	4611      	mov	r1, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	01d2      	lsls	r2, r2, #7
 8003ce2:	440a      	add	r2, r1
 8003ce4:	3284      	adds	r2, #132	; 0x84
 8003ce6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003cea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cfa:	4413      	add	r3, r2
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4619      	mov	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	01db      	lsls	r3, r3, #7
 8003d08:	440b      	add	r3, r1
 8003d0a:	3384      	adds	r3, #132	; 0x84
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	01db      	lsls	r3, r3, #7
 8003d1e:	4413      	add	r3, r2
 8003d20:	3384      	adds	r3, #132	; 0x84
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	01d2      	lsls	r2, r2, #7
 8003d2e:	440a      	add	r2, r1
 8003d30:	3284      	adds	r2, #132	; 0x84
 8003d32:	f023 0307 	bic.w	r3, r3, #7
 8003d36:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	01db      	lsls	r3, r3, #7
 8003d42:	4413      	add	r3, r2
 8003d44:	3384      	adds	r3, #132	; 0x84
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	01db      	lsls	r3, r3, #7
 8003d74:	4413      	add	r3, r2
 8003d76:	3384      	adds	r3, #132	; 0x84
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	01db      	lsls	r3, r3, #7
 8003d84:	4413      	add	r3, r2
 8003d86:	3384      	adds	r3, #132	; 0x84
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d94:	461a      	mov	r2, r3
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	01db      	lsls	r3, r3, #7
 8003da8:	440b      	add	r3, r1
 8003daa:	3384      	adds	r3, #132	; 0x84
 8003dac:	4619      	mov	r1, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	01db      	lsls	r3, r3, #7
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3384      	adds	r3, #132	; 0x84
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	4611      	mov	r1, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	01d2      	lsls	r2, r2, #7
 8003dce:	440a      	add	r2, r1
 8003dd0:	3284      	adds	r2, #132	; 0x84
 8003dd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dd6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	01db      	lsls	r3, r3, #7
 8003de2:	4413      	add	r3, r2
 8003de4:	3384      	adds	r3, #132	; 0x84
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	01db      	lsls	r3, r3, #7
 8003df8:	4413      	add	r3, r2
 8003dfa:	3384      	adds	r3, #132	; 0x84
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	4611      	mov	r1, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	01d2      	lsls	r2, r2, #7
 8003e08:	440a      	add	r2, r1
 8003e0a:	3284      	adds	r2, #132	; 0x84
 8003e0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e10:	f023 0307 	bic.w	r3, r3, #7
 8003e14:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	6809      	ldr	r1, [r1, #0]
 8003e22:	4608      	mov	r0, r1
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	01c9      	lsls	r1, r1, #7
 8003e28:	4401      	add	r1, r0
 8003e2a:	3184      	adds	r1, #132	; 0x84
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	01db      	lsls	r3, r3, #7
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3384      	adds	r3, #132	; 0x84
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	01db      	lsls	r3, r3, #7
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3384      	adds	r3, #132	; 0x84
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2300      	movs	r3, #0
 8003e52:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	01db      	lsls	r3, r3, #7
 8003e5e:	4413      	add	r3, r2
 8003e60:	3384      	adds	r3, #132	; 0x84
 8003e62:	461a      	mov	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003e72:	2304      	movs	r3, #4
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e01b      	b.n	8003eb0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d102      	bne.n	8003e86 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003e80:	2303      	movs	r3, #3
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	e014      	b.n	8003eb0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d00b      	beq.n	8003ea6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d007      	beq.n	8003ea6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d003      	beq.n	8003ea6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003ea2:	2b07      	cmp	r3, #7
 8003ea4:	d102      	bne.n	8003eac <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e001      	b.n	8003eb0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003eac:	2301      	movs	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	01db      	lsls	r3, r3, #7
 8003eba:	4413      	add	r3, r2
 8003ebc:	3384      	adds	r3, #132	; 0x84
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	01d2      	lsls	r2, r2, #7
 8003eca:	440a      	add	r2, r1
 8003ecc:	3284      	adds	r2, #132	; 0x84
 8003ece:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003ed2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	1acb      	subs	r3, r1, r3
 8003eea:	69f9      	ldr	r1, [r7, #28]
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	6809      	ldr	r1, [r1, #0]
 8003ef6:	4608      	mov	r0, r1
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	01c9      	lsls	r1, r1, #7
 8003efc:	4401      	add	r1, r0
 8003efe:	3184      	adds	r1, #132	; 0x84
 8003f00:	4313      	orrs	r3, r2
 8003f02:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	01db      	lsls	r3, r3, #7
 8003f0e:	4413      	add	r3, r2
 8003f10:	3384      	adds	r3, #132	; 0x84
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	01d2      	lsls	r2, r2, #7
 8003f1e:	440a      	add	r2, r1
 8003f20:	3284      	adds	r2, #132	; 0x84
 8003f22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f26:	f023 0307 	bic.w	r3, r3, #7
 8003f2a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	01db      	lsls	r3, r3, #7
 8003f36:	4413      	add	r3, r2
 8003f38:	3384      	adds	r3, #132	; 0x84
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	01db      	lsls	r3, r3, #7
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3384      	adds	r3, #132	; 0x84
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	4611      	mov	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	01d2      	lsls	r2, r2, #7
 8003f5c:	440a      	add	r2, r1
 8003f5e:	3284      	adds	r2, #132	; 0x84
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6013      	str	r3, [r2, #0]
}
 8003f66:	bf00      	nop
 8003f68:	3724      	adds	r7, #36	; 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b086      	sub	sp, #24
 8003f76:	af02      	add	r7, sp, #8
 8003f78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e101      	b.n	8004188 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f00a f824 	bl	800dfec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fb2:	d102      	bne.n	8003fba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f003 fc2d 	bl	800781e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	7c1a      	ldrb	r2, [r3, #16]
 8003fcc:	f88d 2000 	strb.w	r2, [sp]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fd4:	f003 fb0c 	bl	80075f0 <USB_CoreInit>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0ce      	b.n	8004188 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 fc25 	bl	8007840 <USB_SetCurrentMode>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0bf      	b.n	8004188 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e04a      	b.n	80040a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3315      	adds	r3, #21
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004022:	7bfa      	ldrb	r2, [r7, #15]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	3314      	adds	r3, #20
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	b298      	uxth	r0, r3
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	332e      	adds	r3, #46	; 0x2e
 800404a:	4602      	mov	r2, r0
 800404c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	3318      	adds	r3, #24
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	331c      	adds	r3, #28
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	3320      	adds	r3, #32
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3324      	adds	r3, #36	; 0x24
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	3301      	adds	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	791b      	ldrb	r3, [r3, #4]
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d3af      	bcc.n	800400e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	e044      	b.n	800413e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040b4:	7bfa      	ldrb	r2, [r7, #15]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80040dc:	7bfa      	ldrb	r2, [r7, #15]
 80040de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	3301      	adds	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	791b      	ldrb	r3, [r3, #4]
 8004142:	7bfa      	ldrb	r2, [r7, #15]
 8004144:	429a      	cmp	r2, r3
 8004146:	d3b5      	bcc.n	80040b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7c1a      	ldrb	r2, [r3, #16]
 8004150:	f88d 2000 	strb.w	r2, [sp]
 8004154:	3304      	adds	r3, #4
 8004156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004158:	f003 fbbe 	bl	80078d8 <USB_DevInit>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2202      	movs	r2, #2
 8004166:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e00c      	b.n	8004188 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f004 fc02 	bl	800898a <USB_DevDisconnect>

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_PCD_Start+0x1c>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e022      	b.n	80041f2 <HAL_PCD_Start+0x62>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d009      	beq.n	80041d4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f003 fb0f 	bl	80077fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 fbb0 	bl	8008948 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041fa:	b590      	push	{r4, r7, lr}
 80041fc:	b08d      	sub	sp, #52	; 0x34
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f004 fc6e 	bl	8008af2 <USB_GetMode>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 848c 	bne.w	8004b36 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f004 fbd2 	bl	80089cc <USB_ReadInterrupts>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8482 	beq.w	8004b34 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f004 fbbf 	bl	80089cc <USB_ReadInterrupts>
 800424e:	4603      	mov	r3, r0
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b02      	cmp	r3, #2
 8004256:	d107      	bne.n	8004268 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f002 0202 	and.w	r2, r2, #2
 8004266:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f004 fbad 	bl	80089cc <USB_ReadInterrupts>
 8004272:	4603      	mov	r3, r0
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d161      	bne.n	8004340 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0210 	bic.w	r2, r2, #16
 800428a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	3304      	adds	r3, #4
 80042aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	0c5b      	lsrs	r3, r3, #17
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d124      	bne.n	8004302 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d035      	beq.n	8004330 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80042ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	6a38      	ldr	r0, [r7, #32]
 80042d8:	f004 f9e4 	bl	80086a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	091b      	lsrs	r3, r3, #4
 80042e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042e8:	441a      	add	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042fa:	441a      	add	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	615a      	str	r2, [r3, #20]
 8004300:	e016      	b.n	8004330 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	0c5b      	lsrs	r3, r3, #17
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	2b06      	cmp	r3, #6
 800430c:	d110      	bne.n	8004330 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004314:	2208      	movs	r2, #8
 8004316:	4619      	mov	r1, r3
 8004318:	6a38      	ldr	r0, [r7, #32]
 800431a:	f004 f9c3 	bl	80086a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800432a:	441a      	add	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0210 	orr.w	r2, r2, #16
 800433e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f004 fb41 	bl	80089cc <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004350:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004354:	f040 80a7 	bne.w	80044a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f004 fb46 	bl	80089f2 <USB_ReadDevAllOutEpInterrupt>
 8004366:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004368:	e099      	b.n	800449e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 808e 	beq.w	8004492 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f004 fb6a 	bl	8008a5a <USB_ReadDevOutEPInterrupt>
 8004386:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	461a      	mov	r2, r3
 80043a0:	2301      	movs	r3, #1
 80043a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80043a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fea2 	bl	80050f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00c      	beq.n	80043d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	461a      	mov	r2, r3
 80043c4:	2308      	movs	r3, #8
 80043c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80043c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 ff78 	bl	80052c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	461a      	mov	r2, r3
 80043e8:	2310      	movs	r3, #16
 80043ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d030      	beq.n	8004458 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	d109      	bne.n	8004416 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004414:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4413      	add	r3, r2
 8004428:	3304      	adds	r3, #4
 800442a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	78db      	ldrb	r3, [r3, #3]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d108      	bne.n	8004446 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2200      	movs	r2, #0
 8004438:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	b2db      	uxtb	r3, r3
 800443e:	4619      	mov	r1, r3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f009 fed5 	bl	800e1f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004452:	461a      	mov	r2, r3
 8004454:	2302      	movs	r3, #2
 8004456:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446e:	461a      	mov	r2, r3
 8004470:	2320      	movs	r3, #32
 8004472:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004490:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	3301      	adds	r3, #1
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f47f af62 	bne.w	800436a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f004 fa8e 	bl	80089cc <USB_ReadInterrupts>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ba:	f040 80db 	bne.w	8004674 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f004 faaf 	bl	8008a26 <USB_ReadDevAllInEpInterrupt>
 80044c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80044ce:	e0cd      	b.n	800466c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80c2 	beq.w	8004660 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 fad5 	bl	8008a96 <USB_ReadDevInEPInterrupt>
 80044ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d057      	beq.n	80045a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	43db      	mvns	r3, r3
 8004512:	69f9      	ldr	r1, [r7, #28]
 8004514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004518:	4013      	ands	r3, r2
 800451a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	461a      	mov	r2, r3
 800452a:	2301      	movs	r3, #1
 800452c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	799b      	ldrb	r3, [r3, #6]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d132      	bne.n	800459c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3320      	adds	r3, #32
 8004546:	6819      	ldr	r1, [r3, #0]
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4403      	add	r3, r0
 8004556:	331c      	adds	r3, #28
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4419      	add	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4403      	add	r3, r0
 800456a:	3320      	adds	r3, #32
 800456c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	d113      	bne.n	800459c <HAL_PCD_IRQHandler+0x3a2>
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	3324      	adds	r3, #36	; 0x24
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004594:	461a      	mov	r2, r3
 8004596:	2101      	movs	r1, #1
 8004598:	f004 fadc 	bl	8008b54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f009 fd9f 	bl	800e0e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	461a      	mov	r2, r3
 80045c0:	2308      	movs	r3, #8
 80045c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045da:	461a      	mov	r2, r3
 80045dc:	2310      	movs	r3, #16
 80045de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f6:	461a      	mov	r2, r3
 80045f8:	2340      	movs	r3, #64	; 0x40
 80045fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d023      	beq.n	800464e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004608:	6a38      	ldr	r0, [r7, #32]
 800460a:	f003 fac9 	bl	8007ba0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800460e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004610:	4613      	mov	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	3310      	adds	r3, #16
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	3304      	adds	r3, #4
 8004620:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	78db      	ldrb	r3, [r3, #3]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d108      	bne.n	800463c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2200      	movs	r2, #0
 800462e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f009 fdec 	bl	800e214 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	461a      	mov	r2, r3
 800464a:	2302      	movs	r3, #2
 800464c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fcbb 	bl	8004fd6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	3301      	adds	r3, #1
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	f47f af2e 	bne.w	80044d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f004 f9a7 	bl	80089cc <USB_ReadInterrupts>
 800467e:	4603      	mov	r3, r0
 8004680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004688:	d122      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d108      	bne.n	80046ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80046b0:	2100      	movs	r1, #0
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fea2 	bl	80053fc <HAL_PCDEx_LPM_Callback>
 80046b8:	e002      	b.n	80046c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f009 fd8a 	bl	800e1d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80046ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f004 f979 	bl	80089cc <USB_ReadInterrupts>
 80046da:	4603      	mov	r3, r0
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e4:	d112      	bne.n	800470c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d102      	bne.n	80046fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f009 fd46 	bl	800e188 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800470a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f004 f95b 	bl	80089cc <USB_ReadInterrupts>
 8004716:	4603      	mov	r3, r0
 8004718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800471c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004720:	f040 80b7 	bne.w	8004892 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2110      	movs	r1, #16
 800473e:	4618      	mov	r0, r3
 8004740:	f003 fa2e 	bl	8007ba0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004744:	2300      	movs	r3, #0
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004748:	e046      	b.n	80047d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004756:	461a      	mov	r2, r3
 8004758:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800475c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004778:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800477c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	461a      	mov	r2, r3
 800478c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004790:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c2:	0151      	lsls	r1, r2, #5
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	440a      	add	r2, r1
 80047c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	3301      	adds	r3, #1
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	791b      	ldrb	r3, [r3, #4]
 80047dc:	461a      	mov	r2, r3
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d3b2      	bcc.n	800474a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	7bdb      	ldrb	r3, [r3, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d016      	beq.n	800482e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004810:	f043 030b 	orr.w	r3, r3, #11
 8004814:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004826:	f043 030b 	orr.w	r3, r3, #11
 800482a:	6453      	str	r3, [r2, #68]	; 0x44
 800482c:	e015      	b.n	800485a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004840:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004844:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004854:	f043 030b 	orr.w	r3, r3, #11
 8004858:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004868:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800486c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800487c:	461a      	mov	r2, r3
 800487e:	f004 f969 	bl	8008b54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f004 f898 	bl	80089cc <USB_ReadInterrupts>
 800489c:	4603      	mov	r3, r0
 800489e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a6:	d123      	bne.n	80048f0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f004 f92e 	bl	8008b0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f003 f9eb 	bl	8007c92 <USB_GetDevSpeed>
 80048bc:	4603      	mov	r3, r0
 80048be:	461a      	mov	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681c      	ldr	r4, [r3, #0]
 80048c8:	f001 fa08 	bl	8005cdc <HAL_RCC_GetHCLKFreq>
 80048cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048d2:	461a      	mov	r2, r3
 80048d4:	4620      	mov	r0, r4
 80048d6:	f002 feef 	bl	80076b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f009 fc2b 	bl	800e136 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695a      	ldr	r2, [r3, #20]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f004 f869 	bl	80089cc <USB_ReadInterrupts>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d10a      	bne.n	800491a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f009 fc08 	bl	800e11a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f002 0208 	and.w	r2, r2, #8
 8004918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f004 f854 	bl	80089cc <USB_ReadInterrupts>
 8004924:	4603      	mov	r3, r0
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	2b80      	cmp	r3, #128	; 0x80
 800492c:	d123      	bne.n	8004976 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800493a:	2301      	movs	r3, #1
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
 800493e:	e014      	b.n	800496a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	4613      	mov	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d105      	bne.n	8004964 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	b2db      	uxtb	r3, r3
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fb08 	bl	8004f74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	3301      	adds	r3, #1
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	791b      	ldrb	r3, [r3, #4]
 800496e:	461a      	mov	r2, r3
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	4293      	cmp	r3, r2
 8004974:	d3e4      	bcc.n	8004940 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f004 f826 	bl	80089cc <USB_ReadInterrupts>
 8004980:	4603      	mov	r3, r0
 8004982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498a:	d13c      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800498c:	2301      	movs	r3, #1
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
 8004990:	e02b      	b.n	80049ea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	3318      	adds	r3, #24
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d115      	bne.n	80049e4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80049b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da12      	bge.n	80049e4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	3317      	adds	r3, #23
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fac8 	bl	8004f74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	3301      	adds	r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	791b      	ldrb	r3, [r3, #4]
 80049ee:	461a      	mov	r2, r3
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d3cd      	bcc.n	8004992 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f003 ffde 	bl	80089cc <USB_ReadInterrupts>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a1a:	d156      	bne.n	8004aca <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a20:	e045      	b.n	8004aae <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d12e      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	da2b      	bge.n	8004aa8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8004a5c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d121      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aa4:	6053      	str	r3, [r2, #4]
            break;
 8004aa6:	e008      	b.n	8004aba <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	3301      	adds	r3, #1
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	791b      	ldrb	r3, [r3, #4]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d3b3      	bcc.n	8004a22 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 ff7c 	bl	80089cc <USB_ReadInterrupts>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ade:	d10a      	bne.n	8004af6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f009 fba9 	bl	800e238 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f003 ff66 	bl	80089cc <USB_ReadInterrupts>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d115      	bne.n	8004b36 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f009 fb99 	bl	800e254 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6859      	ldr	r1, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	e000      	b.n	8004b36 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004b34:	bf00      	nop
    }
  }
}
 8004b36:	3734      	adds	r7, #52	; 0x34
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}

08004b3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_PCD_SetAddress+0x1a>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e012      	b.n	8004b7c <HAL_PCD_SetAddress+0x40>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f003 fec5 	bl	80088fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	70fb      	strb	r3, [r7, #3]
 8004b96:	460b      	mov	r3, r1
 8004b98:	803b      	strh	r3, [r7, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da0f      	bge.n	8004bca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	f003 020f 	and.w	r2, r3, #15
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	3310      	adds	r3, #16
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	705a      	strb	r2, [r3, #1]
 8004bc8:	e00f      	b.n	8004bea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 020f 	and.w	r2, r3, #15
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4413      	add	r3, r2
 8004be0:	3304      	adds	r3, #4
 8004be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bf6:	883a      	ldrh	r2, [r7, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	78ba      	ldrb	r2, [r7, #2]
 8004c00:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c14:	78bb      	ldrb	r3, [r7, #2]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d102      	bne.n	8004c20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_PCD_EP_Open+0xaa>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e00e      	b.n	8004c4c <HAL_PCD_EP_Open+0xc8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f003 f84d 	bl	8007cdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004c4a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da0f      	bge.n	8004c88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 020f 	and.w	r2, r3, #15
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	3310      	adds	r3, #16
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	705a      	strb	r2, [r3, #1]
 8004c86:	e00f      	b.n	8004ca8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	f003 020f 	and.w	r2, r3, #15
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_PCD_EP_Close+0x6e>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e00e      	b.n	8004ce0 <HAL_PCD_EP_Close+0x8c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f003 f88b 	bl	8007dec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cf8:	7afb      	ldrb	r3, [r7, #11]
 8004cfa:	f003 020f 	and.w	r2, r3, #15
 8004cfe:	4613      	mov	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3304      	adds	r3, #4
 8004d10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2200      	movs	r2, #0
 8004d22:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2200      	movs	r2, #0
 8004d28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d2a:	7afb      	ldrb	r3, [r7, #11]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	799b      	ldrb	r3, [r3, #6]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d102      	bne.n	8004d44 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	799b      	ldrb	r3, [r3, #6]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6979      	ldr	r1, [r7, #20]
 8004d50:	f003 f928 	bl	8007fa4 <USB_EPStartXfer>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004d80:	681b      	ldr	r3, [r3, #0]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d9e:	7afb      	ldrb	r3, [r7, #11]
 8004da0:	f003 020f 	and.w	r2, r3, #15
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3310      	adds	r3, #16
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	3304      	adds	r3, #4
 8004db4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dce:	7afb      	ldrb	r3, [r7, #11]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	799b      	ldrb	r3, [r3, #6]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	799b      	ldrb	r3, [r3, #6]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6979      	ldr	r1, [r7, #20]
 8004df4:	f003 f8d6 	bl	8007fa4 <USB_EPStartXfer>

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	7912      	ldrb	r2, [r2, #4]
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e04f      	b.n	8004ec0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	da0f      	bge.n	8004e48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	f003 020f 	and.w	r2, r3, #15
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	3310      	adds	r3, #16
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	705a      	strb	r2, [r3, #1]
 8004e46:	e00d      	b.n	8004e64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4413      	add	r3, r2
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_PCD_EP_SetStall+0x82>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e01d      	b.n	8004ec0 <HAL_PCD_EP_SetStall+0xbe>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f003 fc5e 	bl	8008754 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7999      	ldrb	r1, [r3, #6]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f003 fe4f 	bl	8008b54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	7912      	ldrb	r2, [r2, #4]
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e042      	b.n	8004f6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da0f      	bge.n	8004f0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	3310      	adds	r3, #16
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4413      	add	r3, r2
 8004f02:	3304      	adds	r3, #4
 8004f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	705a      	strb	r2, [r3, #1]
 8004f0c:	e00f      	b.n	8004f2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4413      	add	r3, r2
 8004f24:	3304      	adds	r3, #4
 8004f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_PCD_EP_ClrStall+0x86>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e00e      	b.n	8004f6c <HAL_PCD_EP_ClrStall+0xa4>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f003 fc67 	bl	8008830 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	da0c      	bge.n	8004fa2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	f003 020f 	and.w	r2, r3, #15
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	3310      	adds	r3, #16
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e00c      	b.n	8004fbc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fa2:	78fb      	ldrb	r3, [r7, #3]
 8004fa4:	f003 020f 	and.w	r2, r3, #15
 8004fa8:	4613      	mov	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3304      	adds	r3, #4
 8004fba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68f9      	ldr	r1, [r7, #12]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f003 fa86 	bl	80084d4 <USB_EPStopXfer>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004fcc:	7afb      	ldrb	r3, [r7, #11]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b08a      	sub	sp, #40	; 0x28
 8004fda:	af02      	add	r7, sp, #8
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	d901      	bls.n	800500e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e06b      	b.n	80050e6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	429a      	cmp	r2, r3
 8005022:	d902      	bls.n	800502a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3303      	adds	r3, #3
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005032:	e02a      	b.n	800508a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	429a      	cmp	r2, r3
 8005048:	d902      	bls.n	8005050 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	3303      	adds	r3, #3
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68d9      	ldr	r1, [r3, #12]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	b2da      	uxtb	r2, r3
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	4603      	mov	r3, r0
 800506c:	6978      	ldr	r0, [r7, #20]
 800506e:	f003 fadb 	bl	8008628 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	441a      	add	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	441a      	add	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	429a      	cmp	r2, r3
 800509e:	d809      	bhi.n	80050b4 <PCD_WriteEmptyTxFifo+0xde>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d203      	bcs.n	80050b4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1bf      	bne.n	8005034 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d811      	bhi.n	80050e4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	2201      	movs	r2, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	43db      	mvns	r3, r3
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050e0:	4013      	ands	r3, r2
 80050e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3720      	adds	r7, #32
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	333c      	adds	r3, #60	; 0x3c
 8005108:	3304      	adds	r3, #4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	799b      	ldrb	r3, [r3, #6]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d17b      	bne.n	800521e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d015      	beq.n	800515c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4a61      	ldr	r2, [pc, #388]	; (80052b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	f240 80b9 	bls.w	80052ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80b3 	beq.w	80052ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	461a      	mov	r2, r3
 8005154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005158:	6093      	str	r3, [r2, #8]
 800515a:	e0a7      	b.n	80052ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	461a      	mov	r2, r3
 8005174:	2320      	movs	r3, #32
 8005176:	6093      	str	r3, [r2, #8]
 8005178:	e098      	b.n	80052ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005180:	2b00      	cmp	r3, #0
 8005182:	f040 8093 	bne.w	80052ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	4a4b      	ldr	r2, [pc, #300]	; (80052b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d90f      	bls.n	80051ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051aa:	6093      	str	r3, [r2, #8]
 80051ac:	e07e      	b.n	80052ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	4413      	add	r3, r2
 80051c0:	3304      	adds	r3, #4
 80051c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	0159      	lsls	r1, r3, #5
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	440b      	add	r3, r1
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051da:	1ad2      	subs	r2, r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d114      	bne.n	8005210 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80051f8:	461a      	mov	r2, r3
 80051fa:	2101      	movs	r1, #1
 80051fc:	f003 fcaa 	bl	8008b54 <USB_EP0_OutStart>
 8005200:	e006      	b.n	8005210 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	441a      	add	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f008 ff4a 	bl	800e0b0 <HAL_PCD_DataOutStageCallback>
 800521c:	e046      	b.n	80052ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4a26      	ldr	r2, [pc, #152]	; (80052bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d124      	bne.n	8005270 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	461a      	mov	r2, r3
 800523e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005242:	6093      	str	r3, [r2, #8]
 8005244:	e032      	b.n	80052ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	461a      	mov	r2, r3
 800525e:	2320      	movs	r3, #32
 8005260:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f008 ff21 	bl	800e0b0 <HAL_PCD_DataOutStageCallback>
 800526e:	e01d      	b.n	80052ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d114      	bne.n	80052a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d108      	bne.n	80052a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005298:	461a      	mov	r2, r3
 800529a:	2100      	movs	r1, #0
 800529c:	f003 fc5a 	bl	8008b54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	4619      	mov	r1, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f008 ff02 	bl	800e0b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	4f54300a 	.word	0x4f54300a
 80052bc:	4f54310a 	.word	0x4f54310a

080052c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	333c      	adds	r3, #60	; 0x3c
 80052d8:	3304      	adds	r3, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a15      	ldr	r2, [pc, #84]	; (8005348 <PCD_EP_OutSetupPacket_int+0x88>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d90e      	bls.n	8005314 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d009      	beq.n	8005314 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	461a      	mov	r2, r3
 800530e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005312:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f008 feb9 	bl	800e08c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <PCD_EP_OutSetupPacket_int+0x88>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d90c      	bls.n	800533c <PCD_EP_OutSetupPacket_int+0x7c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	799b      	ldrb	r3, [r3, #6]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d108      	bne.n	800533c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005334:	461a      	mov	r2, r3
 8005336:	2101      	movs	r1, #1
 8005338:	f003 fc0c 	bl	8008b54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	4f54300a 	.word	0x4f54300a

0800534c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
 8005358:	4613      	mov	r3, r2
 800535a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d107      	bne.n	800537a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800536a:	883b      	ldrh	r3, [r7, #0]
 800536c:	0419      	lsls	r1, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	430a      	orrs	r2, r1
 8005376:	629a      	str	r2, [r3, #40]	; 0x28
 8005378:	e028      	b.n	80053cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4413      	add	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005388:	2300      	movs	r3, #0
 800538a:	73fb      	strb	r3, [r7, #15]
 800538c:	e00d      	b.n	80053aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	3340      	adds	r3, #64	; 0x40
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4413      	add	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	3301      	adds	r3, #1
 80053a8:	73fb      	strb	r3, [r7, #15]
 80053aa:	7bfa      	ldrb	r2, [r7, #15]
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d3ec      	bcc.n	800538e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80053b4:	883b      	ldrh	r3, [r7, #0]
 80053b6:	0418      	lsls	r0, r3, #16
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6819      	ldr	r1, [r3, #0]
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	3b01      	subs	r3, #1
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	4302      	orrs	r2, r0
 80053c4:	3340      	adds	r3, #64	; 0x40
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e267      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d075      	beq.n	800551e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005432:	4b88      	ldr	r3, [pc, #544]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b04      	cmp	r3, #4
 800543c:	d00c      	beq.n	8005458 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800543e:	4b85      	ldr	r3, [pc, #532]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005446:	2b08      	cmp	r3, #8
 8005448:	d112      	bne.n	8005470 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544a:	4b82      	ldr	r3, [pc, #520]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005456:	d10b      	bne.n	8005470 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005458:	4b7e      	ldr	r3, [pc, #504]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d05b      	beq.n	800551c <HAL_RCC_OscConfig+0x108>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d157      	bne.n	800551c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e242      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005478:	d106      	bne.n	8005488 <HAL_RCC_OscConfig+0x74>
 800547a:	4b76      	ldr	r3, [pc, #472]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a75      	ldr	r2, [pc, #468]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e01d      	b.n	80054c4 <HAL_RCC_OscConfig+0xb0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005490:	d10c      	bne.n	80054ac <HAL_RCC_OscConfig+0x98>
 8005492:	4b70      	ldr	r3, [pc, #448]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a6f      	ldr	r2, [pc, #444]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	4b6d      	ldr	r3, [pc, #436]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a6c      	ldr	r2, [pc, #432]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80054a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e00b      	b.n	80054c4 <HAL_RCC_OscConfig+0xb0>
 80054ac:	4b69      	ldr	r3, [pc, #420]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a68      	ldr	r2, [pc, #416]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80054b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	4b66      	ldr	r3, [pc, #408]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a65      	ldr	r2, [pc, #404]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80054be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d013      	beq.n	80054f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054cc:	f7fd fb4c 	bl	8002b68 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d4:	f7fd fb48 	bl	8002b68 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b64      	cmp	r3, #100	; 0x64
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e207      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e6:	4b5b      	ldr	r3, [pc, #364]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0xc0>
 80054f2:	e014      	b.n	800551e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fd fb38 	bl	8002b68 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054fc:	f7fd fb34 	bl	8002b68 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	; 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e1f3      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550e:	4b51      	ldr	r3, [pc, #324]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_RCC_OscConfig+0xe8>
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d063      	beq.n	80055f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800552a:	4b4a      	ldr	r3, [pc, #296]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00b      	beq.n	800554e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005536:	4b47      	ldr	r3, [pc, #284]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800553e:	2b08      	cmp	r3, #8
 8005540:	d11c      	bne.n	800557c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005542:	4b44      	ldr	r3, [pc, #272]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d116      	bne.n	800557c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800554e:	4b41      	ldr	r3, [pc, #260]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_RCC_OscConfig+0x152>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d001      	beq.n	8005566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e1c7      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005566:	4b3b      	ldr	r3, [pc, #236]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4937      	ldr	r1, [pc, #220]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005576:	4313      	orrs	r3, r2
 8005578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800557a:	e03a      	b.n	80055f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d020      	beq.n	80055c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005584:	4b34      	ldr	r3, [pc, #208]	; (8005658 <HAL_RCC_OscConfig+0x244>)
 8005586:	2201      	movs	r2, #1
 8005588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558a:	f7fd faed 	bl	8002b68 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005592:	f7fd fae9 	bl	8002b68 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e1a8      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a4:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f0      	beq.n	8005592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b0:	4b28      	ldr	r3, [pc, #160]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4925      	ldr	r1, [pc, #148]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	600b      	str	r3, [r1, #0]
 80055c4:	e015      	b.n	80055f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055c6:	4b24      	ldr	r3, [pc, #144]	; (8005658 <HAL_RCC_OscConfig+0x244>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fd facc 	bl	8002b68 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d4:	f7fd fac8 	bl	8002b68 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e187      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e6:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d036      	beq.n	800566c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d016      	beq.n	8005634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005606:	4b15      	ldr	r3, [pc, #84]	; (800565c <HAL_RCC_OscConfig+0x248>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fd faac 	bl	8002b68 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005614:	f7fd faa8 	bl	8002b68 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e167      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_RCC_OscConfig+0x240>)
 8005628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f0      	beq.n	8005614 <HAL_RCC_OscConfig+0x200>
 8005632:	e01b      	b.n	800566c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005634:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_RCC_OscConfig+0x248>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563a:	f7fd fa95 	bl	8002b68 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005640:	e00e      	b.n	8005660 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005642:	f7fd fa91 	bl	8002b68 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d907      	bls.n	8005660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e150      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
 8005654:	40023800 	.word	0x40023800
 8005658:	42470000 	.word	0x42470000
 800565c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005660:	4b88      	ldr	r3, [pc, #544]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1ea      	bne.n	8005642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8097 	beq.w	80057a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567a:	2300      	movs	r3, #0
 800567c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567e:	4b81      	ldr	r3, [pc, #516]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10f      	bne.n	80056aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	4b7d      	ldr	r3, [pc, #500]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	4a7c      	ldr	r2, [pc, #496]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005698:	6413      	str	r3, [r2, #64]	; 0x40
 800569a:	4b7a      	ldr	r3, [pc, #488]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056aa:	4b77      	ldr	r3, [pc, #476]	; (8005888 <HAL_RCC_OscConfig+0x474>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d118      	bne.n	80056e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b6:	4b74      	ldr	r3, [pc, #464]	; (8005888 <HAL_RCC_OscConfig+0x474>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a73      	ldr	r2, [pc, #460]	; (8005888 <HAL_RCC_OscConfig+0x474>)
 80056bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c2:	f7fd fa51 	bl	8002b68 <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ca:	f7fd fa4d 	bl	8002b68 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e10c      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056dc:	4b6a      	ldr	r3, [pc, #424]	; (8005888 <HAL_RCC_OscConfig+0x474>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d106      	bne.n	80056fe <HAL_RCC_OscConfig+0x2ea>
 80056f0:	4b64      	ldr	r3, [pc, #400]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	4a63      	ldr	r2, [pc, #396]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	6713      	str	r3, [r2, #112]	; 0x70
 80056fc:	e01c      	b.n	8005738 <HAL_RCC_OscConfig+0x324>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b05      	cmp	r3, #5
 8005704:	d10c      	bne.n	8005720 <HAL_RCC_OscConfig+0x30c>
 8005706:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a5e      	ldr	r2, [pc, #376]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 800570c:	f043 0304 	orr.w	r3, r3, #4
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
 8005712:	4b5c      	ldr	r3, [pc, #368]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	4a5b      	ldr	r2, [pc, #364]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	6713      	str	r3, [r2, #112]	; 0x70
 800571e:	e00b      	b.n	8005738 <HAL_RCC_OscConfig+0x324>
 8005720:	4b58      	ldr	r3, [pc, #352]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	4a57      	ldr	r2, [pc, #348]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	6713      	str	r3, [r2, #112]	; 0x70
 800572c:	4b55      	ldr	r3, [pc, #340]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 800572e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005730:	4a54      	ldr	r2, [pc, #336]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005732:	f023 0304 	bic.w	r3, r3, #4
 8005736:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d015      	beq.n	800576c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005740:	f7fd fa12 	bl	8002b68 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005746:	e00a      	b.n	800575e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005748:	f7fd fa0e 	bl	8002b68 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e0cb      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800575e:	4b49      	ldr	r3, [pc, #292]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0ee      	beq.n	8005748 <HAL_RCC_OscConfig+0x334>
 800576a:	e014      	b.n	8005796 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576c:	f7fd f9fc 	bl	8002b68 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005772:	e00a      	b.n	800578a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005774:	f7fd f9f8 	bl	8002b68 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e0b5      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800578a:	4b3e      	ldr	r3, [pc, #248]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1ee      	bne.n	8005774 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005796:	7dfb      	ldrb	r3, [r7, #23]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d105      	bne.n	80057a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800579c:	4b39      	ldr	r3, [pc, #228]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	4a38      	ldr	r2, [pc, #224]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 80057a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80a1 	beq.w	80058f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057b2:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d05c      	beq.n	8005878 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d141      	bne.n	800584a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c6:	4b31      	ldr	r3, [pc, #196]	; (800588c <HAL_RCC_OscConfig+0x478>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057cc:	f7fd f9cc 	bl	8002b68 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fd f9c8 	bl	8002b68 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e087      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	4b27      	ldr	r3, [pc, #156]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	019b      	lsls	r3, r3, #6
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	3b01      	subs	r3, #1
 800580c:	041b      	lsls	r3, r3, #16
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	061b      	lsls	r3, r3, #24
 8005816:	491b      	ldr	r1, [pc, #108]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 8005818:	4313      	orrs	r3, r2
 800581a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800581c:	4b1b      	ldr	r3, [pc, #108]	; (800588c <HAL_RCC_OscConfig+0x478>)
 800581e:	2201      	movs	r2, #1
 8005820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005822:	f7fd f9a1 	bl	8002b68 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582a:	f7fd f99d 	bl	8002b68 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e05c      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583c:	4b11      	ldr	r3, [pc, #68]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0f0      	beq.n	800582a <HAL_RCC_OscConfig+0x416>
 8005848:	e054      	b.n	80058f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <HAL_RCC_OscConfig+0x478>)
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005850:	f7fd f98a 	bl	8002b68 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005858:	f7fd f986 	bl	8002b68 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e045      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCC_OscConfig+0x470>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x444>
 8005876:	e03d      	b.n	80058f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d107      	bne.n	8005890 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e038      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
 8005884:	40023800 	.word	0x40023800
 8005888:	40007000 	.word	0x40007000
 800588c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <HAL_RCC_OscConfig+0x4ec>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d028      	beq.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d121      	bne.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d11a      	bne.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058c0:	4013      	ands	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d111      	bne.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	3b01      	subs	r3, #1
 80058da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058dc:	429a      	cmp	r2, r3
 80058de:	d107      	bne.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40023800 	.word	0x40023800

08005904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0cc      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005918:	4b68      	ldr	r3, [pc, #416]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d90c      	bls.n	8005940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005926:	4b65      	ldr	r3, [pc, #404]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592e:	4b63      	ldr	r3, [pc, #396]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d001      	beq.n	8005940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0b8      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d020      	beq.n	800598e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005958:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4a58      	ldr	r2, [pc, #352]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005962:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005970:	4b53      	ldr	r3, [pc, #332]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	4a52      	ldr	r2, [pc, #328]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800597a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597c:	4b50      	ldr	r3, [pc, #320]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	494d      	ldr	r1, [pc, #308]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	4313      	orrs	r3, r2
 800598c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d044      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d107      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a2:	4b47      	ldr	r3, [pc, #284]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d119      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e07f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d003      	beq.n	80059c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d107      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c2:	4b3f      	ldr	r3, [pc, #252]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e06f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d2:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e067      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e2:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f023 0203 	bic.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4934      	ldr	r1, [pc, #208]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f4:	f7fd f8b8 	bl	8002b68 <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	e00a      	b.n	8005a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fc:	f7fd f8b4 	bl	8002b68 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e04f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a12:	4b2b      	ldr	r3, [pc, #172]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 020c 	and.w	r2, r3, #12
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d1eb      	bne.n	80059fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a24:	4b25      	ldr	r3, [pc, #148]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d20c      	bcs.n	8005a4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b20      	ldr	r3, [pc, #128]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e032      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4916      	ldr	r1, [pc, #88]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	490e      	ldr	r1, [pc, #56]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a8a:	f000 f821 	bl	8005ad0 <HAL_RCC_GetSysClockFreq>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	490a      	ldr	r1, [pc, #40]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a9c:	5ccb      	ldrb	r3, [r1, r3]
 8005a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa2:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <HAL_RCC_ClockConfig+0x1c8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fb f856 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40023c00 	.word	0x40023c00
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	0800f0c4 	.word	0x0800f0c4
 8005ac8:	2000000c 	.word	0x2000000c
 8005acc:	2000008c 	.word	0x2000008c

08005ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad4:	b094      	sub	sp, #80	; 0x50
 8005ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	647b      	str	r3, [r7, #68]	; 0x44
 8005adc:	2300      	movs	r3, #0
 8005ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ae8:	4b79      	ldr	r3, [pc, #484]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 030c 	and.w	r3, r3, #12
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d00d      	beq.n	8005b10 <HAL_RCC_GetSysClockFreq+0x40>
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	f200 80e1 	bhi.w	8005cbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x34>
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d003      	beq.n	8005b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b02:	e0db      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b04:	4b73      	ldr	r3, [pc, #460]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b08:	e0db      	b.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b0a:	4b73      	ldr	r3, [pc, #460]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b0e:	e0d8      	b.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b10:	4b6f      	ldr	r3, [pc, #444]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b1a:	4b6d      	ldr	r3, [pc, #436]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d063      	beq.n	8005bee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b26:	4b6a      	ldr	r3, [pc, #424]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	099b      	lsrs	r3, r3, #6
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b38:	633b      	str	r3, [r7, #48]	; 0x30
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b42:	4622      	mov	r2, r4
 8005b44:	462b      	mov	r3, r5
 8005b46:	f04f 0000 	mov.w	r0, #0
 8005b4a:	f04f 0100 	mov.w	r1, #0
 8005b4e:	0159      	lsls	r1, r3, #5
 8005b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b54:	0150      	lsls	r0, r2, #5
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	1a51      	subs	r1, r2, r1
 8005b5e:	6139      	str	r1, [r7, #16]
 8005b60:	4629      	mov	r1, r5
 8005b62:	eb63 0301 	sbc.w	r3, r3, r1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b74:	4659      	mov	r1, fp
 8005b76:	018b      	lsls	r3, r1, #6
 8005b78:	4651      	mov	r1, sl
 8005b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b7e:	4651      	mov	r1, sl
 8005b80:	018a      	lsls	r2, r1, #6
 8005b82:	4651      	mov	r1, sl
 8005b84:	ebb2 0801 	subs.w	r8, r2, r1
 8005b88:	4659      	mov	r1, fp
 8005b8a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ba2:	4690      	mov	r8, r2
 8005ba4:	4699      	mov	r9, r3
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	eb18 0303 	adds.w	r3, r8, r3
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	462b      	mov	r3, r5
 8005bb0:	eb49 0303 	adc.w	r3, r9, r3
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	024b      	lsls	r3, r1, #9
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bcc:	4621      	mov	r1, r4
 8005bce:	024a      	lsls	r2, r1, #9
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005be0:	f7fa fb56 	bl	8000290 <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4613      	mov	r3, r2
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bec:	e058      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bee:	4b38      	ldr	r3, [pc, #224]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	099b      	lsrs	r3, r3, #6
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bfe:	623b      	str	r3, [r7, #32]
 8005c00:	2300      	movs	r3, #0
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
 8005c04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	f04f 0000 	mov.w	r0, #0
 8005c10:	f04f 0100 	mov.w	r1, #0
 8005c14:	0159      	lsls	r1, r3, #5
 8005c16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c1a:	0150      	lsls	r0, r2, #5
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4641      	mov	r1, r8
 8005c22:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c26:	4649      	mov	r1, r9
 8005c28:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c40:	ebb2 040a 	subs.w	r4, r2, sl
 8005c44:	eb63 050b 	sbc.w	r5, r3, fp
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	00eb      	lsls	r3, r5, #3
 8005c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c56:	00e2      	lsls	r2, r4, #3
 8005c58:	4614      	mov	r4, r2
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	18e3      	adds	r3, r4, r3
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	464b      	mov	r3, r9
 8005c64:	eb45 0303 	adc.w	r3, r5, r3
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c76:	4629      	mov	r1, r5
 8005c78:	028b      	lsls	r3, r1, #10
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c80:	4621      	mov	r1, r4
 8005c82:	028a      	lsls	r2, r1, #10
 8005c84:	4610      	mov	r0, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	61fa      	str	r2, [r7, #28]
 8005c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c94:	f7fa fafc 	bl	8000290 <__aeabi_uldivmod>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	0c1b      	lsrs	r3, r3, #16
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	3301      	adds	r3, #1
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005cb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cba:	e002      	b.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3750      	adds	r7, #80	; 0x50
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cce:	bf00      	nop
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	00f42400 	.word	0x00f42400
 8005cd8:	007a1200 	.word	0x007a1200

08005cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce0:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	2000000c 	.word	0x2000000c

08005cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cf8:	f7ff fff0 	bl	8005cdc <HAL_RCC_GetHCLKFreq>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	0a9b      	lsrs	r3, r3, #10
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	4903      	ldr	r1, [pc, #12]	; (8005d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d0a:	5ccb      	ldrb	r3, [r1, r3]
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40023800 	.word	0x40023800
 8005d18:	0800f0d4 	.word	0x0800f0d4

08005d1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	220f      	movs	r2, #15
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d2c:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <HAL_RCC_GetClockConfig+0x5c>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0203 	and.w	r2, r3, #3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <HAL_RCC_GetClockConfig+0x5c>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <HAL_RCC_GetClockConfig+0x5c>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d50:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <HAL_RCC_GetClockConfig+0x5c>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	08db      	lsrs	r3, r3, #3
 8005d56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <HAL_RCC_GetClockConfig+0x60>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 020f 	and.w	r2, r3, #15
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	601a      	str	r2, [r3, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40023c00 	.word	0x40023c00

08005d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10b      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d075      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005db4:	4b91      	ldr	r3, [pc, #580]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dba:	f7fc fed5 	bl	8002b68 <HAL_GetTick>
 8005dbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dc2:	f7fc fed1 	bl	8002b68 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e189      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dd4:	4b8a      	ldr	r3, [pc, #552]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f0      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	019a      	lsls	r2, r3, #6
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	071b      	lsls	r3, r3, #28
 8005df8:	4981      	ldr	r1, [pc, #516]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01f      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e0c:	4b7c      	ldr	r3, [pc, #496]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e12:	0f1b      	lsrs	r3, r3, #28
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	019a      	lsls	r2, r3, #6
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	061b      	lsls	r3, r3, #24
 8005e26:	431a      	orrs	r2, r3
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	071b      	lsls	r3, r3, #28
 8005e2c:	4974      	ldr	r1, [pc, #464]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e34:	4b72      	ldr	r3, [pc, #456]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e3a:	f023 021f 	bic.w	r2, r3, #31
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	496e      	ldr	r1, [pc, #440]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00d      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	019a      	lsls	r2, r3, #6
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	061b      	lsls	r3, r3, #24
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	071b      	lsls	r3, r3, #28
 8005e6c:	4964      	ldr	r1, [pc, #400]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e74:	4b61      	ldr	r3, [pc, #388]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e7a:	f7fc fe75 	bl	8002b68 <HAL_GetTick>
 8005e7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e80:	e008      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e82:	f7fc fe71 	bl	8002b68 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e129      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e94:	4b5a      	ldr	r3, [pc, #360]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d079      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005eb8:	4b52      	ldr	r3, [pc, #328]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ebe:	f7fc fe53 	bl	8002b68 <HAL_GetTick>
 8005ec2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ec6:	f7fc fe4f 	bl	8002b68 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e107      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ed8:	4b49      	ldr	r3, [pc, #292]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee4:	d0ef      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d020      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ef2:	4b43      	ldr	r3, [pc, #268]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	0f1b      	lsrs	r3, r3, #28
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	019a      	lsls	r2, r3, #6
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	061b      	lsls	r3, r3, #24
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	071b      	lsls	r3, r3, #28
 8005f12:	493b      	ldr	r1, [pc, #236]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f1a:	4b39      	ldr	r3, [pc, #228]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	4934      	ldr	r1, [pc, #208]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01e      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f40:	4b2f      	ldr	r3, [pc, #188]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f46:	0e1b      	lsrs	r3, r3, #24
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	019a      	lsls	r2, r3, #6
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	061b      	lsls	r3, r3, #24
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	071b      	lsls	r3, r3, #28
 8005f60:	4927      	ldr	r1, [pc, #156]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f68:	4b25      	ldr	r3, [pc, #148]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	4922      	ldr	r1, [pc, #136]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f7e:	4b21      	ldr	r3, [pc, #132]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f84:	f7fc fdf0 	bl	8002b68 <HAL_GetTick>
 8005f88:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f8c:	f7fc fdec 	bl	8002b68 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e0a4      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f9e:	4b18      	ldr	r3, [pc, #96]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005faa:	d1ef      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 808b 	beq.w	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	4a0f      	ldr	r2, [pc, #60]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005fca:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a0b      	ldr	r2, [pc, #44]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fe2:	f7fc fdc1 	bl	8002b68 <HAL_GetTick>
 8005fe6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fe8:	e010      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fea:	f7fc fdbd 	bl	8002b68 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d909      	bls.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e075      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005ffc:	42470068 	.word	0x42470068
 8006000:	40023800 	.word	0x40023800
 8006004:	42470070 	.word	0x42470070
 8006008:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800600c:	4b38      	ldr	r3, [pc, #224]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0e8      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006018:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006020:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d02f      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	429a      	cmp	r2, r3
 8006034:	d028      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006036:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006040:	4b2d      	ldr	r3, [pc, #180]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006046:	4b2c      	ldr	r3, [pc, #176]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800604c:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006052:	4b28      	ldr	r3, [pc, #160]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	d114      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800605e:	f7fc fd83 	bl	8002b68 <HAL_GetTick>
 8006062:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006064:	e00a      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006066:	f7fc fd7f 	bl	8002b68 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	f241 3288 	movw	r2, #5000	; 0x1388
 8006074:	4293      	cmp	r3, r2
 8006076:	d901      	bls.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e035      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607c:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800607e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0ee      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006094:	d10d      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006096:	4b17      	ldr	r3, [pc, #92]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060aa:	4912      	ldr	r1, [pc, #72]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	608b      	str	r3, [r1, #8]
 80060b0:	e005      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80060b2:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	4a0f      	ldr	r2, [pc, #60]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060bc:	6093      	str	r3, [r2, #8]
 80060be:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ca:	490a      	ldr	r1, [pc, #40]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d004      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80060e4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40007000 	.word	0x40007000
 80060f4:	40023800 	.word	0x40023800
 80060f8:	42470e40 	.word	0x42470e40
 80060fc:	424711e0 	.word	0x424711e0

08006100 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e025      	b.n	8006160 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f81d 	bl	8006168 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f001 f93b 	bl	80073bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	461a      	mov	r2, r3
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	f001 f990 	bl	8007476 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800618e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b02      	cmp	r3, #2
 8006194:	d101      	bne.n	800619a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
 8006198:	e021      	b.n	80061de <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d002      	beq.n	80061a6 <HAL_SDRAM_SendCommand+0x2a>
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d118      	bne.n	80061d8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2202      	movs	r2, #2
 80061aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 f9c6 	bl	8007548 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d104      	bne.n	80061ce <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2205      	movs	r2, #5
 80061c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80061cc:	e006      	b.n	80061dc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80061d6:	e001      	b.n	80061dc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d101      	bne.n	8006200 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80061fc:	2302      	movs	r3, #2
 80061fe:	e016      	b.n	800622e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	d10f      	bne.n	800622c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f001 f9d1 	bl	80075c2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e07b      	b.n	8006340 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d108      	bne.n	8006262 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006258:	d009      	beq.n	800626e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	61da      	str	r2, [r3, #28]
 8006260:	e005      	b.n	800626e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d106      	bne.n	800628e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f885 	bl	8006398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2202      	movs	r2, #2
 8006292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f2:	ea42 0103 	orr.w	r1, r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	0c1b      	lsrs	r3, r3, #16
 800630c:	f003 0104 	and.w	r1, r3, #4
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	f003 0210 	and.w	r2, r3, #16
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800632e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e01a      	b.n	8006390 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006370:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f81a 	bl	80063ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_SPI_Transmit+0x22>
 80063de:	2302      	movs	r3, #2
 80063e0:	e12d      	b.n	800663e <HAL_SPI_Transmit+0x27e>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063ea:	f7fc fbbd 	bl	8002b68 <HAL_GetTick>
 80063ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d002      	beq.n	8006406 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006400:	2302      	movs	r3, #2
 8006402:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006404:	e116      	b.n	8006634 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_SPI_Transmit+0x52>
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d102      	bne.n	8006418 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006416:	e10d      	b.n	8006634 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2203      	movs	r2, #3
 800641c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	88fa      	ldrh	r2, [r7, #6]
 8006436:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800645e:	d10f      	bne.n	8006480 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800647e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d007      	beq.n	800649e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a6:	d14f      	bne.n	8006548 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_Transmit+0xf6>
 80064b0:	8afb      	ldrh	r3, [r7, #22]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d142      	bne.n	800653c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	1c9a      	adds	r2, r3, #2
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064da:	e02f      	b.n	800653c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d112      	bne.n	8006510 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	881a      	ldrh	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	1c9a      	adds	r2, r3, #2
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	86da      	strh	r2, [r3, #54]	; 0x36
 800650e:	e015      	b.n	800653c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006510:	f7fc fb2a 	bl	8002b68 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d803      	bhi.n	8006528 <HAL_SPI_Transmit+0x168>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d102      	bne.n	800652e <HAL_SPI_Transmit+0x16e>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800653a:	e07b      	b.n	8006634 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1ca      	bne.n	80064dc <HAL_SPI_Transmit+0x11c>
 8006546:	e050      	b.n	80065ea <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <HAL_SPI_Transmit+0x196>
 8006550:	8afb      	ldrh	r3, [r7, #22]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d144      	bne.n	80065e0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	7812      	ldrb	r2, [r2, #0]
 8006562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800657c:	e030      	b.n	80065e0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b02      	cmp	r3, #2
 800658a:	d113      	bne.n	80065b4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	7812      	ldrb	r2, [r2, #0]
 8006598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80065b2:	e015      	b.n	80065e0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b4:	f7fc fad8 	bl	8002b68 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d803      	bhi.n	80065cc <HAL_SPI_Transmit+0x20c>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d102      	bne.n	80065d2 <HAL_SPI_Transmit+0x212>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80065de:	e029      	b.n	8006634 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1c9      	bne.n	800657e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fbee 	bl	8006dd0 <SPI_EndRxTxTransaction>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	77fb      	strb	r3, [r7, #31]
 800662a:	e003      	b.n	8006634 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800663c:	7ffb      	ldrb	r3, [r7, #31]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b088      	sub	sp, #32
 800664a:	af02      	add	r7, sp, #8
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b01      	cmp	r3, #1
 8006664:	d002      	beq.n	800666c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006666:	2302      	movs	r3, #2
 8006668:	75fb      	strb	r3, [r7, #23]
    goto error;
 800666a:	e0fb      	b.n	8006864 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006674:	d112      	bne.n	800669c <HAL_SPI_Receive+0x56>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10e      	bne.n	800669c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2204      	movs	r2, #4
 8006682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f8ef 	bl	8006876 <HAL_SPI_TransmitReceive>
 8006698:	4603      	mov	r3, r0
 800669a:	e0e8      	b.n	800686e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_SPI_Receive+0x64>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e0e1      	b.n	800686e <HAL_SPI_Receive+0x228>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066b2:	f7fc fa59 	bl	8002b68 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_SPI_Receive+0x7e>
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066c8:	e0cc      	b.n	8006864 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2204      	movs	r2, #4
 80066ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	88fa      	ldrh	r2, [r7, #6]
 80066e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	88fa      	ldrh	r2, [r7, #6]
 80066e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006710:	d10f      	bne.n	8006732 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006730:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d007      	beq.n	8006750 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d16a      	bne.n	800682e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006758:	e032      	b.n	80067c0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b01      	cmp	r3, #1
 8006766:	d115      	bne.n	8006794 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f103 020c 	add.w	r2, r3, #12
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006792:	e015      	b.n	80067c0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006794:	f7fc f9e8 	bl	8002b68 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d803      	bhi.n	80067ac <HAL_SPI_Receive+0x166>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	d102      	bne.n	80067b2 <HAL_SPI_Receive+0x16c>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80067be:	e051      	b.n	8006864 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1c7      	bne.n	800675a <HAL_SPI_Receive+0x114>
 80067ca:	e035      	b.n	8006838 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d113      	bne.n	8006802 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	b292      	uxth	r2, r2
 80067e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	1c9a      	adds	r2, r3, #2
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006800:	e015      	b.n	800682e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006802:	f7fc f9b1 	bl	8002b68 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d803      	bhi.n	800681a <HAL_SPI_Receive+0x1d4>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d102      	bne.n	8006820 <HAL_SPI_Receive+0x1da>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800682c:	e01a      	b.n	8006864 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1c9      	bne.n	80067cc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 fa61 	bl	8006d04 <SPI_EndRxTransaction>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	75fb      	strb	r3, [r7, #23]
 800685a:	e003      	b.n	8006864 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b08c      	sub	sp, #48	; 0x30
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006884:	2301      	movs	r3, #1
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_SPI_TransmitReceive+0x26>
 8006898:	2302      	movs	r3, #2
 800689a:	e198      	b.n	8006bce <HAL_SPI_TransmitReceive+0x358>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068a4:	f7fc f960 	bl	8002b68 <HAL_GetTick>
 80068a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80068ba:	887b      	ldrh	r3, [r7, #2]
 80068bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d00f      	beq.n	80068e6 <HAL_SPI_TransmitReceive+0x70>
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068cc:	d107      	bne.n	80068de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d103      	bne.n	80068de <HAL_SPI_TransmitReceive+0x68>
 80068d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d003      	beq.n	80068e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80068de:	2302      	movs	r3, #2
 80068e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068e4:	e16d      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0x82>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0x82>
 80068f2:	887b      	ldrh	r3, [r7, #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068fe:	e160      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b04      	cmp	r3, #4
 800690a:	d003      	beq.n	8006914 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2205      	movs	r2, #5
 8006910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	887a      	ldrh	r2, [r7, #2]
 8006924:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	887a      	ldrh	r2, [r7, #2]
 800692a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	887a      	ldrh	r2, [r7, #2]
 8006936:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	887a      	ldrh	r2, [r7, #2]
 800693c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	d007      	beq.n	8006968 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006966:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006970:	d17c      	bne.n	8006a6c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <HAL_SPI_TransmitReceive+0x10a>
 800697a:	8b7b      	ldrh	r3, [r7, #26]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d16a      	bne.n	8006a56 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	881a      	ldrh	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006990:	1c9a      	adds	r2, r3, #2
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a4:	e057      	b.n	8006a56 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d11b      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x176>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d016      	beq.n	80069ec <HAL_SPI_TransmitReceive+0x176>
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d113      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d119      	bne.n	8006a2e <HAL_SPI_TransmitReceive+0x1b8>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d014      	beq.n	8006a2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	b292      	uxth	r2, r2
 8006a10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	1c9a      	adds	r2, r3, #2
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a2e:	f7fc f89b 	bl	8002b68 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d80b      	bhi.n	8006a56 <HAL_SPI_TransmitReceive+0x1e0>
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d007      	beq.n	8006a56 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006a54:	e0b5      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1a2      	bne.n	80069a6 <HAL_SPI_TransmitReceive+0x130>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d19d      	bne.n	80069a6 <HAL_SPI_TransmitReceive+0x130>
 8006a6a:	e080      	b.n	8006b6e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <HAL_SPI_TransmitReceive+0x204>
 8006a74:	8b7b      	ldrh	r3, [r7, #26]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d16f      	bne.n	8006b5a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa0:	e05b      	b.n	8006b5a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d11c      	bne.n	8006aea <HAL_SPI_TransmitReceive+0x274>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d017      	beq.n	8006aea <HAL_SPI_TransmitReceive+0x274>
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d114      	bne.n	8006aea <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d119      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x2b6>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d014      	beq.n	8006b2c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b2c:	f7fc f81c 	bl	8002b68 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d803      	bhi.n	8006b44 <HAL_SPI_TransmitReceive+0x2ce>
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d102      	bne.n	8006b4a <HAL_SPI_TransmitReceive+0x2d4>
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d107      	bne.n	8006b5a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006b58:	e033      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d19e      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x22c>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d199      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f92c 	bl	8006dd0 <SPI_EndRxTxTransaction>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d006      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b8a:	e01a      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bb8:	e003      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3730      	adds	r7, #48	; 0x30
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006be4:	b2db      	uxtb	r3, r3
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
	...

08006bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b088      	sub	sp, #32
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4613      	mov	r3, r2
 8006c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c04:	f7fb ffb0 	bl	8002b68 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	4413      	add	r3, r2
 8006c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c14:	f7fb ffa8 	bl	8002b68 <HAL_GetTick>
 8006c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c1a:	4b39      	ldr	r3, [pc, #228]	; (8006d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	015b      	lsls	r3, r3, #5
 8006c20:	0d1b      	lsrs	r3, r3, #20
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	fb02 f303 	mul.w	r3, r2, r3
 8006c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c2a:	e054      	b.n	8006cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d050      	beq.n	8006cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c34:	f7fb ff98 	bl	8002b68 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d902      	bls.n	8006c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d13d      	bne.n	8006cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c62:	d111      	bne.n	8006c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6c:	d004      	beq.n	8006c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c76:	d107      	bne.n	8006c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c90:	d10f      	bne.n	8006cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e017      	b.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	bf0c      	ite	eq
 8006ce6:	2301      	moveq	r3, #1
 8006ce8:	2300      	movne	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d19b      	bne.n	8006c2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	2000000c 	.word	0x2000000c

08006d04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d18:	d111      	bne.n	8006d3e <SPI_EndRxTransaction+0x3a>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d22:	d004      	beq.n	8006d2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2c:	d107      	bne.n	8006d3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d3c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d46:	d12a      	bne.n	8006d9e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d50:	d012      	beq.n	8006d78 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2180      	movs	r1, #128	; 0x80
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff ff49 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d02d      	beq.n	8006dc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e026      	b.n	8006dc6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2101      	movs	r1, #1
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff ff36 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01a      	beq.n	8006dc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	f043 0220 	orr.w	r2, r3, #32
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e013      	b.n	8006dc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	2101      	movs	r1, #1
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff ff23 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e000      	b.n	8006dc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2201      	movs	r2, #1
 8006de4:	2102      	movs	r1, #2
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7ff ff04 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	f043 0220 	orr.w	r2, r3, #32
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e032      	b.n	8006e68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e02:	4b1b      	ldr	r3, [pc, #108]	; (8006e70 <SPI_EndRxTxTransaction+0xa0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1b      	ldr	r2, [pc, #108]	; (8006e74 <SPI_EndRxTxTransaction+0xa4>)
 8006e08:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0c:	0d5b      	lsrs	r3, r3, #21
 8006e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e12:	fb02 f303 	mul.w	r3, r2, r3
 8006e16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e20:	d112      	bne.n	8006e48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2180      	movs	r1, #128	; 0x80
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f7ff fee1 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d016      	beq.n	8006e66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3c:	f043 0220 	orr.w	r2, r3, #32
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e00f      	b.n	8006e68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5e:	2b80      	cmp	r3, #128	; 0x80
 8006e60:	d0f2      	beq.n	8006e48 <SPI_EndRxTxTransaction+0x78>
 8006e62:	e000      	b.n	8006e66 <SPI_EndRxTxTransaction+0x96>
        break;
 8006e64:	bf00      	nop
  }

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	2000000c 	.word	0x2000000c
 8006e74:	165e9f81 	.word	0x165e9f81

08006e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e041      	b.n	8006f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d106      	bne.n	8006ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f839 	bl	8006f16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f000 f9c0 	bl	800723c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d001      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e04e      	b.n	8006fe2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a23      	ldr	r2, [pc, #140]	; (8006ff0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d022      	beq.n	8006fac <HAL_TIM_Base_Start_IT+0x80>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6e:	d01d      	beq.n	8006fac <HAL_TIM_Base_Start_IT+0x80>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1f      	ldr	r2, [pc, #124]	; (8006ff4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d018      	beq.n	8006fac <HAL_TIM_Base_Start_IT+0x80>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d013      	beq.n	8006fac <HAL_TIM_Base_Start_IT+0x80>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1c      	ldr	r2, [pc, #112]	; (8006ffc <HAL_TIM_Base_Start_IT+0xd0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00e      	beq.n	8006fac <HAL_TIM_Base_Start_IT+0x80>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d009      	beq.n	8006fac <HAL_TIM_Base_Start_IT+0x80>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	; (8007004 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_TIM_Base_Start_IT+0x80>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	; (8007008 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d111      	bne.n	8006fd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b06      	cmp	r3, #6
 8006fbc:	d010      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0201 	orr.w	r2, r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fce:	e007      	b.n	8006fe0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 0201 	orr.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40000400 	.word	0x40000400
 8006ff8:	40000800 	.word	0x40000800
 8006ffc:	40000c00 	.word	0x40000c00
 8007000:	40010400 	.word	0x40010400
 8007004:	40014000 	.word	0x40014000
 8007008:	40001800 	.word	0x40001800

0800700c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d020      	beq.n	8007070 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01b      	beq.n	8007070 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0202 	mvn.w	r2, #2
 8007040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f8d2 	bl	8007200 <HAL_TIM_IC_CaptureCallback>
 800705c:	e005      	b.n	800706a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f8c4 	bl	80071ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f8d5 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	2b00      	cmp	r3, #0
 8007078:	d020      	beq.n	80070bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01b      	beq.n	80070bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0204 	mvn.w	r2, #4
 800708c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f8ac 	bl	8007200 <HAL_TIM_IC_CaptureCallback>
 80070a8:	e005      	b.n	80070b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f89e 	bl	80071ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f8af 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d020      	beq.n	8007108 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01b      	beq.n	8007108 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f06f 0208 	mvn.w	r2, #8
 80070d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2204      	movs	r2, #4
 80070de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f886 	bl	8007200 <HAL_TIM_IC_CaptureCallback>
 80070f4:	e005      	b.n	8007102 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f878 	bl	80071ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f889 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b00      	cmp	r3, #0
 8007110:	d020      	beq.n	8007154 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01b      	beq.n	8007154 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0210 	mvn.w	r2, #16
 8007124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2208      	movs	r2, #8
 800712a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f860 	bl	8007200 <HAL_TIM_IC_CaptureCallback>
 8007140:	e005      	b.n	800714e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f852 	bl	80071ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f863 	bl	8007214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00c      	beq.n	8007178 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0201 	mvn.w	r2, #1
 8007170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7f9 fcae 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00c      	beq.n	800719c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f906 	bl	80073a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f834 	bl	8007228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00c      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0220 	mvn.w	r2, #32
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f8d8 	bl	8007394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a46      	ldr	r2, [pc, #280]	; (8007368 <TIM_Base_SetConfig+0x12c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725a:	d00f      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a43      	ldr	r2, [pc, #268]	; (800736c <TIM_Base_SetConfig+0x130>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00b      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a42      	ldr	r2, [pc, #264]	; (8007370 <TIM_Base_SetConfig+0x134>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d007      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a41      	ldr	r2, [pc, #260]	; (8007374 <TIM_Base_SetConfig+0x138>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_Base_SetConfig+0x40>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a40      	ldr	r2, [pc, #256]	; (8007378 <TIM_Base_SetConfig+0x13c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d108      	bne.n	800728e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a35      	ldr	r2, [pc, #212]	; (8007368 <TIM_Base_SetConfig+0x12c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d02b      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729c:	d027      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a32      	ldr	r2, [pc, #200]	; (800736c <TIM_Base_SetConfig+0x130>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d023      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a31      	ldr	r2, [pc, #196]	; (8007370 <TIM_Base_SetConfig+0x134>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01f      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a30      	ldr	r2, [pc, #192]	; (8007374 <TIM_Base_SetConfig+0x138>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01b      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <TIM_Base_SetConfig+0x13c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d017      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2e      	ldr	r2, [pc, #184]	; (800737c <TIM_Base_SetConfig+0x140>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a2d      	ldr	r2, [pc, #180]	; (8007380 <TIM_Base_SetConfig+0x144>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00f      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a2c      	ldr	r2, [pc, #176]	; (8007384 <TIM_Base_SetConfig+0x148>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00b      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a2b      	ldr	r2, [pc, #172]	; (8007388 <TIM_Base_SetConfig+0x14c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d007      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a2a      	ldr	r2, [pc, #168]	; (800738c <TIM_Base_SetConfig+0x150>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_Base_SetConfig+0xb2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a29      	ldr	r2, [pc, #164]	; (8007390 <TIM_Base_SetConfig+0x154>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a10      	ldr	r2, [pc, #64]	; (8007368 <TIM_Base_SetConfig+0x12c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <TIM_Base_SetConfig+0xf8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a12      	ldr	r2, [pc, #72]	; (8007378 <TIM_Base_SetConfig+0x13c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d103      	bne.n	800733c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b01      	cmp	r3, #1
 800734c:	d105      	bne.n	800735a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f023 0201 	bic.w	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	611a      	str	r2, [r3, #16]
  }
}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40010000 	.word	0x40010000
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800
 8007374:	40000c00 	.word	0x40000c00
 8007378:	40010400 	.word	0x40010400
 800737c:	40014000 	.word	0x40014000
 8007380:	40014400 	.word	0x40014400
 8007384:	40014800 	.word	0x40014800
 8007388:	40001800 	.word	0x40001800
 800738c:	40001c00 	.word	0x40001c00
 8007390:	40002000 	.word	0x40002000

08007394 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d123      	bne.n	8007416 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80073d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	6851      	ldr	r1, [r2, #4]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	6892      	ldr	r2, [r2, #8]
 80073e2:	4311      	orrs	r1, r2
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	68d2      	ldr	r2, [r2, #12]
 80073e8:	4311      	orrs	r1, r2
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	6912      	ldr	r2, [r2, #16]
 80073ee:	4311      	orrs	r1, r2
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	6952      	ldr	r2, [r2, #20]
 80073f4:	4311      	orrs	r1, r2
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	6992      	ldr	r2, [r2, #24]
 80073fa:	4311      	orrs	r1, r2
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	69d2      	ldr	r2, [r2, #28]
 8007400:	4311      	orrs	r1, r2
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	6a12      	ldr	r2, [r2, #32]
 8007406:	4311      	orrs	r1, r2
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800740c:	430a      	orrs	r2, r1
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e028      	b.n	8007468 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	69d9      	ldr	r1, [r3, #28]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	4319      	orrs	r1, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	430b      	orrs	r3, r1
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800743c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	6851      	ldr	r1, [r2, #4]
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	6892      	ldr	r2, [r2, #8]
 8007448:	4311      	orrs	r1, r2
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	68d2      	ldr	r2, [r2, #12]
 800744e:	4311      	orrs	r1, r2
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	6912      	ldr	r2, [r2, #16]
 8007454:	4311      	orrs	r1, r2
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	6952      	ldr	r2, [r2, #20]
 800745a:	4311      	orrs	r1, r2
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	6992      	ldr	r2, [r2, #24]
 8007460:	430a      	orrs	r2, r1
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d128      	bne.n	80074da <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	1e59      	subs	r1, r3, #1
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	3b01      	subs	r3, #1
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	4319      	orrs	r1, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	4319      	orrs	r1, r3
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	031b      	lsls	r3, r3, #12
 80074b2:	4319      	orrs	r1, r3
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	4319      	orrs	r1, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	051b      	lsls	r3, r3, #20
 80074c6:	4319      	orrs	r1, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	061b      	lsls	r3, r3, #24
 80074d0:	430b      	orrs	r3, r1
 80074d2:	431a      	orrs	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	609a      	str	r2, [r3, #8]
 80074d8:	e02f      	b.n	800753a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	68d2      	ldr	r2, [r2, #12]
 80074ea:	3a01      	subs	r2, #1
 80074ec:	0311      	lsls	r1, r2, #12
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	6952      	ldr	r2, [r2, #20]
 80074f2:	3a01      	subs	r2, #1
 80074f4:	0512      	lsls	r2, r2, #20
 80074f6:	430a      	orrs	r2, r1
 80074f8:	431a      	orrs	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	1e59      	subs	r1, r3, #1
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	3b01      	subs	r3, #1
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	4319      	orrs	r1, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	3b01      	subs	r3, #1
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	4319      	orrs	r1, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	3b01      	subs	r3, #1
 8007526:	041b      	lsls	r3, r3, #16
 8007528:	4319      	orrs	r1, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	3b01      	subs	r3, #1
 8007530:	061b      	lsls	r3, r3, #24
 8007532:	430b      	orrs	r3, r1
 8007534:	431a      	orrs	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	0d9b      	lsrs	r3, r3, #22
 800755e:	059b      	lsls	r3, r3, #22
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	6811      	ldr	r1, [r2, #0]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	6852      	ldr	r2, [r2, #4]
 8007568:	4311      	orrs	r1, r2
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	6892      	ldr	r2, [r2, #8]
 800756e:	3a01      	subs	r2, #1
 8007570:	0152      	lsls	r2, r2, #5
 8007572:	4311      	orrs	r1, r2
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	68d2      	ldr	r2, [r2, #12]
 8007578:	0252      	lsls	r2, r2, #9
 800757a:	430a      	orrs	r2, r1
 800757c:	431a      	orrs	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8007582:	f7fb faf1 	bl	8002b68 <HAL_GetTick>
 8007586:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007588:	e010      	b.n	80075ac <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d00c      	beq.n	80075ac <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <FMC_SDRAM_SendCommand+0x60>
 8007598:	f7fb fae6 	bl	8002b68 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d201      	bcs.n	80075ac <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e006      	b.n	80075ba <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d0e8      	beq.n	800758a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80075d4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	0052      	lsls	r2, r2, #1
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075f0:	b084      	sub	sp, #16
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	f107 001c 	add.w	r0, r7, #28
 80075fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007602:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007606:	2b01      	cmp	r3, #1
 8007608:	d123      	bne.n	8007652 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800761e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007636:	2b01      	cmp	r3, #1
 8007638:	d105      	bne.n	8007646 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 fae2 	bl	8008c10 <USB_CoreReset>
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]
 8007650:	e01b      	b.n	800768a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fad6 	bl	8008c10 <USB_CoreReset>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007668:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800766c:	2b00      	cmp	r3, #0
 800766e:	d106      	bne.n	800767e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	639a      	str	r2, [r3, #56]	; 0x38
 800767c:	e005      	b.n	800768a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800768a:	7fbb      	ldrb	r3, [r7, #30]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10b      	bne.n	80076a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f043 0206 	orr.w	r2, r3, #6
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f043 0220 	orr.w	r2, r3, #32
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b4:	b004      	add	sp, #16
 80076b6:	4770      	bx	lr

080076b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	4613      	mov	r3, r2
 80076c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d165      	bne.n	8007798 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4a41      	ldr	r2, [pc, #260]	; (80077d4 <USB_SetTurnaroundTime+0x11c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d906      	bls.n	80076e2 <USB_SetTurnaroundTime+0x2a>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4a40      	ldr	r2, [pc, #256]	; (80077d8 <USB_SetTurnaroundTime+0x120>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d202      	bcs.n	80076e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076dc:	230f      	movs	r3, #15
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	e062      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	4a3c      	ldr	r2, [pc, #240]	; (80077d8 <USB_SetTurnaroundTime+0x120>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d306      	bcc.n	80076f8 <USB_SetTurnaroundTime+0x40>
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	4a3b      	ldr	r2, [pc, #236]	; (80077dc <USB_SetTurnaroundTime+0x124>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d202      	bcs.n	80076f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076f2:	230e      	movs	r3, #14
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e057      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4a38      	ldr	r2, [pc, #224]	; (80077dc <USB_SetTurnaroundTime+0x124>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d306      	bcc.n	800770e <USB_SetTurnaroundTime+0x56>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4a37      	ldr	r2, [pc, #220]	; (80077e0 <USB_SetTurnaroundTime+0x128>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d202      	bcs.n	800770e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007708:	230d      	movs	r3, #13
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	e04c      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	4a33      	ldr	r2, [pc, #204]	; (80077e0 <USB_SetTurnaroundTime+0x128>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d306      	bcc.n	8007724 <USB_SetTurnaroundTime+0x6c>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4a32      	ldr	r2, [pc, #200]	; (80077e4 <USB_SetTurnaroundTime+0x12c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d802      	bhi.n	8007724 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800771e:	230c      	movs	r3, #12
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	e041      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4a2f      	ldr	r2, [pc, #188]	; (80077e4 <USB_SetTurnaroundTime+0x12c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d906      	bls.n	800773a <USB_SetTurnaroundTime+0x82>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4a2e      	ldr	r2, [pc, #184]	; (80077e8 <USB_SetTurnaroundTime+0x130>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d802      	bhi.n	800773a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007734:	230b      	movs	r3, #11
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e036      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	4a2a      	ldr	r2, [pc, #168]	; (80077e8 <USB_SetTurnaroundTime+0x130>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d906      	bls.n	8007750 <USB_SetTurnaroundTime+0x98>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4a29      	ldr	r2, [pc, #164]	; (80077ec <USB_SetTurnaroundTime+0x134>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d802      	bhi.n	8007750 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800774a:	230a      	movs	r3, #10
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	e02b      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4a26      	ldr	r2, [pc, #152]	; (80077ec <USB_SetTurnaroundTime+0x134>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d906      	bls.n	8007766 <USB_SetTurnaroundTime+0xae>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4a25      	ldr	r2, [pc, #148]	; (80077f0 <USB_SetTurnaroundTime+0x138>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d202      	bcs.n	8007766 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007760:	2309      	movs	r3, #9
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	e020      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4a21      	ldr	r2, [pc, #132]	; (80077f0 <USB_SetTurnaroundTime+0x138>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d306      	bcc.n	800777c <USB_SetTurnaroundTime+0xc4>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4a20      	ldr	r2, [pc, #128]	; (80077f4 <USB_SetTurnaroundTime+0x13c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d802      	bhi.n	800777c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007776:	2308      	movs	r3, #8
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	e015      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4a1d      	ldr	r2, [pc, #116]	; (80077f4 <USB_SetTurnaroundTime+0x13c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d906      	bls.n	8007792 <USB_SetTurnaroundTime+0xda>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4a1c      	ldr	r2, [pc, #112]	; (80077f8 <USB_SetTurnaroundTime+0x140>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d202      	bcs.n	8007792 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800778c:	2307      	movs	r3, #7
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e00a      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007792:	2306      	movs	r3, #6
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	e007      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007798:	79fb      	ldrb	r3, [r7, #7]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800779e:	2309      	movs	r3, #9
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	e001      	b.n	80077a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077a4:	2309      	movs	r3, #9
 80077a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	029b      	lsls	r3, r3, #10
 80077bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	371c      	adds	r7, #28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	00d8acbf 	.word	0x00d8acbf
 80077d8:	00e4e1c0 	.word	0x00e4e1c0
 80077dc:	00f42400 	.word	0x00f42400
 80077e0:	01067380 	.word	0x01067380
 80077e4:	011a499f 	.word	0x011a499f
 80077e8:	01312cff 	.word	0x01312cff
 80077ec:	014ca43f 	.word	0x014ca43f
 80077f0:	016e3600 	.word	0x016e3600
 80077f4:	01a6ab1f 	.word	0x01a6ab1f
 80077f8:	01e84800 	.word	0x01e84800

080077fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f043 0201 	orr.w	r2, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f023 0201 	bic.w	r2, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d115      	bne.n	800788e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800786e:	200a      	movs	r0, #10
 8007870:	f7fb f986 	bl	8002b80 <HAL_Delay>
      ms += 10U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	330a      	adds	r3, #10
 8007878:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 f939 	bl	8008af2 <USB_GetMode>
 8007880:	4603      	mov	r3, r0
 8007882:	2b01      	cmp	r3, #1
 8007884:	d01e      	beq.n	80078c4 <USB_SetCurrentMode+0x84>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2bc7      	cmp	r3, #199	; 0xc7
 800788a:	d9f0      	bls.n	800786e <USB_SetCurrentMode+0x2e>
 800788c:	e01a      	b.n	80078c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d115      	bne.n	80078c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078a0:	200a      	movs	r0, #10
 80078a2:	f7fb f96d 	bl	8002b80 <HAL_Delay>
      ms += 10U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	330a      	adds	r3, #10
 80078aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 f920 	bl	8008af2 <USB_GetMode>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <USB_SetCurrentMode+0x84>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2bc7      	cmp	r3, #199	; 0xc7
 80078bc:	d9f0      	bls.n	80078a0 <USB_SetCurrentMode+0x60>
 80078be:	e001      	b.n	80078c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e005      	b.n	80078d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2bc8      	cmp	r3, #200	; 0xc8
 80078c8:	d101      	bne.n	80078ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078d8:	b084      	sub	sp, #16
 80078da:	b580      	push	{r7, lr}
 80078dc:	b086      	sub	sp, #24
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078f2:	2300      	movs	r3, #0
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	e009      	b.n	800790c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	3340      	adds	r3, #64	; 0x40
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	2200      	movs	r2, #0
 8007904:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	3301      	adds	r3, #1
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2b0e      	cmp	r3, #14
 8007910:	d9f2      	bls.n	80078f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007912:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007916:	2b00      	cmp	r3, #0
 8007918:	d11c      	bne.n	8007954 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007928:	f043 0302 	orr.w	r3, r3, #2
 800792c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
 8007952:	e00b      	b.n	800796c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007972:	461a      	mov	r2, r3
 8007974:	2300      	movs	r3, #0
 8007976:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007978:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10d      	bne.n	800799c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007988:	2100      	movs	r1, #0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f968 	bl	8007c60 <USB_SetDevSpeed>
 8007990:	e008      	b.n	80079a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007992:	2101      	movs	r1, #1
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f963 	bl	8007c60 <USB_SetDevSpeed>
 800799a:	e003      	b.n	80079a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800799c:	2103      	movs	r1, #3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f95e 	bl	8007c60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079a4:	2110      	movs	r1, #16
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8fa 	bl	8007ba0 <USB_FlushTxFifo>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f924 	bl	8007c04 <USB_FlushRxFifo>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079cc:	461a      	mov	r2, r3
 80079ce:	2300      	movs	r3, #0
 80079d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d8:	461a      	mov	r2, r3
 80079da:	2300      	movs	r3, #0
 80079dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e4:	461a      	mov	r2, r3
 80079e6:	2300      	movs	r3, #0
 80079e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ea:	2300      	movs	r3, #0
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	e043      	b.n	8007a78 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a06:	d118      	bne.n	8007a3a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	e013      	b.n	8007a4c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a30:	461a      	mov	r2, r3
 8007a32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	e008      	b.n	8007a4c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a46:	461a      	mov	r2, r3
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a58:	461a      	mov	r2, r3
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	3301      	adds	r3, #1
 8007a76:	613b      	str	r3, [r7, #16]
 8007a78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d3b5      	bcc.n	80079f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a84:	2300      	movs	r3, #0
 8007a86:	613b      	str	r3, [r7, #16]
 8007a88:	e043      	b.n	8007b12 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aa0:	d118      	bne.n	8007ad4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	e013      	b.n	8007ae6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	461a      	mov	r2, r3
 8007acc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	e008      	b.n	8007ae6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af2:	461a      	mov	r2, r3
 8007af4:	2300      	movs	r3, #0
 8007af6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b04:	461a      	mov	r2, r3
 8007b06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b16:	461a      	mov	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d3b5      	bcc.n	8007a8a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f043 0210 	orr.w	r2, r3, #16
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	4b10      	ldr	r3, [pc, #64]	; (8007b9c <USB_DevInit+0x2c4>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b60:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f043 0208 	orr.w	r2, r3, #8
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d107      	bne.n	8007b8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b84:	f043 0304 	orr.w	r3, r3, #4
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b98:	b004      	add	sp, #16
 8007b9a:	4770      	bx	lr
 8007b9c:	803c3800 	.word	0x803c3800

08007ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007bba:	d901      	bls.n	8007bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e01b      	b.n	8007bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	daf2      	bge.n	8007bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	019b      	lsls	r3, r3, #6
 8007bd0:	f043 0220 	orr.w	r2, r3, #32
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007be4:	d901      	bls.n	8007bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e006      	b.n	8007bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	d0f0      	beq.n	8007bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c1c:	d901      	bls.n	8007c22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e018      	b.n	8007c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	daf2      	bge.n	8007c10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2210      	movs	r2, #16
 8007c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3301      	adds	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c40:	d901      	bls.n	8007c46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e006      	b.n	8007c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d0f0      	beq.n	8007c34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c80:	4313      	orrs	r3, r2
 8007c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b087      	sub	sp, #28
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 0306 	and.w	r3, r3, #6
 8007caa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d102      	bne.n	8007cb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	75fb      	strb	r3, [r7, #23]
 8007cb6:	e00a      	b.n	8007cce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d002      	beq.n	8007cc4 <USB_GetDevSpeed+0x32>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b06      	cmp	r3, #6
 8007cc2:	d102      	bne.n	8007cca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	75fb      	strb	r3, [r7, #23]
 8007cc8:	e001      	b.n	8007cce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cca:	230f      	movs	r3, #15
 8007ccc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d13a      	bne.n	8007d6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfe:	69da      	ldr	r2, [r3, #28]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f003 030f 	and.w	r3, r3, #15
 8007d08:	2101      	movs	r1, #1
 8007d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	68f9      	ldr	r1, [r7, #12]
 8007d12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d155      	bne.n	8007ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	791b      	ldrb	r3, [r3, #4]
 8007d4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	059b      	lsls	r3, r3, #22
 8007d52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d54:	4313      	orrs	r3, r2
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	e036      	b.n	8007ddc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d74:	69da      	ldr	r2, [r3, #28]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	2101      	movs	r1, #1
 8007d80:	fa01 f303 	lsl.w	r3, r1, r3
 8007d84:	041b      	lsls	r3, r3, #16
 8007d86:	68f9      	ldr	r1, [r7, #12]
 8007d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d11a      	bne.n	8007ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	791b      	ldrb	r3, [r3, #4]
 8007dc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
	...

08007dec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d161      	bne.n	8007ecc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1e:	d11f      	bne.n	8007e60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	2101      	movs	r1, #1
 8007e72:	fa01 f303 	lsl.w	r3, r1, r3
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e80:	4013      	ands	r3, r2
 8007e82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8a:	69da      	ldr	r2, [r3, #28]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	2101      	movs	r1, #1
 8007e96:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	0159      	lsls	r1, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	440b      	add	r3, r1
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4b35      	ldr	r3, [pc, #212]	; (8007f9c <USB_DeactivateEndpoint+0x1b0>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	600b      	str	r3, [r1, #0]
 8007eca:	e060      	b.n	8007f8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ee2:	d11f      	bne.n	8007f24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007efe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	2101      	movs	r1, #1
 8007f36:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3a:	041b      	lsls	r3, r3, #16
 8007f3c:	43db      	mvns	r3, r3
 8007f3e:	68f9      	ldr	r1, [r7, #12]
 8007f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f44:	4013      	ands	r3, r2
 8007f46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	2101      	movs	r1, #1
 8007f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5e:	041b      	lsls	r3, r3, #16
 8007f60:	43db      	mvns	r3, r3
 8007f62:	68f9      	ldr	r1, [r7, #12]
 8007f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f68:	4013      	ands	r3, r2
 8007f6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	0159      	lsls	r1, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	440b      	add	r3, r1
 8007f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f86:	4619      	mov	r1, r3
 8007f88:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <USB_DeactivateEndpoint+0x1b4>)
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	ec337800 	.word	0xec337800
 8007fa0:	eff37800 	.word	0xeff37800

08007fa4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	f040 817a 	bne.w	80082ba <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d132      	bne.n	8008034 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	0151      	lsls	r1, r2, #5
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	440a      	add	r2, r1
 8007fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	69fa      	ldr	r2, [r7, #28]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	69fa      	ldr	r2, [r7, #28]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802c:	0cdb      	lsrs	r3, r3, #19
 800802e:	04db      	lsls	r3, r3, #19
 8008030:	6113      	str	r3, [r2, #16]
 8008032:	e092      	b.n	800815a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	0151      	lsls	r1, r2, #5
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	440a      	add	r2, r1
 800804a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800804e:	0cdb      	lsrs	r3, r3, #19
 8008050:	04db      	lsls	r3, r3, #19
 8008052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	0151      	lsls	r1, r2, #5
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	440a      	add	r2, r1
 800806a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008072:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008076:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d11a      	bne.n	80080b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	d903      	bls.n	8008092 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080b0:	6113      	str	r3, [r2, #16]
 80080b2:	e01b      	b.n	80080ec <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6919      	ldr	r1, [r3, #16]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	440b      	add	r3, r1
 80080cc:	1e59      	subs	r1, r3, #1
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80080d6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080d8:	4ba2      	ldr	r3, [pc, #648]	; (8008364 <USB_EPStartXfer+0x3c0>)
 80080da:	400b      	ands	r3, r1
 80080dc:	69b9      	ldr	r1, [r7, #24]
 80080de:	0148      	lsls	r0, r1, #5
 80080e0:	69f9      	ldr	r1, [r7, #28]
 80080e2:	4401      	add	r1, r0
 80080e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080e8:	4313      	orrs	r3, r2
 80080ea:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f8:	691a      	ldr	r2, [r3, #16]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008102:	69b9      	ldr	r1, [r7, #24]
 8008104:	0148      	lsls	r0, r1, #5
 8008106:	69f9      	ldr	r1, [r7, #28]
 8008108:	4401      	add	r1, r0
 800810a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800810e:	4313      	orrs	r3, r2
 8008110:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	791b      	ldrb	r3, [r3, #4]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d11f      	bne.n	800815a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	69fa      	ldr	r2, [r7, #28]
 800812e:	440a      	add	r2, r1
 8008130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008134:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008138:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	0151      	lsls	r1, r2, #5
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	440a      	add	r2, r1
 8008150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008158:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d14b      	bne.n	80081f8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	461a      	mov	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	791b      	ldrb	r3, [r3, #4]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d128      	bne.n	80081d6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008190:	2b00      	cmp	r3, #0
 8008192:	d110      	bne.n	80081b6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	0151      	lsls	r1, r2, #5
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	440a      	add	r2, r1
 80081aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	e00f      	b.n	80081d6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	0151      	lsls	r1, r2, #5
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	440a      	add	r2, r1
 80081cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	0151      	lsls	r1, r2, #5
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	440a      	add	r2, r1
 80081ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	e165      	b.n	80084c4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	0151      	lsls	r1, r2, #5
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	440a      	add	r2, r1
 800820e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008212:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008216:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	791b      	ldrb	r3, [r3, #4]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d015      	beq.n	800824c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 814d 	beq.w	80084c4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	2101      	movs	r1, #1
 800823c:	fa01 f303 	lsl.w	r3, r1, r3
 8008240:	69f9      	ldr	r1, [r7, #28]
 8008242:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008246:	4313      	orrs	r3, r2
 8008248:	634b      	str	r3, [r1, #52]	; 0x34
 800824a:	e13b      	b.n	80084c4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008258:	2b00      	cmp	r3, #0
 800825a:	d110      	bne.n	800827e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	0151      	lsls	r1, r2, #5
 800826e:	69fa      	ldr	r2, [r7, #28]
 8008270:	440a      	add	r2, r1
 8008272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	e00f      	b.n	800829e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	0151      	lsls	r1, r2, #5
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	440a      	add	r2, r1
 8008294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800829c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	68d9      	ldr	r1, [r3, #12]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	781a      	ldrb	r2, [r3, #0]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	b298      	uxth	r0, r3
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	4603      	mov	r3, r0
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 f9b8 	bl	8008628 <USB_WritePacket>
 80082b8:	e104      	b.n	80084c4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	0151      	lsls	r1, r2, #5
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	440a      	add	r2, r1
 80082d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d4:	0cdb      	lsrs	r3, r3, #19
 80082d6:	04db      	lsls	r3, r3, #19
 80082d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	0151      	lsls	r1, r2, #5
 80082ec:	69fa      	ldr	r2, [r7, #28]
 80082ee:	440a      	add	r2, r1
 80082f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082fc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d131      	bne.n	8008368 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008332:	69b9      	ldr	r1, [r7, #24]
 8008334:	0148      	lsls	r0, r1, #5
 8008336:	69f9      	ldr	r1, [r7, #28]
 8008338:	4401      	add	r1, r0
 800833a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800833e:	4313      	orrs	r3, r2
 8008340:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	440a      	add	r2, r1
 8008358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800835c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008360:	6113      	str	r3, [r2, #16]
 8008362:	e061      	b.n	8008428 <USB_EPStartXfer+0x484>
 8008364:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d123      	bne.n	80083b8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008386:	69b9      	ldr	r1, [r7, #24]
 8008388:	0148      	lsls	r0, r1, #5
 800838a:	69f9      	ldr	r1, [r7, #28]
 800838c:	4401      	add	r1, r0
 800838e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008392:	4313      	orrs	r3, r2
 8008394:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	0151      	lsls	r1, r2, #5
 80083a8:	69fa      	ldr	r2, [r7, #28]
 80083aa:	440a      	add	r2, r1
 80083ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083b4:	6113      	str	r3, [r2, #16]
 80083b6:	e037      	b.n	8008428 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	691a      	ldr	r2, [r3, #16]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	4413      	add	r3, r2
 80083c2:	1e5a      	subs	r2, r3, #1
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083cc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	8afa      	ldrh	r2, [r7, #22]
 80083d4:	fb03 f202 	mul.w	r2, r3, r2
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e8:	691a      	ldr	r2, [r3, #16]
 80083ea:	8afb      	ldrh	r3, [r7, #22]
 80083ec:	04d9      	lsls	r1, r3, #19
 80083ee:	4b38      	ldr	r3, [pc, #224]	; (80084d0 <USB_EPStartXfer+0x52c>)
 80083f0:	400b      	ands	r3, r1
 80083f2:	69b9      	ldr	r1, [r7, #24]
 80083f4:	0148      	lsls	r0, r1, #5
 80083f6:	69f9      	ldr	r1, [r7, #28]
 80083f8:	4401      	add	r1, r0
 80083fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083fe:	4313      	orrs	r3, r2
 8008400:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840e:	691a      	ldr	r2, [r3, #16]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008418:	69b9      	ldr	r1, [r7, #24]
 800841a:	0148      	lsls	r0, r1, #5
 800841c:	69f9      	ldr	r1, [r7, #28]
 800841e:	4401      	add	r1, r0
 8008420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008424:	4313      	orrs	r3, r2
 8008426:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d10d      	bne.n	800844a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	68d9      	ldr	r1, [r3, #12]
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008446:	460a      	mov	r2, r1
 8008448:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	791b      	ldrb	r3, [r3, #4]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d128      	bne.n	80084a4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845e:	2b00      	cmp	r3, #0
 8008460:	d110      	bne.n	8008484 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	69fa      	ldr	r2, [r7, #28]
 8008476:	440a      	add	r2, r1
 8008478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800847c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	e00f      	b.n	80084a4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	440a      	add	r2, r1
 800849a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800849e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	0151      	lsls	r1, r2, #5
 80084b6:	69fa      	ldr	r2, [r7, #28]
 80084b8:	440a      	add	r2, r1
 80084ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	1ff80000 	.word	0x1ff80000

080084d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d14a      	bne.n	8008588 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800850a:	f040 8086 	bne.w	800861a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	7812      	ldrb	r2, [r2, #0]
 8008522:	0151      	lsls	r1, r2, #5
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	440a      	add	r2, r1
 8008528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008530:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	7812      	ldrb	r2, [r2, #0]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	440a      	add	r2, r1
 800854c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008554:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008562:	4293      	cmp	r3, r2
 8008564:	d902      	bls.n	800856c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	75fb      	strb	r3, [r7, #23]
          break;
 800856a:	e056      	b.n	800861a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008584:	d0e7      	beq.n	8008556 <USB_EPStopXfer+0x82>
 8008586:	e048      	b.n	800861a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800859c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085a0:	d13b      	bne.n	800861a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	7812      	ldrb	r2, [r2, #0]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	7812      	ldrb	r2, [r2, #0]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	3301      	adds	r3, #1
 80085ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d902      	bls.n	8008600 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	75fb      	strb	r3, [r7, #23]
          break;
 80085fe:	e00c      	b.n	800861a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	4413      	add	r3, r2
 800860a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008618:	d0e7      	beq.n	80085ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800861a:	7dfb      	ldrb	r3, [r7, #23]
}
 800861c:	4618      	mov	r0, r3
 800861e:	371c      	adds	r7, #28
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008628:	b480      	push	{r7}
 800862a:	b089      	sub	sp, #36	; 0x24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4611      	mov	r1, r2
 8008634:	461a      	mov	r2, r3
 8008636:	460b      	mov	r3, r1
 8008638:	71fb      	strb	r3, [r7, #7]
 800863a:	4613      	mov	r3, r2
 800863c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d123      	bne.n	8008696 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800864e:	88bb      	ldrh	r3, [r7, #4]
 8008650:	3303      	adds	r3, #3
 8008652:	089b      	lsrs	r3, r3, #2
 8008654:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008656:	2300      	movs	r3, #0
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	e018      	b.n	800868e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	031a      	lsls	r2, r3, #12
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	4413      	add	r3, r2
 8008664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008668:	461a      	mov	r2, r3
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	3301      	adds	r3, #1
 8008674:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	3301      	adds	r3, #1
 800867a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	3301      	adds	r3, #1
 8008680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	3301      	adds	r3, #1
 8008686:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	3301      	adds	r3, #1
 800868c:	61bb      	str	r3, [r7, #24]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	429a      	cmp	r2, r3
 8008694:	d3e2      	bcc.n	800865c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3724      	adds	r7, #36	; 0x24
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b08b      	sub	sp, #44	; 0x2c
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80086ba:	88fb      	ldrh	r3, [r7, #6]
 80086bc:	089b      	lsrs	r3, r3, #2
 80086be:	b29b      	uxth	r3, r3
 80086c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80086c2:	88fb      	ldrh	r3, [r7, #6]
 80086c4:	f003 0303 	and.w	r3, r3, #3
 80086c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80086ca:	2300      	movs	r3, #0
 80086cc:	623b      	str	r3, [r7, #32]
 80086ce:	e014      	b.n	80086fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	601a      	str	r2, [r3, #0]
    pDest++;
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	3301      	adds	r3, #1
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	3301      	adds	r3, #1
 80086e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ea:	3301      	adds	r3, #1
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	3301      	adds	r3, #1
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	3301      	adds	r3, #1
 80086f8:	623b      	str	r3, [r7, #32]
 80086fa:	6a3a      	ldr	r2, [r7, #32]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d3e6      	bcc.n	80086d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008702:	8bfb      	ldrh	r3, [r7, #30]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01e      	beq.n	8008746 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008712:	461a      	mov	r2, r3
 8008714:	f107 0310 	add.w	r3, r7, #16
 8008718:	6812      	ldr	r2, [r2, #0]
 800871a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	00db      	lsls	r3, r3, #3
 8008724:	fa22 f303 	lsr.w	r3, r2, r3
 8008728:	b2da      	uxtb	r2, r3
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	701a      	strb	r2, [r3, #0]
      i++;
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	3301      	adds	r3, #1
 8008732:	623b      	str	r3, [r7, #32]
      pDest++;
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	3301      	adds	r3, #1
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800873a:	8bfb      	ldrh	r3, [r7, #30]
 800873c:	3b01      	subs	r3, #1
 800873e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008740:	8bfb      	ldrh	r3, [r7, #30]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1ea      	bne.n	800871c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008748:	4618      	mov	r0, r3
 800874a:	372c      	adds	r7, #44	; 0x2c
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	785b      	ldrb	r3, [r3, #1]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d12c      	bne.n	80087ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	db12      	blt.n	80087a8 <USB_EPSetStall+0x54>
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00f      	beq.n	80087a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	0151      	lsls	r1, r2, #5
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	440a      	add	r2, r1
 800879e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	0151      	lsls	r1, r2, #5
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	440a      	add	r2, r1
 80087be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	e02b      	b.n	8008822 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	db12      	blt.n	8008802 <USB_EPSetStall+0xae>
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00f      	beq.n	8008802 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008800:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	0151      	lsls	r1, r2, #5
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	440a      	add	r2, r1
 8008818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800881c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008820:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	785b      	ldrb	r3, [r3, #1]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d128      	bne.n	800889e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	440a      	add	r2, r1
 8008862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008866:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800886a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	791b      	ldrb	r3, [r3, #4]
 8008870:	2b03      	cmp	r3, #3
 8008872:	d003      	beq.n	800887c <USB_EPClearStall+0x4c>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	791b      	ldrb	r3, [r3, #4]
 8008878:	2b02      	cmp	r3, #2
 800887a:	d138      	bne.n	80088ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	e027      	b.n	80088ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	0151      	lsls	r1, r2, #5
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	440a      	add	r2, r1
 80088b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	791b      	ldrb	r3, [r3, #4]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d003      	beq.n	80088ce <USB_EPClearStall+0x9e>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	791b      	ldrb	r3, [r3, #4]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d10f      	bne.n	80088ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	0151      	lsls	r1, r2, #5
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	440a      	add	r2, r1
 80088e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800891a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800891e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008930:	68f9      	ldr	r1, [r7, #12]
 8008932:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008936:	4313      	orrs	r3, r2
 8008938:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008962:	f023 0303 	bic.w	r3, r3, #3
 8008966:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008976:	f023 0302 	bic.w	r3, r3, #2
 800897a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800898a:	b480      	push	{r7}
 800898c:	b085      	sub	sp, #20
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089a4:	f023 0303 	bic.w	r3, r3, #3
 80089a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089b8:	f043 0302 	orr.w	r3, r3, #2
 80089bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4013      	ands	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80089e4:	68fb      	ldr	r3, [r7, #12]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	4013      	ands	r3, r2
 8008a14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	0c1b      	lsrs	r3, r3, #16
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b085      	sub	sp, #20
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	4013      	ands	r3, r2
 8008a48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	b29b      	uxth	r3, r3
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b085      	sub	sp, #20
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	4013      	ands	r3, r2
 8008a86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a88:	68bb      	ldr	r3, [r7, #8]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b087      	sub	sp, #28
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	f003 030f 	and.w	r3, r3, #15
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac6:	01db      	lsls	r3, r3, #7
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	371c      	adds	r7, #28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	f003 0301 	and.w	r3, r3, #1
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b085      	sub	sp, #20
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b2c:	f023 0307 	bic.w	r3, r3, #7
 8008b30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	333c      	adds	r3, #60	; 0x3c
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	4a26      	ldr	r2, [pc, #152]	; (8008c0c <USB_EP0_OutStart+0xb8>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d90a      	bls.n	8008b8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b88:	d101      	bne.n	8008b8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e037      	b.n	8008bfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b94:	461a      	mov	r2, r3
 8008b96:	2300      	movs	r3, #0
 8008b98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bbc:	f043 0318 	orr.w	r3, r3, #24
 8008bc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008bd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008bd6:	7afb      	ldrb	r3, [r7, #11]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d10f      	bne.n	8008bfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008bfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	371c      	adds	r7, #28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	4f54300a 	.word	0x4f54300a

08008c10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c28:	d901      	bls.n	8008c2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e01b      	b.n	8008c66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	daf2      	bge.n	8008c1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	f043 0201 	orr.w	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c52:	d901      	bls.n	8008c58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e006      	b.n	8008c66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d0f0      	beq.n	8008c46 <USB_CoreReset+0x36>

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <__NVIC_SetPriority>:
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6039      	str	r1, [r7, #0]
 8008c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	db0a      	blt.n	8008c9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	490c      	ldr	r1, [pc, #48]	; (8008cc0 <__NVIC_SetPriority+0x4c>)
 8008c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c92:	0112      	lsls	r2, r2, #4
 8008c94:	b2d2      	uxtb	r2, r2
 8008c96:	440b      	add	r3, r1
 8008c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c9c:	e00a      	b.n	8008cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	4908      	ldr	r1, [pc, #32]	; (8008cc4 <__NVIC_SetPriority+0x50>)
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	3b04      	subs	r3, #4
 8008cac:	0112      	lsls	r2, r2, #4
 8008cae:	b2d2      	uxtb	r2, r2
 8008cb0:	440b      	add	r3, r1
 8008cb2:	761a      	strb	r2, [r3, #24]
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	e000e100 	.word	0xe000e100
 8008cc4:	e000ed00 	.word	0xe000ed00

08008cc8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ccc:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <SysTick_Handler+0x1c>)
 8008cce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008cd0:	f002 fb90 	bl	800b3f4 <xTaskGetSchedulerState>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d001      	beq.n	8008cde <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008cda:	f000 fec5 	bl	8009a68 <xPortSysTickHandler>
  }
}
 8008cde:	bf00      	nop
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	e000e010 	.word	0xe000e010

08008ce8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008cec:	2100      	movs	r1, #0
 8008cee:	f06f 0004 	mvn.w	r0, #4
 8008cf2:	f7ff ffbf 	bl	8008c74 <__NVIC_SetPriority>
#endif
}
 8008cf6:	bf00      	nop
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d02:	f3ef 8305 	mrs	r3, IPSR
 8008d06:	603b      	str	r3, [r7, #0]
  return(result);
 8008d08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008d0e:	f06f 0305 	mvn.w	r3, #5
 8008d12:	607b      	str	r3, [r7, #4]
 8008d14:	e00c      	b.n	8008d30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d16:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <osKernelInitialize+0x44>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d105      	bne.n	8008d2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d1e:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <osKernelInitialize+0x44>)
 8008d20:	2201      	movs	r2, #1
 8008d22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	607b      	str	r3, [r7, #4]
 8008d28:	e002      	b.n	8008d30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d30:	687b      	ldr	r3, [r7, #4]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	200004e0 	.word	0x200004e0

08008d44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d4a:	f3ef 8305 	mrs	r3, IPSR
 8008d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8008d50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008d56:	f06f 0305 	mvn.w	r3, #5
 8008d5a:	607b      	str	r3, [r7, #4]
 8008d5c:	e010      	b.n	8008d80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d5e:	4b0b      	ldr	r3, [pc, #44]	; (8008d8c <osKernelStart+0x48>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d109      	bne.n	8008d7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d66:	f7ff ffbf 	bl	8008ce8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d6a:	4b08      	ldr	r3, [pc, #32]	; (8008d8c <osKernelStart+0x48>)
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d70:	f001 fef8 	bl	800ab64 <vTaskStartScheduler>
      stat = osOK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	607b      	str	r3, [r7, #4]
 8008d78:	e002      	b.n	8008d80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d80:	687b      	ldr	r3, [r7, #4]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	200004e0 	.word	0x200004e0

08008d90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af04      	add	r7, sp, #16
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da0:	f3ef 8305 	mrs	r3, IPSR
 8008da4:	617b      	str	r3, [r7, #20]
  return(result);
 8008da6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d17e      	bne.n	8008eaa <osThreadNew+0x11a>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d07b      	beq.n	8008eaa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008db2:	2380      	movs	r3, #128	; 0x80
 8008db4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008db6:	2318      	movs	r3, #24
 8008db8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d045      	beq.n	8008e56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <osThreadNew+0x48>
        name = attr->name;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d008      	beq.n	8008dfe <osThreadNew+0x6e>
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	2b38      	cmp	r3, #56	; 0x38
 8008df0:	d805      	bhi.n	8008dfe <osThreadNew+0x6e>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <osThreadNew+0x72>
        return (NULL);
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e054      	b.n	8008eac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	089b      	lsrs	r3, r3, #2
 8008e10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <osThreadNew+0xa8>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	2b5b      	cmp	r3, #91	; 0x5b
 8008e20:	d90a      	bls.n	8008e38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d006      	beq.n	8008e38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <osThreadNew+0xa8>
        mem = 1;
 8008e32:	2301      	movs	r3, #1
 8008e34:	61bb      	str	r3, [r7, #24]
 8008e36:	e010      	b.n	8008e5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10c      	bne.n	8008e5a <osThreadNew+0xca>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d108      	bne.n	8008e5a <osThreadNew+0xca>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d104      	bne.n	8008e5a <osThreadNew+0xca>
          mem = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61bb      	str	r3, [r7, #24]
 8008e54:	e001      	b.n	8008e5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d110      	bne.n	8008e82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e68:	9202      	str	r2, [sp, #8]
 8008e6a:	9301      	str	r3, [sp, #4]
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	6a3a      	ldr	r2, [r7, #32]
 8008e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f001 fc2c 	bl	800a6d4 <xTaskCreateStatic>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	e013      	b.n	8008eaa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d110      	bne.n	8008eaa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	f107 0310 	add.w	r3, r7, #16
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f001 fc77 	bl	800a78e <xTaskCreate>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d001      	beq.n	8008eaa <osThreadNew+0x11a>
            hTask = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008eaa:	693b      	ldr	r3, [r7, #16]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3728      	adds	r7, #40	; 0x28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ebc:	f3ef 8305 	mrs	r3, IPSR
 8008ec0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <osDelay+0x1c>
    stat = osErrorISR;
 8008ec8:	f06f 0305 	mvn.w	r3, #5
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	e007      	b.n	8008ee0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fe0e 	bl	800aafc <vTaskDelay>
    }
  }

  return (stat);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b08a      	sub	sp, #40	; 0x28
 8008eee:	af02      	add	r7, sp, #8
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008efa:	f3ef 8305 	mrs	r3, IPSR
 8008efe:	613b      	str	r3, [r7, #16]
  return(result);
 8008f00:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d15f      	bne.n	8008fc6 <osMessageQueueNew+0xdc>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d05c      	beq.n	8008fc6 <osMessageQueueNew+0xdc>
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d059      	beq.n	8008fc6 <osMessageQueueNew+0xdc>
    mem = -1;
 8008f12:	f04f 33ff 	mov.w	r3, #4294967295
 8008f16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d029      	beq.n	8008f72 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d012      	beq.n	8008f4c <osMessageQueueNew+0x62>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	2b4f      	cmp	r3, #79	; 0x4f
 8008f2c:	d90e      	bls.n	8008f4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	695a      	ldr	r2, [r3, #20]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	fb01 f303 	mul.w	r3, r1, r3
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d302      	bcc.n	8008f4c <osMessageQueueNew+0x62>
        mem = 1;
 8008f46:	2301      	movs	r3, #1
 8008f48:	61bb      	str	r3, [r7, #24]
 8008f4a:	e014      	b.n	8008f76 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d110      	bne.n	8008f76 <osMessageQueueNew+0x8c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10c      	bne.n	8008f76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d108      	bne.n	8008f76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d104      	bne.n	8008f76 <osMessageQueueNew+0x8c>
          mem = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	61bb      	str	r3, [r7, #24]
 8008f70:	e001      	b.n	8008f76 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d10b      	bne.n	8008f94 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	2100      	movs	r1, #0
 8008f86:	9100      	str	r1, [sp, #0]
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 fe64 	bl	8009c58 <xQueueGenericCreateStatic>
 8008f90:	61f8      	str	r0, [r7, #28]
 8008f92:	e008      	b.n	8008fa6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 fed2 	bl	8009d48 <xQueueGenericCreate>
 8008fa4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00c      	beq.n	8008fc6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <osMessageQueueNew+0xd0>
        name = attr->name;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	e001      	b.n	8008fbe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008fbe:	6979      	ldr	r1, [r7, #20]
 8008fc0:	69f8      	ldr	r0, [r7, #28]
 8008fc2:	f001 fb29 	bl	800a618 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008fc6:	69fb      	ldr	r3, [r7, #28]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3720      	adds	r7, #32
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fe8:	f3ef 8305 	mrs	r3, IPSR
 8008fec:	617b      	str	r3, [r7, #20]
  return(result);
 8008fee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d028      	beq.n	8009046 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <osMessageQueuePut+0x36>
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <osMessageQueuePut+0x36>
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009006:	f06f 0303 	mvn.w	r3, #3
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	e038      	b.n	8009080 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009012:	f107 0210 	add.w	r2, r7, #16
 8009016:	2300      	movs	r3, #0
 8009018:	68b9      	ldr	r1, [r7, #8]
 800901a:	69b8      	ldr	r0, [r7, #24]
 800901c:	f000 fff0 	bl	800a000 <xQueueGenericSendFromISR>
 8009020:	4603      	mov	r3, r0
 8009022:	2b01      	cmp	r3, #1
 8009024:	d003      	beq.n	800902e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009026:	f06f 0302 	mvn.w	r3, #2
 800902a:	61fb      	str	r3, [r7, #28]
 800902c:	e028      	b.n	8009080 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d025      	beq.n	8009080 <osMessageQueuePut+0xb0>
 8009034:	4b15      	ldr	r3, [pc, #84]	; (800908c <osMessageQueuePut+0xbc>)
 8009036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	e01c      	b.n	8009080 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <osMessageQueuePut+0x82>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d103      	bne.n	800905a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009052:	f06f 0303 	mvn.w	r3, #3
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	e012      	b.n	8009080 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800905a:	2300      	movs	r3, #0
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	69b8      	ldr	r0, [r7, #24]
 8009062:	f000 fecf 	bl	8009e04 <xQueueGenericSend>
 8009066:	4603      	mov	r3, r0
 8009068:	2b01      	cmp	r3, #1
 800906a:	d009      	beq.n	8009080 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009072:	f06f 0301 	mvn.w	r3, #1
 8009076:	61fb      	str	r3, [r7, #28]
 8009078:	e002      	b.n	8009080 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800907a:	f06f 0302 	mvn.w	r3, #2
 800907e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009080:	69fb      	ldr	r3, [r7, #28]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	e000ed04 	.word	0xe000ed04

08009090 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090a6:	f3ef 8305 	mrs	r3, IPSR
 80090aa:	617b      	str	r3, [r7, #20]
  return(result);
 80090ac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d028      	beq.n	8009104 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <osMessageQueueGet+0x34>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <osMessageQueueGet+0x34>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80090c4:	f06f 0303 	mvn.w	r3, #3
 80090c8:	61fb      	str	r3, [r7, #28]
 80090ca:	e037      	b.n	800913c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80090cc:	2300      	movs	r3, #0
 80090ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80090d0:	f107 0310 	add.w	r3, r7, #16
 80090d4:	461a      	mov	r2, r3
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	69b8      	ldr	r0, [r7, #24]
 80090da:	f001 f90d 	bl	800a2f8 <xQueueReceiveFromISR>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d003      	beq.n	80090ec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80090e4:	f06f 0302 	mvn.w	r3, #2
 80090e8:	61fb      	str	r3, [r7, #28]
 80090ea:	e027      	b.n	800913c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d024      	beq.n	800913c <osMessageQueueGet+0xac>
 80090f2:	4b15      	ldr	r3, [pc, #84]	; (8009148 <osMessageQueueGet+0xb8>)
 80090f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	e01b      	b.n	800913c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <osMessageQueueGet+0x80>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009110:	f06f 0303 	mvn.w	r3, #3
 8009114:	61fb      	str	r3, [r7, #28]
 8009116:	e011      	b.n	800913c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	69b8      	ldr	r0, [r7, #24]
 800911e:	f001 f80b 	bl	800a138 <xQueueReceive>
 8009122:	4603      	mov	r3, r0
 8009124:	2b01      	cmp	r3, #1
 8009126:	d009      	beq.n	800913c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800912e:	f06f 0301 	mvn.w	r3, #1
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	e002      	b.n	800913c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009136:	f06f 0302 	mvn.w	r3, #2
 800913a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800913c:	69fb      	ldr	r3, [r7, #28]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4a07      	ldr	r2, [pc, #28]	; (8009178 <vApplicationGetIdleTaskMemory+0x2c>)
 800915c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	4a06      	ldr	r2, [pc, #24]	; (800917c <vApplicationGetIdleTaskMemory+0x30>)
 8009162:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2280      	movs	r2, #128	; 0x80
 8009168:	601a      	str	r2, [r3, #0]
}
 800916a:	bf00      	nop
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	200004e4 	.word	0x200004e4
 800917c:	20000540 	.word	0x20000540

08009180 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4a07      	ldr	r2, [pc, #28]	; (80091ac <vApplicationGetTimerTaskMemory+0x2c>)
 8009190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	4a06      	ldr	r2, [pc, #24]	; (80091b0 <vApplicationGetTimerTaskMemory+0x30>)
 8009196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800919e:	601a      	str	r2, [r3, #0]
}
 80091a0:	bf00      	nop
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	20000740 	.word	0x20000740
 80091b0:	2000079c 	.word	0x2000079c

080091b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	; 0x28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091bc:	2300      	movs	r3, #0
 80091be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091c0:	f001 fd36 	bl	800ac30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091c4:	4b5b      	ldr	r3, [pc, #364]	; (8009334 <pvPortMalloc+0x180>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091cc:	f000 f920 	bl	8009410 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091d0:	4b59      	ldr	r3, [pc, #356]	; (8009338 <pvPortMalloc+0x184>)
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4013      	ands	r3, r2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f040 8093 	bne.w	8009304 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01d      	beq.n	8009220 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80091e4:	2208      	movs	r2, #8
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4413      	add	r3, r2
 80091ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d014      	beq.n	8009220 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f023 0307 	bic.w	r3, r3, #7
 80091fc:	3308      	adds	r3, #8
 80091fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f003 0307 	and.w	r3, r3, #7
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d06e      	beq.n	8009304 <pvPortMalloc+0x150>
 8009226:	4b45      	ldr	r3, [pc, #276]	; (800933c <pvPortMalloc+0x188>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	429a      	cmp	r2, r3
 800922e:	d869      	bhi.n	8009304 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009230:	4b43      	ldr	r3, [pc, #268]	; (8009340 <pvPortMalloc+0x18c>)
 8009232:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009234:	4b42      	ldr	r3, [pc, #264]	; (8009340 <pvPortMalloc+0x18c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800923a:	e004      	b.n	8009246 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	429a      	cmp	r2, r3
 800924e:	d903      	bls.n	8009258 <pvPortMalloc+0xa4>
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f1      	bne.n	800923c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009258:	4b36      	ldr	r3, [pc, #216]	; (8009334 <pvPortMalloc+0x180>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925e:	429a      	cmp	r2, r3
 8009260:	d050      	beq.n	8009304 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2208      	movs	r2, #8
 8009268:	4413      	add	r3, r2
 800926a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	1ad2      	subs	r2, r2, r3
 800927c:	2308      	movs	r3, #8
 800927e:	005b      	lsls	r3, r3, #1
 8009280:	429a      	cmp	r2, r3
 8009282:	d91f      	bls.n	80092c4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4413      	add	r3, r2
 800928a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	f003 0307 	and.w	r3, r3, #7
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <pvPortMalloc+0xf8>
	__asm volatile
 8009296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	613b      	str	r3, [r7, #16]
}
 80092a8:	bf00      	nop
 80092aa:	e7fe      	b.n	80092aa <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	1ad2      	subs	r2, r2, r3
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092be:	69b8      	ldr	r0, [r7, #24]
 80092c0:	f000 f908 	bl	80094d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092c4:	4b1d      	ldr	r3, [pc, #116]	; (800933c <pvPortMalloc+0x188>)
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	4a1b      	ldr	r2, [pc, #108]	; (800933c <pvPortMalloc+0x188>)
 80092d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092d2:	4b1a      	ldr	r3, [pc, #104]	; (800933c <pvPortMalloc+0x188>)
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	4b1b      	ldr	r3, [pc, #108]	; (8009344 <pvPortMalloc+0x190>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d203      	bcs.n	80092e6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092de:	4b17      	ldr	r3, [pc, #92]	; (800933c <pvPortMalloc+0x188>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a18      	ldr	r2, [pc, #96]	; (8009344 <pvPortMalloc+0x190>)
 80092e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	4b13      	ldr	r3, [pc, #76]	; (8009338 <pvPortMalloc+0x184>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	431a      	orrs	r2, r3
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092fa:	4b13      	ldr	r3, [pc, #76]	; (8009348 <pvPortMalloc+0x194>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3301      	adds	r3, #1
 8009300:	4a11      	ldr	r2, [pc, #68]	; (8009348 <pvPortMalloc+0x194>)
 8009302:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009304:	f001 fca2 	bl	800ac4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	f003 0307 	and.w	r3, r3, #7
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <pvPortMalloc+0x174>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	60fb      	str	r3, [r7, #12]
}
 8009324:	bf00      	nop
 8009326:	e7fe      	b.n	8009326 <pvPortMalloc+0x172>
	return pvReturn;
 8009328:	69fb      	ldr	r3, [r7, #28]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3728      	adds	r7, #40	; 0x28
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	200047a4 	.word	0x200047a4
 8009338:	200047b8 	.word	0x200047b8
 800933c:	200047a8 	.word	0x200047a8
 8009340:	2000479c 	.word	0x2000479c
 8009344:	200047ac 	.word	0x200047ac
 8009348:	200047b0 	.word	0x200047b0

0800934c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d04d      	beq.n	80093fa <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800935e:	2308      	movs	r3, #8
 8009360:	425b      	negs	r3, r3
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4413      	add	r3, r2
 8009366:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	4b24      	ldr	r3, [pc, #144]	; (8009404 <vPortFree+0xb8>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10a      	bne.n	8009390 <vPortFree+0x44>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	60fb      	str	r3, [r7, #12]
}
 800938c:	bf00      	nop
 800938e:	e7fe      	b.n	800938e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <vPortFree+0x62>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	60bb      	str	r3, [r7, #8]
}
 80093aa:	bf00      	nop
 80093ac:	e7fe      	b.n	80093ac <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	4b14      	ldr	r3, [pc, #80]	; (8009404 <vPortFree+0xb8>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4013      	ands	r3, r2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d01e      	beq.n	80093fa <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d11a      	bne.n	80093fa <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	4b0e      	ldr	r3, [pc, #56]	; (8009404 <vPortFree+0xb8>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	43db      	mvns	r3, r3
 80093ce:	401a      	ands	r2, r3
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093d4:	f001 fc2c 	bl	800ac30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <vPortFree+0xbc>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4413      	add	r3, r2
 80093e2:	4a09      	ldr	r2, [pc, #36]	; (8009408 <vPortFree+0xbc>)
 80093e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093e6:	6938      	ldr	r0, [r7, #16]
 80093e8:	f000 f874 	bl	80094d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093ec:	4b07      	ldr	r3, [pc, #28]	; (800940c <vPortFree+0xc0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3301      	adds	r3, #1
 80093f2:	4a06      	ldr	r2, [pc, #24]	; (800940c <vPortFree+0xc0>)
 80093f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80093f6:	f001 fc29 	bl	800ac4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093fa:	bf00      	nop
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	200047b8 	.word	0x200047b8
 8009408:	200047a8 	.word	0x200047a8
 800940c:	200047b4 	.word	0x200047b4

08009410 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009416:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800941a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800941c:	4b27      	ldr	r3, [pc, #156]	; (80094bc <prvHeapInit+0xac>)
 800941e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00c      	beq.n	8009444 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3307      	adds	r3, #7
 800942e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f023 0307 	bic.w	r3, r3, #7
 8009436:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	4a1f      	ldr	r2, [pc, #124]	; (80094bc <prvHeapInit+0xac>)
 8009440:	4413      	add	r3, r2
 8009442:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009448:	4a1d      	ldr	r2, [pc, #116]	; (80094c0 <prvHeapInit+0xb0>)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800944e:	4b1c      	ldr	r3, [pc, #112]	; (80094c0 <prvHeapInit+0xb0>)
 8009450:	2200      	movs	r2, #0
 8009452:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	4413      	add	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800945c:	2208      	movs	r2, #8
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	1a9b      	subs	r3, r3, r2
 8009462:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0307 	bic.w	r3, r3, #7
 800946a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4a15      	ldr	r2, [pc, #84]	; (80094c4 <prvHeapInit+0xb4>)
 8009470:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009472:	4b14      	ldr	r3, [pc, #80]	; (80094c4 <prvHeapInit+0xb4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2200      	movs	r2, #0
 8009478:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800947a:	4b12      	ldr	r3, [pc, #72]	; (80094c4 <prvHeapInit+0xb4>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	1ad2      	subs	r2, r2, r3
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009490:	4b0c      	ldr	r3, [pc, #48]	; (80094c4 <prvHeapInit+0xb4>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	4a0a      	ldr	r2, [pc, #40]	; (80094c8 <prvHeapInit+0xb8>)
 800949e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	4a09      	ldr	r2, [pc, #36]	; (80094cc <prvHeapInit+0xbc>)
 80094a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094a8:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <prvHeapInit+0xc0>)
 80094aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094ae:	601a      	str	r2, [r3, #0]
}
 80094b0:	bf00      	nop
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	20000b9c 	.word	0x20000b9c
 80094c0:	2000479c 	.word	0x2000479c
 80094c4:	200047a4 	.word	0x200047a4
 80094c8:	200047ac 	.word	0x200047ac
 80094cc:	200047a8 	.word	0x200047a8
 80094d0:	200047b8 	.word	0x200047b8

080094d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094dc:	4b28      	ldr	r3, [pc, #160]	; (8009580 <prvInsertBlockIntoFreeList+0xac>)
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	e002      	b.n	80094e8 <prvInsertBlockIntoFreeList+0x14>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d8f7      	bhi.n	80094e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	4413      	add	r3, r2
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d108      	bne.n	8009516 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	441a      	add	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	441a      	add	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	429a      	cmp	r2, r3
 8009528:	d118      	bne.n	800955c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	4b15      	ldr	r3, [pc, #84]	; (8009584 <prvInsertBlockIntoFreeList+0xb0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d00d      	beq.n	8009552 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	441a      	add	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	e008      	b.n	8009564 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009552:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <prvInsertBlockIntoFreeList+0xb0>)
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	e003      	b.n	8009564 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	429a      	cmp	r2, r3
 800956a:	d002      	beq.n	8009572 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009572:	bf00      	nop
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	2000479c 	.word	0x2000479c
 8009584:	200047a4 	.word	0x200047a4

08009588 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f103 0208 	add.w	r2, r3, #8
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f103 0208 	add.w	r2, r3, #8
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f103 0208 	add.w	r2, r3, #8
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095d6:	bf00      	nop
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095e2:	b480      	push	{r7}
 80095e4:	b085      	sub	sp, #20
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	601a      	str	r2, [r3, #0]
}
 800961e:	bf00      	nop
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800962a:	b480      	push	{r7}
 800962c:	b085      	sub	sp, #20
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009640:	d103      	bne.n	800964a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	e00c      	b.n	8009664 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3308      	adds	r3, #8
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	e002      	b.n	8009658 <vListInsert+0x2e>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	429a      	cmp	r2, r3
 8009662:	d2f6      	bcs.n	8009652 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	601a      	str	r2, [r3, #0]
}
 8009690:	bf00      	nop
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6892      	ldr	r2, [r2, #8]
 80096b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6852      	ldr	r2, [r2, #4]
 80096bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d103      	bne.n	80096d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	689a      	ldr	r2, [r3, #8]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	1e5a      	subs	r2, r3, #1
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3b04      	subs	r3, #4
 8009700:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3b04      	subs	r3, #4
 800970e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f023 0201 	bic.w	r2, r3, #1
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3b04      	subs	r3, #4
 800971e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009720:	4a0c      	ldr	r2, [pc, #48]	; (8009754 <pxPortInitialiseStack+0x64>)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3b14      	subs	r3, #20
 800972a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3b04      	subs	r3, #4
 8009736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f06f 0202 	mvn.w	r2, #2
 800973e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3b20      	subs	r3, #32
 8009744:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009746:	68fb      	ldr	r3, [r7, #12]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	08009759 	.word	0x08009759

08009758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009762:	4b12      	ldr	r3, [pc, #72]	; (80097ac <prvTaskExitError+0x54>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976a:	d00a      	beq.n	8009782 <prvTaskExitError+0x2a>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	60fb      	str	r3, [r7, #12]
}
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <prvTaskExitError+0x28>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	60bb      	str	r3, [r7, #8]
}
 8009794:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009796:	bf00      	nop
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0fc      	beq.n	8009798 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	20000094 	.word	0x20000094

080097b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <pxCurrentTCBConst2>)
 80097b2:	6819      	ldr	r1, [r3, #0]
 80097b4:	6808      	ldr	r0, [r1, #0]
 80097b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	f380 8809 	msr	PSP, r0
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f380 8811 	msr	BASEPRI, r0
 80097ca:	4770      	bx	lr
 80097cc:	f3af 8000 	nop.w

080097d0 <pxCurrentTCBConst2>:
 80097d0:	20004804 	.word	0x20004804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop

080097d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097d8:	4808      	ldr	r0, [pc, #32]	; (80097fc <prvPortStartFirstTask+0x24>)
 80097da:	6800      	ldr	r0, [r0, #0]
 80097dc:	6800      	ldr	r0, [r0, #0]
 80097de:	f380 8808 	msr	MSP, r0
 80097e2:	f04f 0000 	mov.w	r0, #0
 80097e6:	f380 8814 	msr	CONTROL, r0
 80097ea:	b662      	cpsie	i
 80097ec:	b661      	cpsie	f
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	df00      	svc	0
 80097f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097fa:	bf00      	nop
 80097fc:	e000ed08 	.word	0xe000ed08

08009800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009806:	4b46      	ldr	r3, [pc, #280]	; (8009920 <xPortStartScheduler+0x120>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a46      	ldr	r2, [pc, #280]	; (8009924 <xPortStartScheduler+0x124>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d10a      	bne.n	8009826 <xPortStartScheduler+0x26>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	613b      	str	r3, [r7, #16]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009826:	4b3e      	ldr	r3, [pc, #248]	; (8009920 <xPortStartScheduler+0x120>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a3f      	ldr	r2, [pc, #252]	; (8009928 <xPortStartScheduler+0x128>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d10a      	bne.n	8009846 <xPortStartScheduler+0x46>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	60fb      	str	r3, [r7, #12]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009846:	4b39      	ldr	r3, [pc, #228]	; (800992c <xPortStartScheduler+0x12c>)
 8009848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	22ff      	movs	r2, #255	; 0xff
 8009856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009868:	b2da      	uxtb	r2, r3
 800986a:	4b31      	ldr	r3, [pc, #196]	; (8009930 <xPortStartScheduler+0x130>)
 800986c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800986e:	4b31      	ldr	r3, [pc, #196]	; (8009934 <xPortStartScheduler+0x134>)
 8009870:	2207      	movs	r2, #7
 8009872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009874:	e009      	b.n	800988a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009876:	4b2f      	ldr	r3, [pc, #188]	; (8009934 <xPortStartScheduler+0x134>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3b01      	subs	r3, #1
 800987c:	4a2d      	ldr	r2, [pc, #180]	; (8009934 <xPortStartScheduler+0x134>)
 800987e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	b2db      	uxtb	r3, r3
 8009888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800988a:	78fb      	ldrb	r3, [r7, #3]
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009892:	2b80      	cmp	r3, #128	; 0x80
 8009894:	d0ef      	beq.n	8009876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009896:	4b27      	ldr	r3, [pc, #156]	; (8009934 <xPortStartScheduler+0x134>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1c3 0307 	rsb	r3, r3, #7
 800989e:	2b04      	cmp	r3, #4
 80098a0:	d00a      	beq.n	80098b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	60bb      	str	r3, [r7, #8]
}
 80098b4:	bf00      	nop
 80098b6:	e7fe      	b.n	80098b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098b8:	4b1e      	ldr	r3, [pc, #120]	; (8009934 <xPortStartScheduler+0x134>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	021b      	lsls	r3, r3, #8
 80098be:	4a1d      	ldr	r2, [pc, #116]	; (8009934 <xPortStartScheduler+0x134>)
 80098c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098c2:	4b1c      	ldr	r3, [pc, #112]	; (8009934 <xPortStartScheduler+0x134>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098ca:	4a1a      	ldr	r2, [pc, #104]	; (8009934 <xPortStartScheduler+0x134>)
 80098cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098d6:	4b18      	ldr	r3, [pc, #96]	; (8009938 <xPortStartScheduler+0x138>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a17      	ldr	r2, [pc, #92]	; (8009938 <xPortStartScheduler+0x138>)
 80098dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098e2:	4b15      	ldr	r3, [pc, #84]	; (8009938 <xPortStartScheduler+0x138>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a14      	ldr	r2, [pc, #80]	; (8009938 <xPortStartScheduler+0x138>)
 80098e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098ee:	f000 f8dd 	bl	8009aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098f2:	4b12      	ldr	r3, [pc, #72]	; (800993c <xPortStartScheduler+0x13c>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098f8:	f000 f8fc 	bl	8009af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098fc:	4b10      	ldr	r3, [pc, #64]	; (8009940 <xPortStartScheduler+0x140>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a0f      	ldr	r2, [pc, #60]	; (8009940 <xPortStartScheduler+0x140>)
 8009902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009908:	f7ff ff66 	bl	80097d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800990c:	f001 fb06 	bl	800af1c <vTaskSwitchContext>
	prvTaskExitError();
 8009910:	f7ff ff22 	bl	8009758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	e000ed00 	.word	0xe000ed00
 8009924:	410fc271 	.word	0x410fc271
 8009928:	410fc270 	.word	0x410fc270
 800992c:	e000e400 	.word	0xe000e400
 8009930:	200047bc 	.word	0x200047bc
 8009934:	200047c0 	.word	0x200047c0
 8009938:	e000ed20 	.word	0xe000ed20
 800993c:	20000094 	.word	0x20000094
 8009940:	e000ef34 	.word	0xe000ef34

08009944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	607b      	str	r3, [r7, #4]
}
 800995c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800995e:	4b0f      	ldr	r3, [pc, #60]	; (800999c <vPortEnterCritical+0x58>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	4a0d      	ldr	r2, [pc, #52]	; (800999c <vPortEnterCritical+0x58>)
 8009966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009968:	4b0c      	ldr	r3, [pc, #48]	; (800999c <vPortEnterCritical+0x58>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d10f      	bne.n	8009990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009970:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <vPortEnterCritical+0x5c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00a      	beq.n	8009990 <vPortEnterCritical+0x4c>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	603b      	str	r3, [r7, #0]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <vPortEnterCritical+0x4a>
	}
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	20000094 	.word	0x20000094
 80099a0:	e000ed04 	.word	0xe000ed04

080099a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099aa:	4b12      	ldr	r3, [pc, #72]	; (80099f4 <vPortExitCritical+0x50>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <vPortExitCritical+0x24>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	607b      	str	r3, [r7, #4]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099c8:	4b0a      	ldr	r3, [pc, #40]	; (80099f4 <vPortExitCritical+0x50>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	4a09      	ldr	r2, [pc, #36]	; (80099f4 <vPortExitCritical+0x50>)
 80099d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099d2:	4b08      	ldr	r3, [pc, #32]	; (80099f4 <vPortExitCritical+0x50>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d105      	bne.n	80099e6 <vPortExitCritical+0x42>
 80099da:	2300      	movs	r3, #0
 80099dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20000094 	.word	0x20000094
	...

08009a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a00:	f3ef 8009 	mrs	r0, PSP
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	4b15      	ldr	r3, [pc, #84]	; (8009a60 <pxCurrentTCBConst>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	f01e 0f10 	tst.w	lr, #16
 8009a10:	bf08      	it	eq
 8009a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1a:	6010      	str	r0, [r2, #0]
 8009a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a24:	f380 8811 	msr	BASEPRI, r0
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f001 fa74 	bl	800af1c <vTaskSwitchContext>
 8009a34:	f04f 0000 	mov.w	r0, #0
 8009a38:	f380 8811 	msr	BASEPRI, r0
 8009a3c:	bc09      	pop	{r0, r3}
 8009a3e:	6819      	ldr	r1, [r3, #0]
 8009a40:	6808      	ldr	r0, [r1, #0]
 8009a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a46:	f01e 0f10 	tst.w	lr, #16
 8009a4a:	bf08      	it	eq
 8009a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a50:	f380 8809 	msr	PSP, r0
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	f3af 8000 	nop.w

08009a60 <pxCurrentTCBConst>:
 8009a60:	20004804 	.word	0x20004804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop

08009a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	607b      	str	r3, [r7, #4]
}
 8009a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a82:	f001 f991 	bl	800ada8 <xTaskIncrementTick>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a8c:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <xPortSysTickHandler+0x40>)
 8009a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	2300      	movs	r3, #0
 8009a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	f383 8811 	msr	BASEPRI, r3
}
 8009a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	e000ed04 	.word	0xe000ed04

08009aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ab0:	4b0b      	ldr	r3, [pc, #44]	; (8009ae0 <vPortSetupTimerInterrupt+0x34>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ab6:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <vPortSetupTimerInterrupt+0x38>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009abc:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <vPortSetupTimerInterrupt+0x3c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a0a      	ldr	r2, [pc, #40]	; (8009aec <vPortSetupTimerInterrupt+0x40>)
 8009ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac6:	099b      	lsrs	r3, r3, #6
 8009ac8:	4a09      	ldr	r2, [pc, #36]	; (8009af0 <vPortSetupTimerInterrupt+0x44>)
 8009aca:	3b01      	subs	r3, #1
 8009acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ace:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <vPortSetupTimerInterrupt+0x34>)
 8009ad0:	2207      	movs	r2, #7
 8009ad2:	601a      	str	r2, [r3, #0]
}
 8009ad4:	bf00      	nop
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	e000e010 	.word	0xe000e010
 8009ae4:	e000e018 	.word	0xe000e018
 8009ae8:	2000000c 	.word	0x2000000c
 8009aec:	10624dd3 	.word	0x10624dd3
 8009af0:	e000e014 	.word	0xe000e014

08009af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b04 <vPortEnableVFP+0x10>
 8009af8:	6801      	ldr	r1, [r0, #0]
 8009afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009afe:	6001      	str	r1, [r0, #0]
 8009b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b02:	bf00      	nop
 8009b04:	e000ed88 	.word	0xe000ed88

08009b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b0e:	f3ef 8305 	mrs	r3, IPSR
 8009b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2b0f      	cmp	r3, #15
 8009b18:	d914      	bls.n	8009b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b1a:	4a17      	ldr	r2, [pc, #92]	; (8009b78 <vPortValidateInterruptPriority+0x70>)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b24:	4b15      	ldr	r3, [pc, #84]	; (8009b7c <vPortValidateInterruptPriority+0x74>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	7afa      	ldrb	r2, [r7, #11]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d20a      	bcs.n	8009b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	607b      	str	r3, [r7, #4]
}
 8009b40:	bf00      	nop
 8009b42:	e7fe      	b.n	8009b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b44:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <vPortValidateInterruptPriority+0x78>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b4c:	4b0d      	ldr	r3, [pc, #52]	; (8009b84 <vPortValidateInterruptPriority+0x7c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d90a      	bls.n	8009b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	603b      	str	r3, [r7, #0]
}
 8009b66:	bf00      	nop
 8009b68:	e7fe      	b.n	8009b68 <vPortValidateInterruptPriority+0x60>
	}
 8009b6a:	bf00      	nop
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	e000e3f0 	.word	0xe000e3f0
 8009b7c:	200047bc 	.word	0x200047bc
 8009b80:	e000ed0c 	.word	0xe000ed0c
 8009b84:	200047c0 	.word	0x200047c0

08009b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10a      	bne.n	8009bb2 <xQueueGenericReset+0x2a>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	60bb      	str	r3, [r7, #8]
}
 8009bae:	bf00      	nop
 8009bb0:	e7fe      	b.n	8009bb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009bb2:	f7ff fec7 	bl	8009944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bbe:	68f9      	ldr	r1, [r7, #12]
 8009bc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bc2:	fb01 f303 	mul.w	r3, r1, r3
 8009bc6:	441a      	add	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be2:	3b01      	subs	r3, #1
 8009be4:	68f9      	ldr	r1, [r7, #12]
 8009be6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009be8:	fb01 f303 	mul.w	r3, r1, r3
 8009bec:	441a      	add	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	22ff      	movs	r2, #255	; 0xff
 8009bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	22ff      	movs	r2, #255	; 0xff
 8009bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d114      	bne.n	8009c32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01a      	beq.n	8009c46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3310      	adds	r3, #16
 8009c14:	4618      	mov	r0, r3
 8009c16:	f001 fa2f 	bl	800b078 <xTaskRemoveFromEventList>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d012      	beq.n	8009c46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c20:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <xQueueGenericReset+0xcc>)
 8009c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	e009      	b.n	8009c46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3310      	adds	r3, #16
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fca6 	bl	8009588 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3324      	adds	r3, #36	; 0x24
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff fca1 	bl	8009588 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c46:	f7ff fead 	bl	80099a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c4a:	2301      	movs	r3, #1
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08e      	sub	sp, #56	; 0x38
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <xQueueGenericCreateStatic+0x52>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <xQueueGenericCreateStatic+0x56>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <xQueueGenericCreateStatic+0x58>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	623b      	str	r3, [r7, #32]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <xQueueGenericCreateStatic+0x7e>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <xQueueGenericCreateStatic+0x82>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e000      	b.n	8009cdc <xQueueGenericCreateStatic+0x84>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	61fb      	str	r3, [r7, #28]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cf6:	2350      	movs	r3, #80	; 0x50
 8009cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b50      	cmp	r3, #80	; 0x50
 8009cfe:	d00a      	beq.n	8009d16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	61bb      	str	r3, [r7, #24]
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00d      	beq.n	8009d3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	4613      	mov	r3, r2
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68b9      	ldr	r1, [r7, #8]
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f83f 	bl	8009dbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3730      	adds	r7, #48	; 0x30
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08a      	sub	sp, #40	; 0x28
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	4613      	mov	r3, r2
 8009d54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	613b      	str	r3, [r7, #16]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	fb02 f303 	mul.w	r3, r2, r3
 8009d7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	3350      	adds	r3, #80	; 0x50
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fa17 	bl	80091b4 <pvPortMalloc>
 8009d86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d011      	beq.n	8009db2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	3350      	adds	r3, #80	; 0x50
 8009d96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009da0:	79fa      	ldrb	r2, [r7, #7]
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	4613      	mov	r3, r2
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 f805 	bl	8009dbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009db2:	69bb      	ldr	r3, [r7, #24]
	}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3720      	adds	r7, #32
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d103      	bne.n	8009dd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	69ba      	ldr	r2, [r7, #24]
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	e002      	b.n	8009dde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dea:	2101      	movs	r1, #1
 8009dec:	69b8      	ldr	r0, [r7, #24]
 8009dee:	f7ff fecb 	bl	8009b88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009dfa:	bf00      	nop
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08e      	sub	sp, #56	; 0x38
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e12:	2300      	movs	r3, #0
 8009e14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <xQueueGenericSend+0x32>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <xQueueGenericSend+0x40>
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <xQueueGenericSend+0x44>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e000      	b.n	8009e4a <xQueueGenericSend+0x46>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <xQueueGenericSend+0x60>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e60:	bf00      	nop
 8009e62:	e7fe      	b.n	8009e62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d103      	bne.n	8009e72 <xQueueGenericSend+0x6e>
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <xQueueGenericSend+0x72>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e000      	b.n	8009e78 <xQueueGenericSend+0x74>
 8009e76:	2300      	movs	r3, #0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10a      	bne.n	8009e92 <xQueueGenericSend+0x8e>
	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	623b      	str	r3, [r7, #32]
}
 8009e8e:	bf00      	nop
 8009e90:	e7fe      	b.n	8009e90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e92:	f001 faaf 	bl	800b3f4 <xTaskGetSchedulerState>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <xQueueGenericSend+0x9e>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <xQueueGenericSend+0xa2>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e000      	b.n	8009ea8 <xQueueGenericSend+0xa4>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10a      	bne.n	8009ec2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	61fb      	str	r3, [r7, #28]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ec2:	f7ff fd3f 	bl	8009944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d302      	bcc.n	8009ed8 <xQueueGenericSend+0xd4>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d129      	bne.n	8009f2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ede:	f000 fa8b 	bl	800a3f8 <prvCopyDataToQueue>
 8009ee2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d010      	beq.n	8009f0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	3324      	adds	r3, #36	; 0x24
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 f8c1 	bl	800b078 <xTaskRemoveFromEventList>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d013      	beq.n	8009f24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009efc:	4b3f      	ldr	r3, [pc, #252]	; (8009ffc <xQueueGenericSend+0x1f8>)
 8009efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	e00a      	b.n	8009f24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d007      	beq.n	8009f24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f14:	4b39      	ldr	r3, [pc, #228]	; (8009ffc <xQueueGenericSend+0x1f8>)
 8009f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f24:	f7ff fd3e 	bl	80099a4 <vPortExitCritical>
				return pdPASS;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e063      	b.n	8009ff4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f32:	f7ff fd37 	bl	80099a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e05c      	b.n	8009ff4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f40:	f107 0314 	add.w	r3, r7, #20
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 f8fb 	bl	800b140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f4e:	f7ff fd29 	bl	80099a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f52:	f000 fe6d 	bl	800ac30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f56:	f7ff fcf5 	bl	8009944 <vPortEnterCritical>
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f60:	b25b      	sxtb	r3, r3
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	d103      	bne.n	8009f70 <xQueueGenericSend+0x16c>
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f76:	b25b      	sxtb	r3, r3
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7c:	d103      	bne.n	8009f86 <xQueueGenericSend+0x182>
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f86:	f7ff fd0d 	bl	80099a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f8a:	1d3a      	adds	r2, r7, #4
 8009f8c:	f107 0314 	add.w	r3, r7, #20
 8009f90:	4611      	mov	r1, r2
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 f8ea 	bl	800b16c <xTaskCheckForTimeOut>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d124      	bne.n	8009fe8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa0:	f000 fb22 	bl	800a5e8 <prvIsQueueFull>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d018      	beq.n	8009fdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	3310      	adds	r3, #16
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 f810 	bl	800afd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fba:	f000 faad 	bl	800a518 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fbe:	f000 fe45 	bl	800ac4c <xTaskResumeAll>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f47f af7c 	bne.w	8009ec2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <xQueueGenericSend+0x1f8>)
 8009fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	e772      	b.n	8009ec2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fde:	f000 fa9b 	bl	800a518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fe2:	f000 fe33 	bl	800ac4c <xTaskResumeAll>
 8009fe6:	e76c      	b.n	8009ec2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fea:	f000 fa95 	bl	800a518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fee:	f000 fe2d 	bl	800ac4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ff2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3738      	adds	r7, #56	; 0x38
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	e000ed04 	.word	0xe000ed04

0800a000 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b090      	sub	sp, #64	; 0x40
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d103      	bne.n	800a03c <xQueueGenericSendFromISR+0x3c>
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <xQueueGenericSendFromISR+0x40>
 800a03c:	2301      	movs	r3, #1
 800a03e:	e000      	b.n	800a042 <xQueueGenericSendFromISR+0x42>
 800a040:	2300      	movs	r3, #0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d103      	bne.n	800a06a <xQueueGenericSendFromISR+0x6a>
 800a062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a066:	2b01      	cmp	r3, #1
 800a068:	d101      	bne.n	800a06e <xQueueGenericSendFromISR+0x6e>
 800a06a:	2301      	movs	r3, #1
 800a06c:	e000      	b.n	800a070 <xQueueGenericSendFromISR+0x70>
 800a06e:	2300      	movs	r3, #0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	623b      	str	r3, [r7, #32]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a08a:	f7ff fd3d 	bl	8009b08 <vPortValidateInterruptPriority>
	__asm volatile
 800a08e:	f3ef 8211 	mrs	r2, BASEPRI
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	61fa      	str	r2, [r7, #28]
 800a0a4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a0a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d302      	bcc.n	800a0bc <xQueueGenericSendFromISR+0xbc>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d12f      	bne.n	800a11c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0d2:	f000 f991 	bl	800a3f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0de:	d112      	bne.n	800a106 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d016      	beq.n	800a116 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	3324      	adds	r3, #36	; 0x24
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 ffc3 	bl	800b078 <xTaskRemoveFromEventList>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00e      	beq.n	800a116 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00b      	beq.n	800a116 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e007      	b.n	800a116 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a106:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a10a:	3301      	adds	r3, #1
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	b25a      	sxtb	r2, r3
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a116:	2301      	movs	r3, #1
 800a118:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a11a:	e001      	b.n	800a120 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a11c:	2300      	movs	r3, #0
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a122:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f383 8811 	msr	BASEPRI, r3
}
 800a12a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3740      	adds	r7, #64	; 0x40
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b08c      	sub	sp, #48	; 0x30
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a144:	2300      	movs	r3, #0
 800a146:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10a      	bne.n	800a168 <xQueueReceive+0x30>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	623b      	str	r3, [r7, #32]
}
 800a164:	bf00      	nop
 800a166:	e7fe      	b.n	800a166 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d103      	bne.n	800a176 <xQueueReceive+0x3e>
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <xQueueReceive+0x42>
 800a176:	2301      	movs	r3, #1
 800a178:	e000      	b.n	800a17c <xQueueReceive+0x44>
 800a17a:	2300      	movs	r3, #0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10a      	bne.n	800a196 <xQueueReceive+0x5e>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	61fb      	str	r3, [r7, #28]
}
 800a192:	bf00      	nop
 800a194:	e7fe      	b.n	800a194 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a196:	f001 f92d 	bl	800b3f4 <xTaskGetSchedulerState>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <xQueueReceive+0x6e>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <xQueueReceive+0x72>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e000      	b.n	800a1ac <xQueueReceive+0x74>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <xQueueReceive+0x8e>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	61bb      	str	r3, [r7, #24]
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1c6:	f7ff fbbd 	bl	8009944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d01f      	beq.n	800a216 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1d6:	68b9      	ldr	r1, [r7, #8]
 800a1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1da:	f000 f977 	bl	800a4cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	1e5a      	subs	r2, r3, #1
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00f      	beq.n	800a20e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	3310      	adds	r3, #16
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 ff40 	bl	800b078 <xTaskRemoveFromEventList>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1fe:	4b3d      	ldr	r3, [pc, #244]	; (800a2f4 <xQueueReceive+0x1bc>)
 800a200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a204:	601a      	str	r2, [r3, #0]
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a20e:	f7ff fbc9 	bl	80099a4 <vPortExitCritical>
				return pdPASS;
 800a212:	2301      	movs	r3, #1
 800a214:	e069      	b.n	800a2ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a21c:	f7ff fbc2 	bl	80099a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a220:	2300      	movs	r3, #0
 800a222:	e062      	b.n	800a2ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a22a:	f107 0310 	add.w	r3, r7, #16
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 ff86 	bl	800b140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a234:	2301      	movs	r3, #1
 800a236:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a238:	f7ff fbb4 	bl	80099a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a23c:	f000 fcf8 	bl	800ac30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a240:	f7ff fb80 	bl	8009944 <vPortEnterCritical>
 800a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a24a:	b25b      	sxtb	r3, r3
 800a24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a250:	d103      	bne.n	800a25a <xQueueReceive+0x122>
 800a252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a260:	b25b      	sxtb	r3, r3
 800a262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a266:	d103      	bne.n	800a270 <xQueueReceive+0x138>
 800a268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a270:	f7ff fb98 	bl	80099a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a274:	1d3a      	adds	r2, r7, #4
 800a276:	f107 0310 	add.w	r3, r7, #16
 800a27a:	4611      	mov	r1, r2
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 ff75 	bl	800b16c <xTaskCheckForTimeOut>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d123      	bne.n	800a2d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a28a:	f000 f997 	bl	800a5bc <prvIsQueueEmpty>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d017      	beq.n	800a2c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	3324      	adds	r3, #36	; 0x24
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	4611      	mov	r1, r2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fe9b 	bl	800afd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a4:	f000 f938 	bl	800a518 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2a8:	f000 fcd0 	bl	800ac4c <xTaskResumeAll>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d189      	bne.n	800a1c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a2b2:	4b10      	ldr	r3, [pc, #64]	; (800a2f4 <xQueueReceive+0x1bc>)
 800a2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	e780      	b.n	800a1c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c6:	f000 f927 	bl	800a518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2ca:	f000 fcbf 	bl	800ac4c <xTaskResumeAll>
 800a2ce:	e77a      	b.n	800a1c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d2:	f000 f921 	bl	800a518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2d6:	f000 fcb9 	bl	800ac4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2dc:	f000 f96e 	bl	800a5bc <prvIsQueueEmpty>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f43f af6f 	beq.w	800a1c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3730      	adds	r7, #48	; 0x30
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08e      	sub	sp, #56	; 0x38
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10a      	bne.n	800a324 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	623b      	str	r3, [r7, #32]
}
 800a320:	bf00      	nop
 800a322:	e7fe      	b.n	800a322 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d103      	bne.n	800a332 <xQueueReceiveFromISR+0x3a>
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <xQueueReceiveFromISR+0x3e>
 800a332:	2301      	movs	r3, #1
 800a334:	e000      	b.n	800a338 <xQueueReceiveFromISR+0x40>
 800a336:	2300      	movs	r3, #0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	61fb      	str	r3, [r7, #28]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a352:	f7ff fbd9 	bl	8009b08 <vPortValidateInterruptPriority>
	__asm volatile
 800a356:	f3ef 8211 	mrs	r2, BASEPRI
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	61ba      	str	r2, [r7, #24]
 800a36c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a36e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a370:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a376:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d02f      	beq.n	800a3de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a388:	68b9      	ldr	r1, [r7, #8]
 800a38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38c:	f000 f89e 	bl	800a4cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	1e5a      	subs	r2, r3, #1
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a0:	d112      	bne.n	800a3c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d016      	beq.n	800a3d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	3310      	adds	r3, #16
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 fe62 	bl	800b078 <xTaskRemoveFromEventList>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00e      	beq.n	800a3d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	601a      	str	r2, [r3, #0]
 800a3c6:	e007      	b.n	800a3d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	b25a      	sxtb	r2, r3
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	637b      	str	r3, [r7, #52]	; 0x34
 800a3dc:	e001      	b.n	800a3e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f383 8811 	msr	BASEPRI, r3
}
 800a3ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3738      	adds	r7, #56	; 0x38
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10d      	bne.n	800a432 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d14d      	bne.n	800a4ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	f001 f804 	bl	800b430 <xTaskPriorityDisinherit>
 800a428:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	609a      	str	r2, [r3, #8]
 800a430:	e043      	b.n	800a4ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d119      	bne.n	800a46c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6858      	ldr	r0, [r3, #4]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a440:	461a      	mov	r2, r3
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	f004 f93c 	bl	800e6c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a450:	441a      	add	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d32b      	bcc.n	800a4ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	605a      	str	r2, [r3, #4]
 800a46a:	e026      	b.n	800a4ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	68d8      	ldr	r0, [r3, #12]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a474:	461a      	mov	r2, r3
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	f004 f922 	bl	800e6c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a484:	425b      	negs	r3, r3
 800a486:	441a      	add	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	429a      	cmp	r2, r3
 800a496:	d207      	bcs.n	800a4a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	425b      	negs	r3, r3
 800a4a2:	441a      	add	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d105      	bne.n	800a4ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	1c5a      	adds	r2, r3, #1
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a4c2:	697b      	ldr	r3, [r7, #20]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d018      	beq.n	800a510 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e6:	441a      	add	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	68da      	ldr	r2, [r3, #12]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d303      	bcc.n	800a500 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68d9      	ldr	r1, [r3, #12]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a508:	461a      	mov	r2, r3
 800a50a:	6838      	ldr	r0, [r7, #0]
 800a50c:	f004 f8d8 	bl	800e6c0 <memcpy>
	}
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a520:	f7ff fa10 	bl	8009944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a52a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a52c:	e011      	b.n	800a552 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	2b00      	cmp	r3, #0
 800a534:	d012      	beq.n	800a55c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	3324      	adds	r3, #36	; 0x24
 800a53a:	4618      	mov	r0, r3
 800a53c:	f000 fd9c 	bl	800b078 <xTaskRemoveFromEventList>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a546:	f000 fe73 	bl	800b230 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a556:	2b00      	cmp	r3, #0
 800a558:	dce9      	bgt.n	800a52e <prvUnlockQueue+0x16>
 800a55a:	e000      	b.n	800a55e <prvUnlockQueue+0x46>
					break;
 800a55c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	22ff      	movs	r2, #255	; 0xff
 800a562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a566:	f7ff fa1d 	bl	80099a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a56a:	f7ff f9eb 	bl	8009944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a574:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a576:	e011      	b.n	800a59c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d012      	beq.n	800a5a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3310      	adds	r3, #16
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fd77 	bl	800b078 <xTaskRemoveFromEventList>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a590:	f000 fe4e 	bl	800b230 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a594:	7bbb      	ldrb	r3, [r7, #14]
 800a596:	3b01      	subs	r3, #1
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a59c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	dce9      	bgt.n	800a578 <prvUnlockQueue+0x60>
 800a5a4:	e000      	b.n	800a5a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a5a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	22ff      	movs	r2, #255	; 0xff
 800a5ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a5b0:	f7ff f9f8 	bl	80099a4 <vPortExitCritical>
}
 800a5b4:	bf00      	nop
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5c4:	f7ff f9be 	bl	8009944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d102      	bne.n	800a5d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	60fb      	str	r3, [r7, #12]
 800a5d4:	e001      	b.n	800a5da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5da:	f7ff f9e3 	bl	80099a4 <vPortExitCritical>

	return xReturn;
 800a5de:	68fb      	ldr	r3, [r7, #12]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5f0:	f7ff f9a8 	bl	8009944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d102      	bne.n	800a606 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a600:	2301      	movs	r3, #1
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	e001      	b.n	800a60a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a606:	2300      	movs	r3, #0
 800a608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a60a:	f7ff f9cb 	bl	80099a4 <vPortExitCritical>

	return xReturn;
 800a60e:	68fb      	ldr	r3, [r7, #12]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e014      	b.n	800a652 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a628:	4a0f      	ldr	r2, [pc, #60]	; (800a668 <vQueueAddToRegistry+0x50>)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10b      	bne.n	800a64c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a634:	490c      	ldr	r1, [pc, #48]	; (800a668 <vQueueAddToRegistry+0x50>)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a63e:	4a0a      	ldr	r2, [pc, #40]	; (800a668 <vQueueAddToRegistry+0x50>)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	00db      	lsls	r3, r3, #3
 800a644:	4413      	add	r3, r2
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a64a:	e006      	b.n	800a65a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3301      	adds	r3, #1
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b07      	cmp	r3, #7
 800a656:	d9e7      	bls.n	800a628 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a658:	bf00      	nop
 800a65a:	bf00      	nop
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	200047c4 	.word	0x200047c4

0800a66c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a67c:	f7ff f962 	bl	8009944 <vPortEnterCritical>
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a686:	b25b      	sxtb	r3, r3
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68c:	d103      	bne.n	800a696 <vQueueWaitForMessageRestricted+0x2a>
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a69c:	b25b      	sxtb	r3, r3
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a2:	d103      	bne.n	800a6ac <vQueueWaitForMessageRestricted+0x40>
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ac:	f7ff f97a 	bl	80099a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d106      	bne.n	800a6c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	3324      	adds	r3, #36	; 0x24
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	68b9      	ldr	r1, [r7, #8]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f000 fcad 	bl	800b020 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a6c6:	6978      	ldr	r0, [r7, #20]
 800a6c8:	f7ff ff26 	bl	800a518 <prvUnlockQueue>
	}
 800a6cc:	bf00      	nop
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b08e      	sub	sp, #56	; 0x38
 800a6d8:	af04      	add	r7, sp, #16
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	623b      	str	r3, [r7, #32]
}
 800a6fa:	bf00      	nop
 800a6fc:	e7fe      	b.n	800a6fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10a      	bne.n	800a71a <xTaskCreateStatic+0x46>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	61fb      	str	r3, [r7, #28]
}
 800a716:	bf00      	nop
 800a718:	e7fe      	b.n	800a718 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a71a:	235c      	movs	r3, #92	; 0x5c
 800a71c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	2b5c      	cmp	r3, #92	; 0x5c
 800a722:	d00a      	beq.n	800a73a <xTaskCreateStatic+0x66>
	__asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	61bb      	str	r3, [r7, #24]
}
 800a736:	bf00      	nop
 800a738:	e7fe      	b.n	800a738 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a73a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d01e      	beq.n	800a780 <xTaskCreateStatic+0xac>
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	2b00      	cmp	r3, #0
 800a746:	d01b      	beq.n	800a780 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a750:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	2202      	movs	r2, #2
 800a756:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a75a:	2300      	movs	r3, #0
 800a75c:	9303      	str	r3, [sp, #12]
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	9302      	str	r3, [sp, #8]
 800a762:	f107 0314 	add.w	r3, r7, #20
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	68b9      	ldr	r1, [r7, #8]
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 f850 	bl	800a818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a77a:	f000 f8dd 	bl	800a938 <prvAddNewTaskToReadyList>
 800a77e:	e001      	b.n	800a784 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a780:	2300      	movs	r3, #0
 800a782:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a784:	697b      	ldr	r3, [r7, #20]
	}
 800a786:	4618      	mov	r0, r3
 800a788:	3728      	adds	r7, #40	; 0x28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b08c      	sub	sp, #48	; 0x30
 800a792:	af04      	add	r7, sp, #16
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	603b      	str	r3, [r7, #0]
 800a79a:	4613      	mov	r3, r2
 800a79c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a79e:	88fb      	ldrh	r3, [r7, #6]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe fd06 	bl	80091b4 <pvPortMalloc>
 800a7a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00e      	beq.n	800a7ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7b0:	205c      	movs	r0, #92	; 0x5c
 800a7b2:	f7fe fcff 	bl	80091b4 <pvPortMalloc>
 800a7b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	697a      	ldr	r2, [r7, #20]
 800a7c2:	631a      	str	r2, [r3, #48]	; 0x30
 800a7c4:	e005      	b.n	800a7d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a7c6:	6978      	ldr	r0, [r7, #20]
 800a7c8:	f7fe fdc0 	bl	800934c <vPortFree>
 800a7cc:	e001      	b.n	800a7d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d017      	beq.n	800a808 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a7e0:	88fa      	ldrh	r2, [r7, #6]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	9302      	str	r3, [sp, #8]
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	9301      	str	r3, [sp, #4]
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 f80e 	bl	800a818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7fc:	69f8      	ldr	r0, [r7, #28]
 800a7fe:	f000 f89b 	bl	800a938 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a802:	2301      	movs	r3, #1
 800a804:	61bb      	str	r3, [r7, #24]
 800a806:	e002      	b.n	800a80e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a808:	f04f 33ff 	mov.w	r3, #4294967295
 800a80c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a80e:	69bb      	ldr	r3, [r7, #24]
	}
 800a810:	4618      	mov	r0, r3
 800a812:	3720      	adds	r7, #32
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	461a      	mov	r2, r3
 800a830:	21a5      	movs	r1, #165	; 0xa5
 800a832:	f003 ff11 	bl	800e658 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a840:	3b01      	subs	r3, #1
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	f023 0307 	bic.w	r3, r3, #7
 800a84e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	617b      	str	r3, [r7, #20]
}
 800a86c:	bf00      	nop
 800a86e:	e7fe      	b.n	800a86e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d01f      	beq.n	800a8b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a876:	2300      	movs	r3, #0
 800a878:	61fb      	str	r3, [r7, #28]
 800a87a:	e012      	b.n	800a8a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	4413      	add	r3, r2
 800a882:	7819      	ldrb	r1, [r3, #0]
 800a884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	4413      	add	r3, r2
 800a88a:	3334      	adds	r3, #52	; 0x34
 800a88c:	460a      	mov	r2, r1
 800a88e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	4413      	add	r3, r2
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d006      	beq.n	800a8aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	61fb      	str	r3, [r7, #28]
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	2b0f      	cmp	r3, #15
 800a8a6:	d9e9      	bls.n	800a87c <prvInitialiseNewTask+0x64>
 800a8a8:	e000      	b.n	800a8ac <prvInitialiseNewTask+0x94>
			{
				break;
 800a8aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8b4:	e003      	b.n	800a8be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	2b37      	cmp	r3, #55	; 0x37
 800a8c2:	d901      	bls.n	800a8c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8c4:	2337      	movs	r3, #55	; 0x37
 800a8c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	3304      	adds	r3, #4
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe fe72 	bl	80095c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e6:	3318      	adds	r3, #24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fe fe6d 	bl	80095c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a902:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	2200      	movs	r2, #0
 800a908:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	68f9      	ldr	r1, [r7, #12]
 800a916:	69b8      	ldr	r0, [r7, #24]
 800a918:	f7fe feea 	bl	80096f0 <pxPortInitialiseStack>
 800a91c:	4602      	mov	r2, r0
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a92c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a92e:	bf00      	nop
 800a930:	3720      	adds	r7, #32
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a940:	f7ff f800 	bl	8009944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a944:	4b2d      	ldr	r3, [pc, #180]	; (800a9fc <prvAddNewTaskToReadyList+0xc4>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3301      	adds	r3, #1
 800a94a:	4a2c      	ldr	r2, [pc, #176]	; (800a9fc <prvAddNewTaskToReadyList+0xc4>)
 800a94c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a94e:	4b2c      	ldr	r3, [pc, #176]	; (800aa00 <prvAddNewTaskToReadyList+0xc8>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d109      	bne.n	800a96a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a956:	4a2a      	ldr	r2, [pc, #168]	; (800aa00 <prvAddNewTaskToReadyList+0xc8>)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a95c:	4b27      	ldr	r3, [pc, #156]	; (800a9fc <prvAddNewTaskToReadyList+0xc4>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d110      	bne.n	800a986 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a964:	f000 fc88 	bl	800b278 <prvInitialiseTaskLists>
 800a968:	e00d      	b.n	800a986 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a96a:	4b26      	ldr	r3, [pc, #152]	; (800aa04 <prvAddNewTaskToReadyList+0xcc>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d109      	bne.n	800a986 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a972:	4b23      	ldr	r3, [pc, #140]	; (800aa00 <prvAddNewTaskToReadyList+0xc8>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d802      	bhi.n	800a986 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a980:	4a1f      	ldr	r2, [pc, #124]	; (800aa00 <prvAddNewTaskToReadyList+0xc8>)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a986:	4b20      	ldr	r3, [pc, #128]	; (800aa08 <prvAddNewTaskToReadyList+0xd0>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3301      	adds	r3, #1
 800a98c:	4a1e      	ldr	r2, [pc, #120]	; (800aa08 <prvAddNewTaskToReadyList+0xd0>)
 800a98e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a990:	4b1d      	ldr	r3, [pc, #116]	; (800aa08 <prvAddNewTaskToReadyList+0xd0>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99c:	4b1b      	ldr	r3, [pc, #108]	; (800aa0c <prvAddNewTaskToReadyList+0xd4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d903      	bls.n	800a9ac <prvAddNewTaskToReadyList+0x74>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a8:	4a18      	ldr	r2, [pc, #96]	; (800aa0c <prvAddNewTaskToReadyList+0xd4>)
 800a9aa:	6013      	str	r3, [r2, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4a15      	ldr	r2, [pc, #84]	; (800aa10 <prvAddNewTaskToReadyList+0xd8>)
 800a9ba:	441a      	add	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	3304      	adds	r3, #4
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	f7fe fe0d 	bl	80095e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9c8:	f7fe ffec 	bl	80099a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <prvAddNewTaskToReadyList+0xcc>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00e      	beq.n	800a9f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <prvAddNewTaskToReadyList+0xc8>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d207      	bcs.n	800a9f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a9e2:	4b0c      	ldr	r3, [pc, #48]	; (800aa14 <prvAddNewTaskToReadyList+0xdc>)
 800a9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9f2:	bf00      	nop
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20004cd8 	.word	0x20004cd8
 800aa00:	20004804 	.word	0x20004804
 800aa04:	20004ce4 	.word	0x20004ce4
 800aa08:	20004cf4 	.word	0x20004cf4
 800aa0c:	20004ce0 	.word	0x20004ce0
 800aa10:	20004808 	.word	0x20004808
 800aa14:	e000ed04 	.word	0xe000ed04

0800aa18 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800aa20:	f7fe ff90 	bl	8009944 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d102      	bne.n	800aa30 <vTaskDelete+0x18>
 800aa2a:	4b2c      	ldr	r3, [pc, #176]	; (800aadc <vTaskDelete+0xc4>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	e000      	b.n	800aa32 <vTaskDelete+0x1a>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3304      	adds	r3, #4
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fe fe2f 	bl	800969c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d004      	beq.n	800aa50 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3318      	adds	r3, #24
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fe26 	bl	800969c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800aa50:	4b23      	ldr	r3, [pc, #140]	; (800aae0 <vTaskDelete+0xc8>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3301      	adds	r3, #1
 800aa56:	4a22      	ldr	r2, [pc, #136]	; (800aae0 <vTaskDelete+0xc8>)
 800aa58:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800aa5a:	4b20      	ldr	r3, [pc, #128]	; (800aadc <vTaskDelete+0xc4>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d10b      	bne.n	800aa7c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3304      	adds	r3, #4
 800aa68:	4619      	mov	r1, r3
 800aa6a:	481e      	ldr	r0, [pc, #120]	; (800aae4 <vTaskDelete+0xcc>)
 800aa6c:	f7fe fdb9 	bl	80095e2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800aa70:	4b1d      	ldr	r3, [pc, #116]	; (800aae8 <vTaskDelete+0xd0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	4a1c      	ldr	r2, [pc, #112]	; (800aae8 <vTaskDelete+0xd0>)
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	e009      	b.n	800aa90 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800aa7c:	4b1b      	ldr	r3, [pc, #108]	; (800aaec <vTaskDelete+0xd4>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	4a1a      	ldr	r2, [pc, #104]	; (800aaec <vTaskDelete+0xd4>)
 800aa84:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 fc64 	bl	800b354 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800aa8c:	f000 fc92 	bl	800b3b4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800aa90:	f7fe ff88 	bl	80099a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800aa94:	4b16      	ldr	r3, [pc, #88]	; (800aaf0 <vTaskDelete+0xd8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01b      	beq.n	800aad4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800aa9c:	4b0f      	ldr	r3, [pc, #60]	; (800aadc <vTaskDelete+0xc4>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d116      	bne.n	800aad4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800aaa6:	4b13      	ldr	r3, [pc, #76]	; (800aaf4 <vTaskDelete+0xdc>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00a      	beq.n	800aac4 <vTaskDelete+0xac>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	60bb      	str	r3, [r7, #8]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800aac4:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <vTaskDelete+0xe0>)
 800aac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aad4:	bf00      	nop
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20004804 	.word	0x20004804
 800aae0:	20004cf4 	.word	0x20004cf4
 800aae4:	20004cac 	.word	0x20004cac
 800aae8:	20004cc0 	.word	0x20004cc0
 800aaec:	20004cd8 	.word	0x20004cd8
 800aaf0:	20004ce4 	.word	0x20004ce4
 800aaf4:	20004d00 	.word	0x20004d00
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d017      	beq.n	800ab3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab0e:	4b13      	ldr	r3, [pc, #76]	; (800ab5c <vTaskDelay+0x60>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <vTaskDelay+0x30>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ab2c:	f000 f880 	bl	800ac30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ab30:	2100      	movs	r1, #0
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fcea 	bl	800b50c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab38:	f000 f888 	bl	800ac4c <xTaskResumeAll>
 800ab3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d107      	bne.n	800ab54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ab44:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <vTaskDelay+0x64>)
 800ab46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab54:	bf00      	nop
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	20004d00 	.word	0x20004d00
 800ab60:	e000ed04 	.word	0xe000ed04

0800ab64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08a      	sub	sp, #40	; 0x28
 800ab68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab72:	463a      	mov	r2, r7
 800ab74:	1d39      	adds	r1, r7, #4
 800ab76:	f107 0308 	add.w	r3, r7, #8
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fe fae6 	bl	800914c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	9202      	str	r2, [sp, #8]
 800ab88:	9301      	str	r3, [sp, #4]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	2300      	movs	r3, #0
 800ab90:	460a      	mov	r2, r1
 800ab92:	4921      	ldr	r1, [pc, #132]	; (800ac18 <vTaskStartScheduler+0xb4>)
 800ab94:	4821      	ldr	r0, [pc, #132]	; (800ac1c <vTaskStartScheduler+0xb8>)
 800ab96:	f7ff fd9d 	bl	800a6d4 <xTaskCreateStatic>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	4a20      	ldr	r2, [pc, #128]	; (800ac20 <vTaskStartScheduler+0xbc>)
 800ab9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aba0:	4b1f      	ldr	r3, [pc, #124]	; (800ac20 <vTaskStartScheduler+0xbc>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aba8:	2301      	movs	r3, #1
 800abaa:	617b      	str	r3, [r7, #20]
 800abac:	e001      	b.n	800abb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800abae:	2300      	movs	r3, #0
 800abb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d102      	bne.n	800abbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800abb8:	f000 fcfc 	bl	800b5b4 <xTimerCreateTimerTask>
 800abbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d116      	bne.n	800abf2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	613b      	str	r3, [r7, #16]
}
 800abd6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800abd8:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <vTaskStartScheduler+0xc0>)
 800abda:	f04f 32ff 	mov.w	r2, #4294967295
 800abde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800abe0:	4b11      	ldr	r3, [pc, #68]	; (800ac28 <vTaskStartScheduler+0xc4>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800abe6:	4b11      	ldr	r3, [pc, #68]	; (800ac2c <vTaskStartScheduler+0xc8>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800abec:	f7fe fe08 	bl	8009800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800abf0:	e00e      	b.n	800ac10 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf8:	d10a      	bne.n	800ac10 <vTaskStartScheduler+0xac>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	60fb      	str	r3, [r7, #12]
}
 800ac0c:	bf00      	nop
 800ac0e:	e7fe      	b.n	800ac0e <vTaskStartScheduler+0xaa>
}
 800ac10:	bf00      	nop
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	0800efbc 	.word	0x0800efbc
 800ac1c:	0800b249 	.word	0x0800b249
 800ac20:	20004cfc 	.word	0x20004cfc
 800ac24:	20004cf8 	.word	0x20004cf8
 800ac28:	20004ce4 	.word	0x20004ce4
 800ac2c:	20004cdc 	.word	0x20004cdc

0800ac30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac30:	b480      	push	{r7}
 800ac32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ac34:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <vTaskSuspendAll+0x18>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	4a03      	ldr	r2, [pc, #12]	; (800ac48 <vTaskSuspendAll+0x18>)
 800ac3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ac3e:	bf00      	nop
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	20004d00 	.word	0x20004d00

0800ac4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac5a:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <xTaskResumeAll+0x118>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10a      	bne.n	800ac78 <xTaskResumeAll+0x2c>
	__asm volatile
 800ac62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	603b      	str	r3, [r7, #0]
}
 800ac74:	bf00      	nop
 800ac76:	e7fe      	b.n	800ac76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac78:	f7fe fe64 	bl	8009944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac7c:	4b39      	ldr	r3, [pc, #228]	; (800ad64 <xTaskResumeAll+0x118>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	4a38      	ldr	r2, [pc, #224]	; (800ad64 <xTaskResumeAll+0x118>)
 800ac84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac86:	4b37      	ldr	r3, [pc, #220]	; (800ad64 <xTaskResumeAll+0x118>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d162      	bne.n	800ad54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac8e:	4b36      	ldr	r3, [pc, #216]	; (800ad68 <xTaskResumeAll+0x11c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d05e      	beq.n	800ad54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac96:	e02f      	b.n	800acf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac98:	4b34      	ldr	r3, [pc, #208]	; (800ad6c <xTaskResumeAll+0x120>)
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3318      	adds	r3, #24
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe fcf9 	bl	800969c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3304      	adds	r3, #4
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fe fcf4 	bl	800969c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb8:	4b2d      	ldr	r3, [pc, #180]	; (800ad70 <xTaskResumeAll+0x124>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d903      	bls.n	800acc8 <xTaskResumeAll+0x7c>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <xTaskResumeAll+0x124>)
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4a27      	ldr	r2, [pc, #156]	; (800ad74 <xTaskResumeAll+0x128>)
 800acd6:	441a      	add	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3304      	adds	r3, #4
 800acdc:	4619      	mov	r1, r3
 800acde:	4610      	mov	r0, r2
 800ace0:	f7fe fc7f 	bl	80095e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace8:	4b23      	ldr	r3, [pc, #140]	; (800ad78 <xTaskResumeAll+0x12c>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acee:	429a      	cmp	r2, r3
 800acf0:	d302      	bcc.n	800acf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800acf2:	4b22      	ldr	r3, [pc, #136]	; (800ad7c <xTaskResumeAll+0x130>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acf8:	4b1c      	ldr	r3, [pc, #112]	; (800ad6c <xTaskResumeAll+0x120>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1cb      	bne.n	800ac98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad06:	f000 fb55 	bl	800b3b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad0a:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <xTaskResumeAll+0x134>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d010      	beq.n	800ad38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad16:	f000 f847 	bl	800ada8 <xTaskIncrementTick>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ad20:	4b16      	ldr	r3, [pc, #88]	; (800ad7c <xTaskResumeAll+0x130>)
 800ad22:	2201      	movs	r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1f1      	bne.n	800ad16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ad32:	4b13      	ldr	r3, [pc, #76]	; (800ad80 <xTaskResumeAll+0x134>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad38:	4b10      	ldr	r3, [pc, #64]	; (800ad7c <xTaskResumeAll+0x130>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d009      	beq.n	800ad54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad40:	2301      	movs	r3, #1
 800ad42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad44:	4b0f      	ldr	r3, [pc, #60]	; (800ad84 <xTaskResumeAll+0x138>)
 800ad46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad54:	f7fe fe26 	bl	80099a4 <vPortExitCritical>

	return xAlreadyYielded;
 800ad58:	68bb      	ldr	r3, [r7, #8]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20004d00 	.word	0x20004d00
 800ad68:	20004cd8 	.word	0x20004cd8
 800ad6c:	20004c98 	.word	0x20004c98
 800ad70:	20004ce0 	.word	0x20004ce0
 800ad74:	20004808 	.word	0x20004808
 800ad78:	20004804 	.word	0x20004804
 800ad7c:	20004cec 	.word	0x20004cec
 800ad80:	20004ce8 	.word	0x20004ce8
 800ad84:	e000ed04 	.word	0xe000ed04

0800ad88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad8e:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <xTaskGetTickCount+0x1c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad94:	687b      	ldr	r3, [r7, #4]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	20004cdc 	.word	0x20004cdc

0800ada8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adb2:	4b4f      	ldr	r3, [pc, #316]	; (800aef0 <xTaskIncrementTick+0x148>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f040 808f 	bne.w	800aeda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800adbc:	4b4d      	ldr	r3, [pc, #308]	; (800aef4 <xTaskIncrementTick+0x14c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3301      	adds	r3, #1
 800adc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800adc4:	4a4b      	ldr	r2, [pc, #300]	; (800aef4 <xTaskIncrementTick+0x14c>)
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d120      	bne.n	800ae12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800add0:	4b49      	ldr	r3, [pc, #292]	; (800aef8 <xTaskIncrementTick+0x150>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <xTaskIncrementTick+0x48>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	603b      	str	r3, [r7, #0]
}
 800adec:	bf00      	nop
 800adee:	e7fe      	b.n	800adee <xTaskIncrementTick+0x46>
 800adf0:	4b41      	ldr	r3, [pc, #260]	; (800aef8 <xTaskIncrementTick+0x150>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	4b41      	ldr	r3, [pc, #260]	; (800aefc <xTaskIncrementTick+0x154>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a3f      	ldr	r2, [pc, #252]	; (800aef8 <xTaskIncrementTick+0x150>)
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	4a3f      	ldr	r2, [pc, #252]	; (800aefc <xTaskIncrementTick+0x154>)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	4b3e      	ldr	r3, [pc, #248]	; (800af00 <xTaskIncrementTick+0x158>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	4a3d      	ldr	r2, [pc, #244]	; (800af00 <xTaskIncrementTick+0x158>)
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	f000 fad1 	bl	800b3b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae12:	4b3c      	ldr	r3, [pc, #240]	; (800af04 <xTaskIncrementTick+0x15c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d349      	bcc.n	800aeb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae1c:	4b36      	ldr	r3, [pc, #216]	; (800aef8 <xTaskIncrementTick+0x150>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d104      	bne.n	800ae30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae26:	4b37      	ldr	r3, [pc, #220]	; (800af04 <xTaskIncrementTick+0x15c>)
 800ae28:	f04f 32ff 	mov.w	r2, #4294967295
 800ae2c:	601a      	str	r2, [r3, #0]
					break;
 800ae2e:	e03f      	b.n	800aeb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae30:	4b31      	ldr	r3, [pc, #196]	; (800aef8 <xTaskIncrementTick+0x150>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d203      	bcs.n	800ae50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae48:	4a2e      	ldr	r2, [pc, #184]	; (800af04 <xTaskIncrementTick+0x15c>)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae4e:	e02f      	b.n	800aeb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	3304      	adds	r3, #4
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fe fc21 	bl	800969c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d004      	beq.n	800ae6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	3318      	adds	r3, #24
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe fc18 	bl	800969c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae70:	4b25      	ldr	r3, [pc, #148]	; (800af08 <xTaskIncrementTick+0x160>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d903      	bls.n	800ae80 <xTaskIncrementTick+0xd8>
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	4a22      	ldr	r2, [pc, #136]	; (800af08 <xTaskIncrementTick+0x160>)
 800ae7e:	6013      	str	r3, [r2, #0]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae84:	4613      	mov	r3, r2
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4a1f      	ldr	r2, [pc, #124]	; (800af0c <xTaskIncrementTick+0x164>)
 800ae8e:	441a      	add	r2, r3
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	3304      	adds	r3, #4
 800ae94:	4619      	mov	r1, r3
 800ae96:	4610      	mov	r0, r2
 800ae98:	f7fe fba3 	bl	80095e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea0:	4b1b      	ldr	r3, [pc, #108]	; (800af10 <xTaskIncrementTick+0x168>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d3b8      	bcc.n	800ae1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aeae:	e7b5      	b.n	800ae1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aeb0:	4b17      	ldr	r3, [pc, #92]	; (800af10 <xTaskIncrementTick+0x168>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb6:	4915      	ldr	r1, [pc, #84]	; (800af0c <xTaskIncrementTick+0x164>)
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	440b      	add	r3, r1
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d901      	bls.n	800aecc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aec8:	2301      	movs	r3, #1
 800aeca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aecc:	4b11      	ldr	r3, [pc, #68]	; (800af14 <xTaskIncrementTick+0x16c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d007      	beq.n	800aee4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aed4:	2301      	movs	r3, #1
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	e004      	b.n	800aee4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aeda:	4b0f      	ldr	r3, [pc, #60]	; (800af18 <xTaskIncrementTick+0x170>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3301      	adds	r3, #1
 800aee0:	4a0d      	ldr	r2, [pc, #52]	; (800af18 <xTaskIncrementTick+0x170>)
 800aee2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aee4:	697b      	ldr	r3, [r7, #20]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3718      	adds	r7, #24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	20004d00 	.word	0x20004d00
 800aef4:	20004cdc 	.word	0x20004cdc
 800aef8:	20004c90 	.word	0x20004c90
 800aefc:	20004c94 	.word	0x20004c94
 800af00:	20004cf0 	.word	0x20004cf0
 800af04:	20004cf8 	.word	0x20004cf8
 800af08:	20004ce0 	.word	0x20004ce0
 800af0c:	20004808 	.word	0x20004808
 800af10:	20004804 	.word	0x20004804
 800af14:	20004cec 	.word	0x20004cec
 800af18:	20004ce8 	.word	0x20004ce8

0800af1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af22:	4b28      	ldr	r3, [pc, #160]	; (800afc4 <vTaskSwitchContext+0xa8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af2a:	4b27      	ldr	r3, [pc, #156]	; (800afc8 <vTaskSwitchContext+0xac>)
 800af2c:	2201      	movs	r2, #1
 800af2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af30:	e041      	b.n	800afb6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800af32:	4b25      	ldr	r3, [pc, #148]	; (800afc8 <vTaskSwitchContext+0xac>)
 800af34:	2200      	movs	r2, #0
 800af36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af38:	4b24      	ldr	r3, [pc, #144]	; (800afcc <vTaskSwitchContext+0xb0>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	60fb      	str	r3, [r7, #12]
 800af3e:	e010      	b.n	800af62 <vTaskSwitchContext+0x46>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10a      	bne.n	800af5c <vTaskSwitchContext+0x40>
	__asm volatile
 800af46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	607b      	str	r3, [r7, #4]
}
 800af58:	bf00      	nop
 800af5a:	e7fe      	b.n	800af5a <vTaskSwitchContext+0x3e>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3b01      	subs	r3, #1
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	491b      	ldr	r1, [pc, #108]	; (800afd0 <vTaskSwitchContext+0xb4>)
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	440b      	add	r3, r1
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0e4      	beq.n	800af40 <vTaskSwitchContext+0x24>
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <vTaskSwitchContext+0xb4>)
 800af82:	4413      	add	r3, r2
 800af84:	60bb      	str	r3, [r7, #8]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	605a      	str	r2, [r3, #4]
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	3308      	adds	r3, #8
 800af98:	429a      	cmp	r2, r3
 800af9a:	d104      	bne.n	800afa6 <vTaskSwitchContext+0x8a>
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	605a      	str	r2, [r3, #4]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	4a09      	ldr	r2, [pc, #36]	; (800afd4 <vTaskSwitchContext+0xb8>)
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	4a06      	ldr	r2, [pc, #24]	; (800afcc <vTaskSwitchContext+0xb0>)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6013      	str	r3, [r2, #0]
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	20004d00 	.word	0x20004d00
 800afc8:	20004cec 	.word	0x20004cec
 800afcc:	20004ce0 	.word	0x20004ce0
 800afd0:	20004808 	.word	0x20004808
 800afd4:	20004804 	.word	0x20004804

0800afd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	60fb      	str	r3, [r7, #12]
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800affe:	4b07      	ldr	r3, [pc, #28]	; (800b01c <vTaskPlaceOnEventList+0x44>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3318      	adds	r3, #24
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7fe fb0f 	bl	800962a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b00c:	2101      	movs	r1, #1
 800b00e:	6838      	ldr	r0, [r7, #0]
 800b010:	f000 fa7c 	bl	800b50c <prvAddCurrentTaskToDelayedList>
}
 800b014:	bf00      	nop
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20004804 	.word	0x20004804

0800b020 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10a      	bne.n	800b048 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	617b      	str	r3, [r7, #20]
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b048:	4b0a      	ldr	r3, [pc, #40]	; (800b074 <vTaskPlaceOnEventListRestricted+0x54>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3318      	adds	r3, #24
 800b04e:	4619      	mov	r1, r3
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f7fe fac6 	bl	80095e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b05c:	f04f 33ff 	mov.w	r3, #4294967295
 800b060:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	68b8      	ldr	r0, [r7, #8]
 800b066:	f000 fa51 	bl	800b50c <prvAddCurrentTaskToDelayedList>
	}
 800b06a:	bf00      	nop
 800b06c:	3718      	adds	r7, #24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	20004804 	.word	0x20004804

0800b078 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10a      	bne.n	800b0a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	60fb      	str	r3, [r7, #12]
}
 800b0a0:	bf00      	nop
 800b0a2:	e7fe      	b.n	800b0a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	3318      	adds	r3, #24
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fe faf7 	bl	800969c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ae:	4b1e      	ldr	r3, [pc, #120]	; (800b128 <xTaskRemoveFromEventList+0xb0>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d11d      	bne.n	800b0f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe faee 	bl	800969c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c4:	4b19      	ldr	r3, [pc, #100]	; (800b12c <xTaskRemoveFromEventList+0xb4>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d903      	bls.n	800b0d4 <xTaskRemoveFromEventList+0x5c>
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	4a16      	ldr	r2, [pc, #88]	; (800b12c <xTaskRemoveFromEventList+0xb4>)
 800b0d2:	6013      	str	r3, [r2, #0]
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d8:	4613      	mov	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4a13      	ldr	r2, [pc, #76]	; (800b130 <xTaskRemoveFromEventList+0xb8>)
 800b0e2:	441a      	add	r2, r3
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7fe fa79 	bl	80095e2 <vListInsertEnd>
 800b0f0:	e005      	b.n	800b0fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	3318      	adds	r3, #24
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	480e      	ldr	r0, [pc, #56]	; (800b134 <xTaskRemoveFromEventList+0xbc>)
 800b0fa:	f7fe fa72 	bl	80095e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b102:	4b0d      	ldr	r3, [pc, #52]	; (800b138 <xTaskRemoveFromEventList+0xc0>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	429a      	cmp	r2, r3
 800b10a:	d905      	bls.n	800b118 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b10c:	2301      	movs	r3, #1
 800b10e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b110:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <xTaskRemoveFromEventList+0xc4>)
 800b112:	2201      	movs	r2, #1
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	e001      	b.n	800b11c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b118:	2300      	movs	r3, #0
 800b11a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b11c:	697b      	ldr	r3, [r7, #20]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	20004d00 	.word	0x20004d00
 800b12c:	20004ce0 	.word	0x20004ce0
 800b130:	20004808 	.word	0x20004808
 800b134:	20004c98 	.word	0x20004c98
 800b138:	20004804 	.word	0x20004804
 800b13c:	20004cec 	.word	0x20004cec

0800b140 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b148:	4b06      	ldr	r3, [pc, #24]	; (800b164 <vTaskInternalSetTimeOutState+0x24>)
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <vTaskInternalSetTimeOutState+0x28>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	605a      	str	r2, [r3, #4]
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	20004cf0 	.word	0x20004cf0
 800b168:	20004cdc 	.word	0x20004cdc

0800b16c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10a      	bne.n	800b192 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	613b      	str	r3, [r7, #16]
}
 800b18e:	bf00      	nop
 800b190:	e7fe      	b.n	800b190 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10a      	bne.n	800b1ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	60fb      	str	r3, [r7, #12]
}
 800b1aa:	bf00      	nop
 800b1ac:	e7fe      	b.n	800b1ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b1ae:	f7fe fbc9 	bl	8009944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1b2:	4b1d      	ldr	r3, [pc, #116]	; (800b228 <xTaskCheckForTimeOut+0xbc>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	69ba      	ldr	r2, [r7, #24]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ca:	d102      	bne.n	800b1d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	61fb      	str	r3, [r7, #28]
 800b1d0:	e023      	b.n	800b21a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	4b15      	ldr	r3, [pc, #84]	; (800b22c <xTaskCheckForTimeOut+0xc0>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d007      	beq.n	800b1ee <xTaskCheckForTimeOut+0x82>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d302      	bcc.n	800b1ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	61fb      	str	r3, [r7, #28]
 800b1ec:	e015      	b.n	800b21a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d20b      	bcs.n	800b210 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff ff9b 	bl	800b140 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b20a:	2300      	movs	r3, #0
 800b20c:	61fb      	str	r3, [r7, #28]
 800b20e:	e004      	b.n	800b21a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b216:	2301      	movs	r3, #1
 800b218:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b21a:	f7fe fbc3 	bl	80099a4 <vPortExitCritical>

	return xReturn;
 800b21e:	69fb      	ldr	r3, [r7, #28]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3720      	adds	r7, #32
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	20004cdc 	.word	0x20004cdc
 800b22c:	20004cf0 	.word	0x20004cf0

0800b230 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b230:	b480      	push	{r7}
 800b232:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b234:	4b03      	ldr	r3, [pc, #12]	; (800b244 <vTaskMissedYield+0x14>)
 800b236:	2201      	movs	r2, #1
 800b238:	601a      	str	r2, [r3, #0]
}
 800b23a:	bf00      	nop
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	20004cec 	.word	0x20004cec

0800b248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b250:	f000 f852 	bl	800b2f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b254:	4b06      	ldr	r3, [pc, #24]	; (800b270 <prvIdleTask+0x28>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d9f9      	bls.n	800b250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b25c:	4b05      	ldr	r3, [pc, #20]	; (800b274 <prvIdleTask+0x2c>)
 800b25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b262:	601a      	str	r2, [r3, #0]
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b26c:	e7f0      	b.n	800b250 <prvIdleTask+0x8>
 800b26e:	bf00      	nop
 800b270:	20004808 	.word	0x20004808
 800b274:	e000ed04 	.word	0xe000ed04

0800b278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b27e:	2300      	movs	r3, #0
 800b280:	607b      	str	r3, [r7, #4]
 800b282:	e00c      	b.n	800b29e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4a12      	ldr	r2, [pc, #72]	; (800b2d8 <prvInitialiseTaskLists+0x60>)
 800b290:	4413      	add	r3, r2
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe f978 	bl	8009588 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3301      	adds	r3, #1
 800b29c:	607b      	str	r3, [r7, #4]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b37      	cmp	r3, #55	; 0x37
 800b2a2:	d9ef      	bls.n	800b284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2a4:	480d      	ldr	r0, [pc, #52]	; (800b2dc <prvInitialiseTaskLists+0x64>)
 800b2a6:	f7fe f96f 	bl	8009588 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2aa:	480d      	ldr	r0, [pc, #52]	; (800b2e0 <prvInitialiseTaskLists+0x68>)
 800b2ac:	f7fe f96c 	bl	8009588 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2b0:	480c      	ldr	r0, [pc, #48]	; (800b2e4 <prvInitialiseTaskLists+0x6c>)
 800b2b2:	f7fe f969 	bl	8009588 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2b6:	480c      	ldr	r0, [pc, #48]	; (800b2e8 <prvInitialiseTaskLists+0x70>)
 800b2b8:	f7fe f966 	bl	8009588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2bc:	480b      	ldr	r0, [pc, #44]	; (800b2ec <prvInitialiseTaskLists+0x74>)
 800b2be:	f7fe f963 	bl	8009588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2c2:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <prvInitialiseTaskLists+0x78>)
 800b2c4:	4a05      	ldr	r2, [pc, #20]	; (800b2dc <prvInitialiseTaskLists+0x64>)
 800b2c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	; (800b2f4 <prvInitialiseTaskLists+0x7c>)
 800b2ca:	4a05      	ldr	r2, [pc, #20]	; (800b2e0 <prvInitialiseTaskLists+0x68>)
 800b2cc:	601a      	str	r2, [r3, #0]
}
 800b2ce:	bf00      	nop
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20004808 	.word	0x20004808
 800b2dc:	20004c68 	.word	0x20004c68
 800b2e0:	20004c7c 	.word	0x20004c7c
 800b2e4:	20004c98 	.word	0x20004c98
 800b2e8:	20004cac 	.word	0x20004cac
 800b2ec:	20004cc4 	.word	0x20004cc4
 800b2f0:	20004c90 	.word	0x20004c90
 800b2f4:	20004c94 	.word	0x20004c94

0800b2f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2fe:	e019      	b.n	800b334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b300:	f7fe fb20 	bl	8009944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b304:	4b10      	ldr	r3, [pc, #64]	; (800b348 <prvCheckTasksWaitingTermination+0x50>)
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3304      	adds	r3, #4
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe f9c3 	bl	800969c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b316:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <prvCheckTasksWaitingTermination+0x54>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	3b01      	subs	r3, #1
 800b31c:	4a0b      	ldr	r2, [pc, #44]	; (800b34c <prvCheckTasksWaitingTermination+0x54>)
 800b31e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b320:	4b0b      	ldr	r3, [pc, #44]	; (800b350 <prvCheckTasksWaitingTermination+0x58>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3b01      	subs	r3, #1
 800b326:	4a0a      	ldr	r2, [pc, #40]	; (800b350 <prvCheckTasksWaitingTermination+0x58>)
 800b328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b32a:	f7fe fb3b 	bl	80099a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f810 	bl	800b354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b334:	4b06      	ldr	r3, [pc, #24]	; (800b350 <prvCheckTasksWaitingTermination+0x58>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1e1      	bne.n	800b300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b33c:	bf00      	nop
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20004cac 	.word	0x20004cac
 800b34c:	20004cd8 	.word	0x20004cd8
 800b350:	20004cc0 	.word	0x20004cc0

0800b354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b362:	2b00      	cmp	r3, #0
 800b364:	d108      	bne.n	800b378 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fd ffee 	bl	800934c <vPortFree>
				vPortFree( pxTCB );
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f7fd ffeb 	bl	800934c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b376:	e018      	b.n	800b3aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d103      	bne.n	800b38a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7fd ffe2 	bl	800934c <vPortFree>
	}
 800b388:	e00f      	b.n	800b3aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b390:	2b02      	cmp	r3, #2
 800b392:	d00a      	beq.n	800b3aa <prvDeleteTCB+0x56>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	60fb      	str	r3, [r7, #12]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <prvDeleteTCB+0x54>
	}
 800b3aa:	bf00      	nop
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
	...

0800b3b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ba:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <prvResetNextTaskUnblockTime+0x38>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d104      	bne.n	800b3ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3c4:	4b0a      	ldr	r3, [pc, #40]	; (800b3f0 <prvResetNextTaskUnblockTime+0x3c>)
 800b3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3cc:	e008      	b.n	800b3e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ce:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <prvResetNextTaskUnblockTime+0x38>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	4a04      	ldr	r2, [pc, #16]	; (800b3f0 <prvResetNextTaskUnblockTime+0x3c>)
 800b3de:	6013      	str	r3, [r2, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	20004c90 	.word	0x20004c90
 800b3f0:	20004cf8 	.word	0x20004cf8

0800b3f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3fa:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <xTaskGetSchedulerState+0x34>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d102      	bne.n	800b408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b402:	2301      	movs	r3, #1
 800b404:	607b      	str	r3, [r7, #4]
 800b406:	e008      	b.n	800b41a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b408:	4b08      	ldr	r3, [pc, #32]	; (800b42c <xTaskGetSchedulerState+0x38>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d102      	bne.n	800b416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b410:	2302      	movs	r3, #2
 800b412:	607b      	str	r3, [r7, #4]
 800b414:	e001      	b.n	800b41a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b416:	2300      	movs	r3, #0
 800b418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b41a:	687b      	ldr	r3, [r7, #4]
	}
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	20004ce4 	.word	0x20004ce4
 800b42c:	20004d00 	.word	0x20004d00

0800b430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b43c:	2300      	movs	r3, #0
 800b43e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d056      	beq.n	800b4f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b446:	4b2e      	ldr	r3, [pc, #184]	; (800b500 <xTaskPriorityDisinherit+0xd0>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d00a      	beq.n	800b466 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	60fb      	str	r3, [r7, #12]
}
 800b462:	bf00      	nop
 800b464:	e7fe      	b.n	800b464 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10a      	bne.n	800b484 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	60bb      	str	r3, [r7, #8]
}
 800b480:	bf00      	nop
 800b482:	e7fe      	b.n	800b482 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b488:	1e5a      	subs	r2, r3, #1
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b496:	429a      	cmp	r2, r3
 800b498:	d02c      	beq.n	800b4f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d128      	bne.n	800b4f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe f8f8 	bl	800969c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c4:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <xTaskPriorityDisinherit+0xd4>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d903      	bls.n	800b4d4 <xTaskPriorityDisinherit+0xa4>
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d0:	4a0c      	ldr	r2, [pc, #48]	; (800b504 <xTaskPriorityDisinherit+0xd4>)
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d8:	4613      	mov	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4a09      	ldr	r2, [pc, #36]	; (800b508 <xTaskPriorityDisinherit+0xd8>)
 800b4e2:	441a      	add	r2, r3
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	f7fe f879 	bl	80095e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4f4:	697b      	ldr	r3, [r7, #20]
	}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20004804 	.word	0x20004804
 800b504:	20004ce0 	.word	0x20004ce0
 800b508:	20004808 	.word	0x20004808

0800b50c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b516:	4b21      	ldr	r3, [pc, #132]	; (800b59c <prvAddCurrentTaskToDelayedList+0x90>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b51c:	4b20      	ldr	r3, [pc, #128]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	3304      	adds	r3, #4
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe f8ba 	bl	800969c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52e:	d10a      	bne.n	800b546 <prvAddCurrentTaskToDelayedList+0x3a>
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d007      	beq.n	800b546 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b536:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3304      	adds	r3, #4
 800b53c:	4619      	mov	r1, r3
 800b53e:	4819      	ldr	r0, [pc, #100]	; (800b5a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b540:	f7fe f84f 	bl	80095e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b544:	e026      	b.n	800b594 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4413      	add	r3, r2
 800b54c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b54e:	4b14      	ldr	r3, [pc, #80]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d209      	bcs.n	800b572 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b55e:	4b12      	ldr	r3, [pc, #72]	; (800b5a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	4b0f      	ldr	r3, [pc, #60]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	3304      	adds	r3, #4
 800b568:	4619      	mov	r1, r3
 800b56a:	4610      	mov	r0, r2
 800b56c:	f7fe f85d 	bl	800962a <vListInsert>
}
 800b570:	e010      	b.n	800b594 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b572:	4b0e      	ldr	r3, [pc, #56]	; (800b5ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	4b0a      	ldr	r3, [pc, #40]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3304      	adds	r3, #4
 800b57c:	4619      	mov	r1, r3
 800b57e:	4610      	mov	r0, r2
 800b580:	f7fe f853 	bl	800962a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b584:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d202      	bcs.n	800b594 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b58e:	4a08      	ldr	r2, [pc, #32]	; (800b5b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	6013      	str	r3, [r2, #0]
}
 800b594:	bf00      	nop
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	20004cdc 	.word	0x20004cdc
 800b5a0:	20004804 	.word	0x20004804
 800b5a4:	20004cc4 	.word	0x20004cc4
 800b5a8:	20004c94 	.word	0x20004c94
 800b5ac:	20004c90 	.word	0x20004c90
 800b5b0:	20004cf8 	.word	0x20004cf8

0800b5b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08a      	sub	sp, #40	; 0x28
 800b5b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5be:	f000 fb07 	bl	800bbd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5c2:	4b1c      	ldr	r3, [pc, #112]	; (800b634 <xTimerCreateTimerTask+0x80>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d021      	beq.n	800b60e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5d2:	1d3a      	adds	r2, r7, #4
 800b5d4:	f107 0108 	add.w	r1, r7, #8
 800b5d8:	f107 030c 	add.w	r3, r7, #12
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fd fdcf 	bl	8009180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b5e2:	6879      	ldr	r1, [r7, #4]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	9202      	str	r2, [sp, #8]
 800b5ea:	9301      	str	r3, [sp, #4]
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	460a      	mov	r2, r1
 800b5f4:	4910      	ldr	r1, [pc, #64]	; (800b638 <xTimerCreateTimerTask+0x84>)
 800b5f6:	4811      	ldr	r0, [pc, #68]	; (800b63c <xTimerCreateTimerTask+0x88>)
 800b5f8:	f7ff f86c 	bl	800a6d4 <xTaskCreateStatic>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	4a10      	ldr	r2, [pc, #64]	; (800b640 <xTimerCreateTimerTask+0x8c>)
 800b600:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b602:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <xTimerCreateTimerTask+0x8c>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b60a:	2301      	movs	r3, #1
 800b60c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10a      	bne.n	800b62a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	613b      	str	r3, [r7, #16]
}
 800b626:	bf00      	nop
 800b628:	e7fe      	b.n	800b628 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b62a:	697b      	ldr	r3, [r7, #20]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3718      	adds	r7, #24
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	20004d34 	.word	0x20004d34
 800b638:	0800efc4 	.word	0x0800efc4
 800b63c:	0800b779 	.word	0x0800b779
 800b640:	20004d38 	.word	0x20004d38

0800b644 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08a      	sub	sp, #40	; 0x28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b652:	2300      	movs	r3, #0
 800b654:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10a      	bne.n	800b672 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	623b      	str	r3, [r7, #32]
}
 800b66e:	bf00      	nop
 800b670:	e7fe      	b.n	800b670 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b672:	4b1a      	ldr	r3, [pc, #104]	; (800b6dc <xTimerGenericCommand+0x98>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d02a      	beq.n	800b6d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b05      	cmp	r3, #5
 800b68a:	dc18      	bgt.n	800b6be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b68c:	f7ff feb2 	bl	800b3f4 <xTaskGetSchedulerState>
 800b690:	4603      	mov	r3, r0
 800b692:	2b02      	cmp	r3, #2
 800b694:	d109      	bne.n	800b6aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b696:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <xTimerGenericCommand+0x98>)
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	f107 0110 	add.w	r1, r7, #16
 800b69e:	2300      	movs	r3, #0
 800b6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a2:	f7fe fbaf 	bl	8009e04 <xQueueGenericSend>
 800b6a6:	6278      	str	r0, [r7, #36]	; 0x24
 800b6a8:	e012      	b.n	800b6d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6aa:	4b0c      	ldr	r3, [pc, #48]	; (800b6dc <xTimerGenericCommand+0x98>)
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	f107 0110 	add.w	r1, r7, #16
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f7fe fba5 	bl	8009e04 <xQueueGenericSend>
 800b6ba:	6278      	str	r0, [r7, #36]	; 0x24
 800b6bc:	e008      	b.n	800b6d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6be:	4b07      	ldr	r3, [pc, #28]	; (800b6dc <xTimerGenericCommand+0x98>)
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	f107 0110 	add.w	r1, r7, #16
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	f7fe fc99 	bl	800a000 <xQueueGenericSendFromISR>
 800b6ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3728      	adds	r7, #40	; 0x28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20004d34 	.word	0x20004d34

0800b6e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af02      	add	r7, sp, #8
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ea:	4b22      	ldr	r3, [pc, #136]	; (800b774 <prvProcessExpiredTimer+0x94>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fd ffcf 	bl	800969c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b704:	f003 0304 	and.w	r3, r3, #4
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d022      	beq.n	800b752 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	699a      	ldr	r2, [r3, #24]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	18d1      	adds	r1, r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	6978      	ldr	r0, [r7, #20]
 800b71a:	f000 f8d1 	bl	800b8c0 <prvInsertTimerInActiveList>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d01f      	beq.n	800b764 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b724:	2300      	movs	r3, #0
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	2300      	movs	r3, #0
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	2100      	movs	r1, #0
 800b72e:	6978      	ldr	r0, [r7, #20]
 800b730:	f7ff ff88 	bl	800b644 <xTimerGenericCommand>
 800b734:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d113      	bne.n	800b764 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	60fb      	str	r3, [r7, #12]
}
 800b74e:	bf00      	nop
 800b750:	e7fe      	b.n	800b750 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b758:	f023 0301 	bic.w	r3, r3, #1
 800b75c:	b2da      	uxtb	r2, r3
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	6a1b      	ldr	r3, [r3, #32]
 800b768:	6978      	ldr	r0, [r7, #20]
 800b76a:	4798      	blx	r3
}
 800b76c:	bf00      	nop
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20004d2c 	.word	0x20004d2c

0800b778 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b780:	f107 0308 	add.w	r3, r7, #8
 800b784:	4618      	mov	r0, r3
 800b786:	f000 f857 	bl	800b838 <prvGetNextExpireTime>
 800b78a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4619      	mov	r1, r3
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 f803 	bl	800b79c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b796:	f000 f8d5 	bl	800b944 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b79a:	e7f1      	b.n	800b780 <prvTimerTask+0x8>

0800b79c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7a6:	f7ff fa43 	bl	800ac30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7aa:	f107 0308 	add.w	r3, r7, #8
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 f866 	bl	800b880 <prvSampleTimeNow>
 800b7b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d130      	bne.n	800b81e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10a      	bne.n	800b7d8 <prvProcessTimerOrBlockTask+0x3c>
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d806      	bhi.n	800b7d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b7ca:	f7ff fa3f 	bl	800ac4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b7ce:	68f9      	ldr	r1, [r7, #12]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7ff ff85 	bl	800b6e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b7d6:	e024      	b.n	800b822 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d008      	beq.n	800b7f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b7de:	4b13      	ldr	r3, [pc, #76]	; (800b82c <prvProcessTimerOrBlockTask+0x90>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <prvProcessTimerOrBlockTask+0x50>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e000      	b.n	800b7ee <prvProcessTimerOrBlockTask+0x52>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b7f0:	4b0f      	ldr	r3, [pc, #60]	; (800b830 <prvProcessTimerOrBlockTask+0x94>)
 800b7f2:	6818      	ldr	r0, [r3, #0]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	f7fe ff35 	bl	800a66c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b802:	f7ff fa23 	bl	800ac4c <xTaskResumeAll>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10a      	bne.n	800b822 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b80c:	4b09      	ldr	r3, [pc, #36]	; (800b834 <prvProcessTimerOrBlockTask+0x98>)
 800b80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	f3bf 8f6f 	isb	sy
}
 800b81c:	e001      	b.n	800b822 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b81e:	f7ff fa15 	bl	800ac4c <xTaskResumeAll>
}
 800b822:	bf00      	nop
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20004d30 	.word	0x20004d30
 800b830:	20004d34 	.word	0x20004d34
 800b834:	e000ed04 	.word	0xe000ed04

0800b838 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b840:	4b0e      	ldr	r3, [pc, #56]	; (800b87c <prvGetNextExpireTime+0x44>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <prvGetNextExpireTime+0x16>
 800b84a:	2201      	movs	r2, #1
 800b84c:	e000      	b.n	800b850 <prvGetNextExpireTime+0x18>
 800b84e:	2200      	movs	r2, #0
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d105      	bne.n	800b868 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b85c:	4b07      	ldr	r3, [pc, #28]	; (800b87c <prvGetNextExpireTime+0x44>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	60fb      	str	r3, [r7, #12]
 800b866:	e001      	b.n	800b86c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b868:	2300      	movs	r3, #0
 800b86a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b86c:	68fb      	ldr	r3, [r7, #12]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	20004d2c 	.word	0x20004d2c

0800b880 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b888:	f7ff fa7e 	bl	800ad88 <xTaskGetTickCount>
 800b88c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b88e:	4b0b      	ldr	r3, [pc, #44]	; (800b8bc <prvSampleTimeNow+0x3c>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	429a      	cmp	r2, r3
 800b896:	d205      	bcs.n	800b8a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b898:	f000 f936 	bl	800bb08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	e002      	b.n	800b8aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8aa:	4a04      	ldr	r2, [pc, #16]	; (800b8bc <prvSampleTimeNow+0x3c>)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20004d3c 	.word	0x20004d3c

0800b8c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d812      	bhi.n	800b90c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	1ad2      	subs	r2, r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d302      	bcc.n	800b8fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	617b      	str	r3, [r7, #20]
 800b8f8:	e01b      	b.n	800b932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b8fa:	4b10      	ldr	r3, [pc, #64]	; (800b93c <prvInsertTimerInActiveList+0x7c>)
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3304      	adds	r3, #4
 800b902:	4619      	mov	r1, r3
 800b904:	4610      	mov	r0, r2
 800b906:	f7fd fe90 	bl	800962a <vListInsert>
 800b90a:	e012      	b.n	800b932 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	429a      	cmp	r2, r3
 800b912:	d206      	bcs.n	800b922 <prvInsertTimerInActiveList+0x62>
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d302      	bcc.n	800b922 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b91c:	2301      	movs	r3, #1
 800b91e:	617b      	str	r3, [r7, #20]
 800b920:	e007      	b.n	800b932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b922:	4b07      	ldr	r3, [pc, #28]	; (800b940 <prvInsertTimerInActiveList+0x80>)
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3304      	adds	r3, #4
 800b92a:	4619      	mov	r1, r3
 800b92c:	4610      	mov	r0, r2
 800b92e:	f7fd fe7c 	bl	800962a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b932:	697b      	ldr	r3, [r7, #20]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	20004d30 	.word	0x20004d30
 800b940:	20004d2c 	.word	0x20004d2c

0800b944 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08e      	sub	sp, #56	; 0x38
 800b948:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b94a:	e0ca      	b.n	800bae2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	da18      	bge.n	800b984 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b952:	1d3b      	adds	r3, r7, #4
 800b954:	3304      	adds	r3, #4
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	61fb      	str	r3, [r7, #28]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b97a:	6850      	ldr	r0, [r2, #4]
 800b97c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b97e:	6892      	ldr	r2, [r2, #8]
 800b980:	4611      	mov	r1, r2
 800b982:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	f2c0 80ab 	blt.w	800bae2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99a:	3304      	adds	r3, #4
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fd fe7d 	bl	800969c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9a2:	463b      	mov	r3, r7
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff ff6b 	bl	800b880 <prvSampleTimeNow>
 800b9aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b09      	cmp	r3, #9
 800b9b0:	f200 8096 	bhi.w	800bae0 <prvProcessReceivedCommands+0x19c>
 800b9b4:	a201      	add	r2, pc, #4	; (adr r2, 800b9bc <prvProcessReceivedCommands+0x78>)
 800b9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ba:	bf00      	nop
 800b9bc:	0800b9e5 	.word	0x0800b9e5
 800b9c0:	0800b9e5 	.word	0x0800b9e5
 800b9c4:	0800b9e5 	.word	0x0800b9e5
 800b9c8:	0800ba59 	.word	0x0800ba59
 800b9cc:	0800ba6d 	.word	0x0800ba6d
 800b9d0:	0800bab7 	.word	0x0800bab7
 800b9d4:	0800b9e5 	.word	0x0800b9e5
 800b9d8:	0800b9e5 	.word	0x0800b9e5
 800b9dc:	0800ba59 	.word	0x0800ba59
 800b9e0:	0800ba6d 	.word	0x0800ba6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ea:	f043 0301 	orr.w	r3, r3, #1
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	18d1      	adds	r1, r2, r3
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba04:	f7ff ff5c 	bl	800b8c0 <prvInsertTimerInActiveList>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d069      	beq.n	800bae2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba1c:	f003 0304 	and.w	r3, r3, #4
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d05e      	beq.n	800bae2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	441a      	add	r2, r3
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	2300      	movs	r3, #0
 800ba32:	2100      	movs	r1, #0
 800ba34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba36:	f7ff fe05 	bl	800b644 <xTimerGenericCommand>
 800ba3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d14f      	bne.n	800bae2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	61bb      	str	r3, [r7, #24]
}
 800ba54:	bf00      	nop
 800ba56:	e7fe      	b.n	800ba56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba5e:	f023 0301 	bic.w	r3, r3, #1
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ba6a:	e03a      	b.n	800bae2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba72:	f043 0301 	orr.w	r3, r3, #1
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10a      	bne.n	800baa2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	617b      	str	r3, [r7, #20]
}
 800ba9e:	bf00      	nop
 800baa0:	e7fe      	b.n	800baa0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800baa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa4:	699a      	ldr	r2, [r3, #24]
 800baa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa8:	18d1      	adds	r1, r2, r3
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bab0:	f7ff ff06 	bl	800b8c0 <prvInsertTimerInActiveList>
					break;
 800bab4:	e015      	b.n	800bae2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800babc:	f003 0302 	and.w	r3, r3, #2
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d103      	bne.n	800bacc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bac6:	f7fd fc41 	bl	800934c <vPortFree>
 800baca:	e00a      	b.n	800bae2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bad2:	f023 0301 	bic.w	r3, r3, #1
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bade:	e000      	b.n	800bae2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bae0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bae2:	4b08      	ldr	r3, [pc, #32]	; (800bb04 <prvProcessReceivedCommands+0x1c0>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	1d39      	adds	r1, r7, #4
 800bae8:	2200      	movs	r2, #0
 800baea:	4618      	mov	r0, r3
 800baec:	f7fe fb24 	bl	800a138 <xQueueReceive>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f47f af2a 	bne.w	800b94c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800baf8:	bf00      	nop
 800bafa:	bf00      	nop
 800bafc:	3730      	adds	r7, #48	; 0x30
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	20004d34 	.word	0x20004d34

0800bb08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb0e:	e048      	b.n	800bba2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb10:	4b2d      	ldr	r3, [pc, #180]	; (800bbc8 <prvSwitchTimerLists+0xc0>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb1a:	4b2b      	ldr	r3, [pc, #172]	; (800bbc8 <prvSwitchTimerLists+0xc0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3304      	adds	r3, #4
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fd fdb7 	bl	800969c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6a1b      	ldr	r3, [r3, #32]
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb3c:	f003 0304 	and.w	r3, r3, #4
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d02e      	beq.n	800bba2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d90e      	bls.n	800bb74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb62:	4b19      	ldr	r3, [pc, #100]	; (800bbc8 <prvSwitchTimerLists+0xc0>)
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3304      	adds	r3, #4
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	f7fd fd5c 	bl	800962a <vListInsert>
 800bb72:	e016      	b.n	800bba2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb74:	2300      	movs	r3, #0
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f7ff fd60 	bl	800b644 <xTimerGenericCommand>
 800bb84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	603b      	str	r3, [r7, #0]
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bba2:	4b09      	ldr	r3, [pc, #36]	; (800bbc8 <prvSwitchTimerLists+0xc0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1b1      	bne.n	800bb10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbac:	4b06      	ldr	r3, [pc, #24]	; (800bbc8 <prvSwitchTimerLists+0xc0>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbb2:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <prvSwitchTimerLists+0xc4>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a04      	ldr	r2, [pc, #16]	; (800bbc8 <prvSwitchTimerLists+0xc0>)
 800bbb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbba:	4a04      	ldr	r2, [pc, #16]	; (800bbcc <prvSwitchTimerLists+0xc4>)
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	6013      	str	r3, [r2, #0]
}
 800bbc0:	bf00      	nop
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	20004d2c 	.word	0x20004d2c
 800bbcc:	20004d30 	.word	0x20004d30

0800bbd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bbd6:	f7fd feb5 	bl	8009944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bbda:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <prvCheckForValidListAndQueue+0x60>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d120      	bne.n	800bc24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bbe2:	4814      	ldr	r0, [pc, #80]	; (800bc34 <prvCheckForValidListAndQueue+0x64>)
 800bbe4:	f7fd fcd0 	bl	8009588 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bbe8:	4813      	ldr	r0, [pc, #76]	; (800bc38 <prvCheckForValidListAndQueue+0x68>)
 800bbea:	f7fd fccd 	bl	8009588 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bbee:	4b13      	ldr	r3, [pc, #76]	; (800bc3c <prvCheckForValidListAndQueue+0x6c>)
 800bbf0:	4a10      	ldr	r2, [pc, #64]	; (800bc34 <prvCheckForValidListAndQueue+0x64>)
 800bbf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bbf4:	4b12      	ldr	r3, [pc, #72]	; (800bc40 <prvCheckForValidListAndQueue+0x70>)
 800bbf6:	4a10      	ldr	r2, [pc, #64]	; (800bc38 <prvCheckForValidListAndQueue+0x68>)
 800bbf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <prvCheckForValidListAndQueue+0x74>)
 800bc00:	4a11      	ldr	r2, [pc, #68]	; (800bc48 <prvCheckForValidListAndQueue+0x78>)
 800bc02:	2110      	movs	r1, #16
 800bc04:	200a      	movs	r0, #10
 800bc06:	f7fe f827 	bl	8009c58 <xQueueGenericCreateStatic>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	4a08      	ldr	r2, [pc, #32]	; (800bc30 <prvCheckForValidListAndQueue+0x60>)
 800bc0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc10:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <prvCheckForValidListAndQueue+0x60>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d005      	beq.n	800bc24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc18:	4b05      	ldr	r3, [pc, #20]	; (800bc30 <prvCheckForValidListAndQueue+0x60>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	490b      	ldr	r1, [pc, #44]	; (800bc4c <prvCheckForValidListAndQueue+0x7c>)
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe fcfa 	bl	800a618 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc24:	f7fd febe 	bl	80099a4 <vPortExitCritical>
}
 800bc28:	bf00      	nop
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	20004d34 	.word	0x20004d34
 800bc34:	20004d04 	.word	0x20004d04
 800bc38:	20004d18 	.word	0x20004d18
 800bc3c:	20004d2c 	.word	0x20004d2c
 800bc40:	20004d30 	.word	0x20004d30
 800bc44:	20004de0 	.word	0x20004de0
 800bc48:	20004d40 	.word	0x20004d40
 800bc4c:	0800efcc 	.word	0x0800efcc

0800bc50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc60:	f002 fc96 	bl	800e590 <USBD_static_malloc>
 800bc64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d109      	bne.n	800bc80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	32b0      	adds	r2, #176	; 0xb0
 800bc76:	2100      	movs	r1, #0
 800bc78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	e0d4      	b.n	800be2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bc80:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bc84:	2100      	movs	r1, #0
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f002 fce6 	bl	800e658 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	32b0      	adds	r2, #176	; 0xb0
 800bc96:	68f9      	ldr	r1, [r7, #12]
 800bc98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	32b0      	adds	r2, #176	; 0xb0
 800bca6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	7c1b      	ldrb	r3, [r3, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d138      	bne.n	800bd2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bcb8:	4b5e      	ldr	r3, [pc, #376]	; (800be34 <USBD_CDC_Init+0x1e4>)
 800bcba:	7819      	ldrb	r1, [r3, #0]
 800bcbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f002 fb41 	bl	800e34a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bcc8:	4b5a      	ldr	r3, [pc, #360]	; (800be34 <USBD_CDC_Init+0x1e4>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	f003 020f 	and.w	r2, r3, #15
 800bcd0:	6879      	ldr	r1, [r7, #4]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	440b      	add	r3, r1
 800bcdc:	3324      	adds	r3, #36	; 0x24
 800bcde:	2201      	movs	r2, #1
 800bce0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bce2:	4b55      	ldr	r3, [pc, #340]	; (800be38 <USBD_CDC_Init+0x1e8>)
 800bce4:	7819      	ldrb	r1, [r3, #0]
 800bce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcea:	2202      	movs	r2, #2
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f002 fb2c 	bl	800e34a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bcf2:	4b51      	ldr	r3, [pc, #324]	; (800be38 <USBD_CDC_Init+0x1e8>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	f003 020f 	and.w	r2, r3, #15
 800bcfa:	6879      	ldr	r1, [r7, #4]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4413      	add	r3, r2
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	440b      	add	r3, r1
 800bd06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd0e:	4b4b      	ldr	r3, [pc, #300]	; (800be3c <USBD_CDC_Init+0x1ec>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	f003 020f 	and.w	r2, r3, #15
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	440b      	add	r3, r1
 800bd22:	3326      	adds	r3, #38	; 0x26
 800bd24:	2210      	movs	r2, #16
 800bd26:	801a      	strh	r2, [r3, #0]
 800bd28:	e035      	b.n	800bd96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd2a:	4b42      	ldr	r3, [pc, #264]	; (800be34 <USBD_CDC_Init+0x1e4>)
 800bd2c:	7819      	ldrb	r1, [r3, #0]
 800bd2e:	2340      	movs	r3, #64	; 0x40
 800bd30:	2202      	movs	r2, #2
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f002 fb09 	bl	800e34a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd38:	4b3e      	ldr	r3, [pc, #248]	; (800be34 <USBD_CDC_Init+0x1e4>)
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	f003 020f 	and.w	r2, r3, #15
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	440b      	add	r3, r1
 800bd4c:	3324      	adds	r3, #36	; 0x24
 800bd4e:	2201      	movs	r2, #1
 800bd50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd52:	4b39      	ldr	r3, [pc, #228]	; (800be38 <USBD_CDC_Init+0x1e8>)
 800bd54:	7819      	ldrb	r1, [r3, #0]
 800bd56:	2340      	movs	r3, #64	; 0x40
 800bd58:	2202      	movs	r2, #2
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f002 faf5 	bl	800e34a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd60:	4b35      	ldr	r3, [pc, #212]	; (800be38 <USBD_CDC_Init+0x1e8>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	f003 020f 	and.w	r2, r3, #15
 800bd68:	6879      	ldr	r1, [r7, #4]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	440b      	add	r3, r1
 800bd74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd78:	2201      	movs	r2, #1
 800bd7a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bd7c:	4b2f      	ldr	r3, [pc, #188]	; (800be3c <USBD_CDC_Init+0x1ec>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	f003 020f 	and.w	r2, r3, #15
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	440b      	add	r3, r1
 800bd90:	3326      	adds	r3, #38	; 0x26
 800bd92:	2210      	movs	r2, #16
 800bd94:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bd96:	4b29      	ldr	r3, [pc, #164]	; (800be3c <USBD_CDC_Init+0x1ec>)
 800bd98:	7819      	ldrb	r1, [r3, #0]
 800bd9a:	2308      	movs	r3, #8
 800bd9c:	2203      	movs	r2, #3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f002 fad3 	bl	800e34a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bda4:	4b25      	ldr	r3, [pc, #148]	; (800be3c <USBD_CDC_Init+0x1ec>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	f003 020f 	and.w	r2, r3, #15
 800bdac:	6879      	ldr	r1, [r7, #4]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	3324      	adds	r3, #36	; 0x24
 800bdba:	2201      	movs	r2, #1
 800bdbc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	33b0      	adds	r3, #176	; 0xb0
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d101      	bne.n	800bdf8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	e018      	b.n	800be2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	7c1b      	ldrb	r3, [r3, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10a      	bne.n	800be16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be00:	4b0d      	ldr	r3, [pc, #52]	; (800be38 <USBD_CDC_Init+0x1e8>)
 800be02:	7819      	ldrb	r1, [r3, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f002 fb8a 	bl	800e528 <USBD_LL_PrepareReceive>
 800be14:	e008      	b.n	800be28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be16:	4b08      	ldr	r3, [pc, #32]	; (800be38 <USBD_CDC_Init+0x1e8>)
 800be18:	7819      	ldrb	r1, [r3, #0]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be20:	2340      	movs	r3, #64	; 0x40
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f002 fb80 	bl	800e528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	2000011f 	.word	0x2000011f
 800be38:	20000120 	.word	0x20000120
 800be3c:	20000121 	.word	0x20000121

0800be40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800be4c:	4b3a      	ldr	r3, [pc, #232]	; (800bf38 <USBD_CDC_DeInit+0xf8>)
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	4619      	mov	r1, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f002 fa9f 	bl	800e396 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800be58:	4b37      	ldr	r3, [pc, #220]	; (800bf38 <USBD_CDC_DeInit+0xf8>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	f003 020f 	and.w	r2, r3, #15
 800be60:	6879      	ldr	r1, [r7, #4]
 800be62:	4613      	mov	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4413      	add	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	440b      	add	r3, r1
 800be6c:	3324      	adds	r3, #36	; 0x24
 800be6e:	2200      	movs	r2, #0
 800be70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800be72:	4b32      	ldr	r3, [pc, #200]	; (800bf3c <USBD_CDC_DeInit+0xfc>)
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f002 fa8c 	bl	800e396 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800be7e:	4b2f      	ldr	r3, [pc, #188]	; (800bf3c <USBD_CDC_DeInit+0xfc>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	f003 020f 	and.w	r2, r3, #15
 800be86:	6879      	ldr	r1, [r7, #4]
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	440b      	add	r3, r1
 800be92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be96:	2200      	movs	r2, #0
 800be98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800be9a:	4b29      	ldr	r3, [pc, #164]	; (800bf40 <USBD_CDC_DeInit+0x100>)
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f002 fa78 	bl	800e396 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bea6:	4b26      	ldr	r3, [pc, #152]	; (800bf40 <USBD_CDC_DeInit+0x100>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	f003 020f 	and.w	r2, r3, #15
 800beae:	6879      	ldr	r1, [r7, #4]
 800beb0:	4613      	mov	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	440b      	add	r3, r1
 800beba:	3324      	adds	r3, #36	; 0x24
 800bebc:	2200      	movs	r2, #0
 800bebe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bec0:	4b1f      	ldr	r3, [pc, #124]	; (800bf40 <USBD_CDC_DeInit+0x100>)
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	f003 020f 	and.w	r2, r3, #15
 800bec8:	6879      	ldr	r1, [r7, #4]
 800beca:	4613      	mov	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4413      	add	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	440b      	add	r3, r1
 800bed4:	3326      	adds	r3, #38	; 0x26
 800bed6:	2200      	movs	r2, #0
 800bed8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	32b0      	adds	r2, #176	; 0xb0
 800bee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d01f      	beq.n	800bf2c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	33b0      	adds	r3, #176	; 0xb0
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	32b0      	adds	r2, #176	; 0xb0
 800bf0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f002 fb4c 	bl	800e5ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	32b0      	adds	r2, #176	; 0xb0
 800bf1e:	2100      	movs	r1, #0
 800bf20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	2000011f 	.word	0x2000011f
 800bf3c:	20000120 	.word	0x20000120
 800bf40:	20000121 	.word	0x20000121

0800bf44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	32b0      	adds	r2, #176	; 0xb0
 800bf58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf62:	2300      	movs	r3, #0
 800bf64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf66:	2300      	movs	r3, #0
 800bf68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d101      	bne.n	800bf74 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e0bf      	b.n	800c0f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d050      	beq.n	800c022 <USBD_CDC_Setup+0xde>
 800bf80:	2b20      	cmp	r3, #32
 800bf82:	f040 80af 	bne.w	800c0e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	88db      	ldrh	r3, [r3, #6]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d03a      	beq.n	800c004 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	b25b      	sxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	da1b      	bge.n	800bfd0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	33b0      	adds	r3, #176	; 0xb0
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bfae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	88d2      	ldrh	r2, [r2, #6]
 800bfb4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	88db      	ldrh	r3, [r3, #6]
 800bfba:	2b07      	cmp	r3, #7
 800bfbc:	bf28      	it	cs
 800bfbe:	2307      	movcs	r3, #7
 800bfc0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	89fa      	ldrh	r2, [r7, #14]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f001 fd89 	bl	800dae0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bfce:	e090      	b.n	800c0f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	785a      	ldrb	r2, [r3, #1]
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	88db      	ldrh	r3, [r3, #6]
 800bfde:	2b3f      	cmp	r3, #63	; 0x3f
 800bfe0:	d803      	bhi.n	800bfea <USBD_CDC_Setup+0xa6>
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	88db      	ldrh	r3, [r3, #6]
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	e000      	b.n	800bfec <USBD_CDC_Setup+0xa8>
 800bfea:	2240      	movs	r2, #64	; 0x40
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bff2:	6939      	ldr	r1, [r7, #16]
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bffa:	461a      	mov	r2, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 fd9b 	bl	800db38 <USBD_CtlPrepareRx>
      break;
 800c002:	e076      	b.n	800c0f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	33b0      	adds	r3, #176	; 0xb0
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	7850      	ldrb	r0, [r2, #1]
 800c01a:	2200      	movs	r2, #0
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	4798      	blx	r3
      break;
 800c020:	e067      	b.n	800c0f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	785b      	ldrb	r3, [r3, #1]
 800c026:	2b0b      	cmp	r3, #11
 800c028:	d851      	bhi.n	800c0ce <USBD_CDC_Setup+0x18a>
 800c02a:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <USBD_CDC_Setup+0xec>)
 800c02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c030:	0800c061 	.word	0x0800c061
 800c034:	0800c0dd 	.word	0x0800c0dd
 800c038:	0800c0cf 	.word	0x0800c0cf
 800c03c:	0800c0cf 	.word	0x0800c0cf
 800c040:	0800c0cf 	.word	0x0800c0cf
 800c044:	0800c0cf 	.word	0x0800c0cf
 800c048:	0800c0cf 	.word	0x0800c0cf
 800c04c:	0800c0cf 	.word	0x0800c0cf
 800c050:	0800c0cf 	.word	0x0800c0cf
 800c054:	0800c0cf 	.word	0x0800c0cf
 800c058:	0800c08b 	.word	0x0800c08b
 800c05c:	0800c0b5 	.word	0x0800c0b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d107      	bne.n	800c07c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c06c:	f107 030a 	add.w	r3, r7, #10
 800c070:	2202      	movs	r2, #2
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f001 fd33 	bl	800dae0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c07a:	e032      	b.n	800c0e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 fcbd 	bl	800d9fe <USBD_CtlError>
            ret = USBD_FAIL;
 800c084:	2303      	movs	r3, #3
 800c086:	75fb      	strb	r3, [r7, #23]
          break;
 800c088:	e02b      	b.n	800c0e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b03      	cmp	r3, #3
 800c094:	d107      	bne.n	800c0a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c096:	f107 030d 	add.w	r3, r7, #13
 800c09a:	2201      	movs	r2, #1
 800c09c:	4619      	mov	r1, r3
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f001 fd1e 	bl	800dae0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0a4:	e01d      	b.n	800c0e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f001 fca8 	bl	800d9fe <USBD_CtlError>
            ret = USBD_FAIL;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	75fb      	strb	r3, [r7, #23]
          break;
 800c0b2:	e016      	b.n	800c0e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d00f      	beq.n	800c0e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c0c0:	6839      	ldr	r1, [r7, #0]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f001 fc9b 	bl	800d9fe <USBD_CtlError>
            ret = USBD_FAIL;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c0cc:	e008      	b.n	800c0e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f001 fc94 	bl	800d9fe <USBD_CtlError>
          ret = USBD_FAIL;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	75fb      	strb	r3, [r7, #23]
          break;
 800c0da:	e002      	b.n	800c0e2 <USBD_CDC_Setup+0x19e>
          break;
 800c0dc:	bf00      	nop
 800c0de:	e008      	b.n	800c0f2 <USBD_CDC_Setup+0x1ae>
          break;
 800c0e0:	bf00      	nop
      }
      break;
 800c0e2:	e006      	b.n	800c0f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f001 fc89 	bl	800d9fe <USBD_CtlError>
      ret = USBD_FAIL;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c0f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3718      	adds	r7, #24
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c10e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	32b0      	adds	r2, #176	; 0xb0
 800c11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c122:	2303      	movs	r3, #3
 800c124:	e065      	b.n	800c1f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	32b0      	adds	r2, #176	; 0xb0
 800c130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c134:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c136:	78fb      	ldrb	r3, [r7, #3]
 800c138:	f003 020f 	and.w	r2, r3, #15
 800c13c:	6879      	ldr	r1, [r7, #4]
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	440b      	add	r3, r1
 800c148:	3318      	adds	r3, #24
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d02f      	beq.n	800c1b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	f003 020f 	and.w	r2, r3, #15
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	3318      	adds	r3, #24
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	78fb      	ldrb	r3, [r7, #3]
 800c168:	f003 010f 	and.w	r1, r3, #15
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	460b      	mov	r3, r1
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	440b      	add	r3, r1
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4403      	add	r3, r0
 800c178:	331c      	adds	r3, #28
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c180:	fb01 f303 	mul.w	r3, r1, r3
 800c184:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c186:	2b00      	cmp	r3, #0
 800c188:	d112      	bne.n	800c1b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c18a:	78fb      	ldrb	r3, [r7, #3]
 800c18c:	f003 020f 	and.w	r2, r3, #15
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	4613      	mov	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4413      	add	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	440b      	add	r3, r1
 800c19c:	3318      	adds	r3, #24
 800c19e:	2200      	movs	r2, #0
 800c1a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c1a2:	78f9      	ldrb	r1, [r7, #3]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f002 f99c 	bl	800e4e6 <USBD_LL_Transmit>
 800c1ae:	e01f      	b.n	800c1f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	33b0      	adds	r3, #176	; 0xb0
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d010      	beq.n	800c1f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	33b0      	adds	r3, #176	; 0xb0
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c1ec:	78fa      	ldrb	r2, [r7, #3]
 800c1ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	460b      	mov	r3, r1
 800c204:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	32b0      	adds	r2, #176	; 0xb0
 800c210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c214:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	32b0      	adds	r2, #176	; 0xb0
 800c220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d101      	bne.n	800c22c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c228:	2303      	movs	r3, #3
 800c22a:	e01a      	b.n	800c262 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c22c:	78fb      	ldrb	r3, [r7, #3]
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f002 f99a 	bl	800e56a <USBD_LL_GetRxDataSize>
 800c236:	4602      	mov	r2, r0
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	33b0      	adds	r3, #176	; 0xb0
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c25c:	4611      	mov	r1, r2
 800c25e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	32b0      	adds	r2, #176	; 0xb0
 800c27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c280:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d101      	bne.n	800c28c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c288:	2303      	movs	r3, #3
 800c28a:	e025      	b.n	800c2d8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	33b0      	adds	r3, #176	; 0xb0
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4413      	add	r3, r2
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d01a      	beq.n	800c2d6 <USBD_CDC_EP0_RxReady+0x6c>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c2a6:	2bff      	cmp	r3, #255	; 0xff
 800c2a8:	d015      	beq.n	800c2d6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	33b0      	adds	r3, #176	; 0xb0
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c2c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2ca:	b292      	uxth	r2, r2
 800c2cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	22ff      	movs	r2, #255	; 0xff
 800c2d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b086      	sub	sp, #24
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2e8:	2182      	movs	r1, #130	; 0x82
 800c2ea:	4818      	ldr	r0, [pc, #96]	; (800c34c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2ec:	f000 fd4f 	bl	800cd8e <USBD_GetEpDesc>
 800c2f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c2f2:	2101      	movs	r1, #1
 800c2f4:	4815      	ldr	r0, [pc, #84]	; (800c34c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2f6:	f000 fd4a 	bl	800cd8e <USBD_GetEpDesc>
 800c2fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2fc:	2181      	movs	r1, #129	; 0x81
 800c2fe:	4813      	ldr	r0, [pc, #76]	; (800c34c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c300:	f000 fd45 	bl	800cd8e <USBD_GetEpDesc>
 800c304:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	2210      	movs	r2, #16
 800c310:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d006      	beq.n	800c326 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c320:	711a      	strb	r2, [r3, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d006      	beq.n	800c33a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c334:	711a      	strb	r2, [r3, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2243      	movs	r2, #67	; 0x43
 800c33e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c340:	4b02      	ldr	r3, [pc, #8]	; (800c34c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	200000dc 	.word	0x200000dc

0800c350 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c358:	2182      	movs	r1, #130	; 0x82
 800c35a:	4818      	ldr	r0, [pc, #96]	; (800c3bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c35c:	f000 fd17 	bl	800cd8e <USBD_GetEpDesc>
 800c360:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c362:	2101      	movs	r1, #1
 800c364:	4815      	ldr	r0, [pc, #84]	; (800c3bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c366:	f000 fd12 	bl	800cd8e <USBD_GetEpDesc>
 800c36a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c36c:	2181      	movs	r1, #129	; 0x81
 800c36e:	4813      	ldr	r0, [pc, #76]	; (800c3bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c370:	f000 fd0d 	bl	800cd8e <USBD_GetEpDesc>
 800c374:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	2210      	movs	r2, #16
 800c380:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d006      	beq.n	800c396 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	2200      	movs	r2, #0
 800c38c:	711a      	strb	r2, [r3, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	f042 0202 	orr.w	r2, r2, #2
 800c394:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d006      	beq.n	800c3aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	711a      	strb	r2, [r3, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f042 0202 	orr.w	r2, r2, #2
 800c3a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2243      	movs	r2, #67	; 0x43
 800c3ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c3b0:	4b02      	ldr	r3, [pc, #8]	; (800c3bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	200000dc 	.word	0x200000dc

0800c3c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3c8:	2182      	movs	r1, #130	; 0x82
 800c3ca:	4818      	ldr	r0, [pc, #96]	; (800c42c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3cc:	f000 fcdf 	bl	800cd8e <USBD_GetEpDesc>
 800c3d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	4815      	ldr	r0, [pc, #84]	; (800c42c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3d6:	f000 fcda 	bl	800cd8e <USBD_GetEpDesc>
 800c3da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c3dc:	2181      	movs	r1, #129	; 0x81
 800c3de:	4813      	ldr	r0, [pc, #76]	; (800c42c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3e0:	f000 fcd5 	bl	800cd8e <USBD_GetEpDesc>
 800c3e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	2210      	movs	r2, #16
 800c3f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d006      	beq.n	800c406 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c400:	711a      	strb	r2, [r3, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d006      	beq.n	800c41a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c414:	711a      	strb	r2, [r3, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2243      	movs	r2, #67	; 0x43
 800c41e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c420:	4b02      	ldr	r3, [pc, #8]	; (800c42c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	200000dc 	.word	0x200000dc

0800c430 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	220a      	movs	r2, #10
 800c43c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c43e:	4b03      	ldr	r3, [pc, #12]	; (800c44c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr
 800c44c:	20000098 	.word	0x20000098

0800c450 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c460:	2303      	movs	r3, #3
 800c462:	e009      	b.n	800c478 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	33b0      	adds	r3, #176	; 0xb0
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c484:	b480      	push	{r7}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	32b0      	adds	r2, #176	; 0xb0
 800c49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	e008      	b.n	800c4bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	371c      	adds	r7, #28
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	32b0      	adds	r2, #176	; 0xb0
 800c4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e004      	b.n	800c4f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
	...

0800c504 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	32b0      	adds	r2, #176	; 0xb0
 800c516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c51a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c51c:	2301      	movs	r3, #1
 800c51e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d101      	bne.n	800c52a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c526:	2303      	movs	r3, #3
 800c528:	e025      	b.n	800c576 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c530:	2b00      	cmp	r3, #0
 800c532:	d11f      	bne.n	800c574 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	2201      	movs	r2, #1
 800c538:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c53c:	4b10      	ldr	r3, [pc, #64]	; (800c580 <USBD_CDC_TransmitPacket+0x7c>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	f003 020f 	and.w	r2, r3, #15
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	4613      	mov	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4413      	add	r3, r2
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4403      	add	r3, r0
 800c556:	3318      	adds	r3, #24
 800c558:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c55a:	4b09      	ldr	r3, [pc, #36]	; (800c580 <USBD_CDC_TransmitPacket+0x7c>)
 800c55c:	7819      	ldrb	r1, [r3, #0]
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f001 ffbb 	bl	800e4e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c570:	2300      	movs	r3, #0
 800c572:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c574:	7bfb      	ldrb	r3, [r7, #15]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3710      	adds	r7, #16
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	2000011f 	.word	0x2000011f

0800c584 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	32b0      	adds	r2, #176	; 0xb0
 800c596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c59a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	32b0      	adds	r2, #176	; 0xb0
 800c5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d101      	bne.n	800c5b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	e018      	b.n	800c5e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	7c1b      	ldrb	r3, [r3, #16]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10a      	bne.n	800c5d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5ba:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <USBD_CDC_ReceivePacket+0x68>)
 800c5bc:	7819      	ldrb	r1, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f001 ffad 	bl	800e528 <USBD_LL_PrepareReceive>
 800c5ce:	e008      	b.n	800c5e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5d0:	4b06      	ldr	r3, [pc, #24]	; (800c5ec <USBD_CDC_ReceivePacket+0x68>)
 800c5d2:	7819      	ldrb	r1, [r3, #0]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5da:	2340      	movs	r3, #64	; 0x40
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f001 ffa3 	bl	800e528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20000120 	.word	0x20000120

0800c5f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d101      	bne.n	800c608 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c604:	2303      	movs	r3, #3
 800c606:	e01f      	b.n	800c648 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	79fa      	ldrb	r2, [r7, #7]
 800c63a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f001 fe17 	bl	800e270 <USBD_LL_Init>
 800c642:	4603      	mov	r3, r0
 800c644:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c646:	7dfb      	ldrb	r3, [r7, #23]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c65a:	2300      	movs	r3, #0
 800c65c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c664:	2303      	movs	r3, #3
 800c666:	e025      	b.n	800c6b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	32ae      	adds	r2, #174	; 0xae
 800c67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00f      	beq.n	800c6a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	32ae      	adds	r2, #174	; 0xae
 800c68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c694:	f107 020e 	add.w	r2, r7, #14
 800c698:	4610      	mov	r0, r2
 800c69a:	4798      	blx	r3
 800c69c:	4602      	mov	r2, r0
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c6aa:	1c5a      	adds	r2, r3, #1
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f001 fe25 	bl	800e314 <USBD_LL_Start>
 800c6ca:	4603      	mov	r3, r0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b084      	sub	sp, #16
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c700:	2b00      	cmp	r3, #0
 800c702:	d009      	beq.n	800c718 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	78fa      	ldrb	r2, [r7, #3]
 800c70e:	4611      	mov	r1, r2
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	4798      	blx	r3
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c718:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	460b      	mov	r3, r1
 800c72c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	78fa      	ldrb	r2, [r7, #3]
 800c73c:	4611      	mov	r1, r2
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	4798      	blx	r3
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d001      	beq.n	800c74c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c748:	2303      	movs	r3, #3
 800c74a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	4618      	mov	r0, r3
 800c76a:	f001 f90e 	bl	800d98a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2201      	movs	r2, #1
 800c772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c77c:	461a      	mov	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c78a:	f003 031f 	and.w	r3, r3, #31
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d01a      	beq.n	800c7c8 <USBD_LL_SetupStage+0x72>
 800c792:	2b02      	cmp	r3, #2
 800c794:	d822      	bhi.n	800c7dc <USBD_LL_SetupStage+0x86>
 800c796:	2b00      	cmp	r3, #0
 800c798:	d002      	beq.n	800c7a0 <USBD_LL_SetupStage+0x4a>
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d00a      	beq.n	800c7b4 <USBD_LL_SetupStage+0x5e>
 800c79e:	e01d      	b.n	800c7dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fb65 	bl	800ce78 <USBD_StdDevReq>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b2:	e020      	b.n	800c7f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fbcd 	bl	800cf5c <USBD_StdItfReq>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7c6:	e016      	b.n	800c7f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fc2f 	bl	800d034 <USBD_StdEPReq>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7da:	e00c      	b.n	800c7f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c7e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f001 fdf2 	bl	800e3d4 <USBD_LL_StallEP>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7f4:	bf00      	nop
  }

  return ret;
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	460b      	mov	r3, r1
 800c80a:	607a      	str	r2, [r7, #4]
 800c80c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c80e:	2300      	movs	r3, #0
 800c810:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c812:	7afb      	ldrb	r3, [r7, #11]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d16e      	bne.n	800c8f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c81e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c826:	2b03      	cmp	r3, #3
 800c828:	f040 8098 	bne.w	800c95c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	689a      	ldr	r2, [r3, #8]
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	429a      	cmp	r2, r3
 800c836:	d913      	bls.n	800c860 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	689a      	ldr	r2, [r3, #8]
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	1ad2      	subs	r2, r2, r3
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	68da      	ldr	r2, [r3, #12]
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	4293      	cmp	r3, r2
 800c850:	bf28      	it	cs
 800c852:	4613      	movcs	r3, r2
 800c854:	461a      	mov	r2, r3
 800c856:	6879      	ldr	r1, [r7, #4]
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f001 f98a 	bl	800db72 <USBD_CtlContinueRx>
 800c85e:	e07d      	b.n	800c95c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c866:	f003 031f 	and.w	r3, r3, #31
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d014      	beq.n	800c898 <USBD_LL_DataOutStage+0x98>
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d81d      	bhi.n	800c8ae <USBD_LL_DataOutStage+0xae>
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <USBD_LL_DataOutStage+0x7c>
 800c876:	2b01      	cmp	r3, #1
 800c878:	d003      	beq.n	800c882 <USBD_LL_DataOutStage+0x82>
 800c87a:	e018      	b.n	800c8ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	75bb      	strb	r3, [r7, #22]
            break;
 800c880:	e018      	b.n	800c8b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	4619      	mov	r1, r3
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 fa64 	bl	800cd5a <USBD_CoreFindIF>
 800c892:	4603      	mov	r3, r0
 800c894:	75bb      	strb	r3, [r7, #22]
            break;
 800c896:	e00d      	b.n	800c8b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f000 fa66 	bl	800cd74 <USBD_CoreFindEP>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	75bb      	strb	r3, [r7, #22]
            break;
 800c8ac:	e002      	b.n	800c8b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	75bb      	strb	r3, [r7, #22]
            break;
 800c8b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c8b4:	7dbb      	ldrb	r3, [r7, #22]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d119      	bne.n	800c8ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d113      	bne.n	800c8ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c8c6:	7dba      	ldrb	r2, [r7, #22]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	32ae      	adds	r2, #174	; 0xae
 800c8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00b      	beq.n	800c8ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c8d6:	7dba      	ldrb	r2, [r7, #22]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c8de:	7dba      	ldrb	r2, [r7, #22]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	32ae      	adds	r2, #174	; 0xae
 800c8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f001 f950 	bl	800db94 <USBD_CtlSendStatus>
 800c8f4:	e032      	b.n	800c95c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c8f6:	7afb      	ldrb	r3, [r7, #11]
 800c8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	4619      	mov	r1, r3
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f000 fa37 	bl	800cd74 <USBD_CoreFindEP>
 800c906:	4603      	mov	r3, r0
 800c908:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c90a:	7dbb      	ldrb	r3, [r7, #22]
 800c90c:	2bff      	cmp	r3, #255	; 0xff
 800c90e:	d025      	beq.n	800c95c <USBD_LL_DataOutStage+0x15c>
 800c910:	7dbb      	ldrb	r3, [r7, #22]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d122      	bne.n	800c95c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d117      	bne.n	800c952 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c922:	7dba      	ldrb	r2, [r7, #22]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	32ae      	adds	r2, #174	; 0xae
 800c928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00f      	beq.n	800c952 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c932:	7dba      	ldrb	r2, [r7, #22]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c93a:	7dba      	ldrb	r2, [r7, #22]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	32ae      	adds	r2, #174	; 0xae
 800c940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	7afa      	ldrb	r2, [r7, #11]
 800c948:	4611      	mov	r1, r2
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	4798      	blx	r3
 800c94e:	4603      	mov	r3, r0
 800c950:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c952:	7dfb      	ldrb	r3, [r7, #23]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c958:	7dfb      	ldrb	r3, [r7, #23]
 800c95a:	e000      	b.n	800c95e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b086      	sub	sp, #24
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	60f8      	str	r0, [r7, #12]
 800c96e:	460b      	mov	r3, r1
 800c970:	607a      	str	r2, [r7, #4]
 800c972:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c974:	7afb      	ldrb	r3, [r7, #11]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d16f      	bne.n	800ca5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3314      	adds	r3, #20
 800c97e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c986:	2b02      	cmp	r3, #2
 800c988:	d15a      	bne.n	800ca40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	689a      	ldr	r2, [r3, #8]
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	429a      	cmp	r2, r3
 800c994:	d914      	bls.n	800c9c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	689a      	ldr	r2, [r3, #8]
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	1ad2      	subs	r2, r2, r3
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	6879      	ldr	r1, [r7, #4]
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f001 f8b2 	bl	800db16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f001 fdb5 	bl	800e528 <USBD_LL_PrepareReceive>
 800c9be:	e03f      	b.n	800ca40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	68da      	ldr	r2, [r3, #12]
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d11c      	bne.n	800ca06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	685a      	ldr	r2, [r3, #4]
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d316      	bcc.n	800ca06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d20f      	bcs.n	800ca06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f001 f893 	bl	800db16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f001 fd92 	bl	800e528 <USBD_LL_PrepareReceive>
 800ca04:	e01c      	b.n	800ca40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d10f      	bne.n	800ca32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d009      	beq.n	800ca32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca32:	2180      	movs	r1, #128	; 0x80
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f001 fccd 	bl	800e3d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f001 f8bd 	bl	800dbba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d03a      	beq.n	800cac0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7ff fe42 	bl	800c6d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ca58:	e032      	b.n	800cac0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ca5a:	7afb      	ldrb	r3, [r7, #11]
 800ca5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	4619      	mov	r1, r3
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f000 f985 	bl	800cd74 <USBD_CoreFindEP>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	2bff      	cmp	r3, #255	; 0xff
 800ca72:	d025      	beq.n	800cac0 <USBD_LL_DataInStage+0x15a>
 800ca74:	7dfb      	ldrb	r3, [r7, #23]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d122      	bne.n	800cac0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d11c      	bne.n	800cac0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ca86:	7dfa      	ldrb	r2, [r7, #23]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	32ae      	adds	r2, #174	; 0xae
 800ca8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca90:	695b      	ldr	r3, [r3, #20]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d014      	beq.n	800cac0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ca96:	7dfa      	ldrb	r2, [r7, #23]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ca9e:	7dfa      	ldrb	r2, [r7, #23]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	32ae      	adds	r2, #174	; 0xae
 800caa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	7afa      	ldrb	r2, [r7, #11]
 800caac:	4611      	mov	r1, r2
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	4798      	blx	r3
 800cab2:	4603      	mov	r3, r0
 800cab4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cab6:	7dbb      	ldrb	r3, [r7, #22]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d001      	beq.n	800cac0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cabc:	7dbb      	ldrb	r3, [r7, #22]
 800cabe:	e000      	b.n	800cac2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3718      	adds	r7, #24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b084      	sub	sp, #16
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d014      	beq.n	800cb30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00e      	beq.n	800cb30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	6852      	ldr	r2, [r2, #4]
 800cb1e:	b2d2      	uxtb	r2, r2
 800cb20:	4611      	mov	r1, r2
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	4798      	blx	r3
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d001      	beq.n	800cb30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb30:	2340      	movs	r3, #64	; 0x40
 800cb32:	2200      	movs	r2, #0
 800cb34:	2100      	movs	r1, #0
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f001 fc07 	bl	800e34a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2240      	movs	r2, #64	; 0x40
 800cb48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb4c:	2340      	movs	r3, #64	; 0x40
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2180      	movs	r1, #128	; 0x80
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f001 fbf9 	bl	800e34a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2240      	movs	r2, #64	; 0x40
 800cb62:	621a      	str	r2, [r3, #32]

  return ret;
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cb6e:	b480      	push	{r7}
 800cb70:	b083      	sub	sp, #12
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	460b      	mov	r3, r1
 800cb78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	78fa      	ldrb	r2, [r7, #3]
 800cb7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	370c      	adds	r7, #12
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	b083      	sub	sp, #12
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b04      	cmp	r3, #4
 800cba0:	d006      	beq.n	800cbb0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2204      	movs	r2, #4
 800cbb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cbc6:	b480      	push	{r7}
 800cbc8:	b083      	sub	sp, #12
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	d106      	bne.n	800cbe8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	370c      	adds	r7, #12
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b082      	sub	sp, #8
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d110      	bne.n	800cc2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00b      	beq.n	800cc2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc1a:	69db      	ldr	r3, [r3, #28]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d005      	beq.n	800cc2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc26:	69db      	ldr	r3, [r3, #28]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b082      	sub	sp, #8
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	460b      	mov	r3, r1
 800cc40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	32ae      	adds	r2, #174	; 0xae
 800cc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc54:	2303      	movs	r3, #3
 800cc56:	e01c      	b.n	800cc92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b03      	cmp	r3, #3
 800cc62:	d115      	bne.n	800cc90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	32ae      	adds	r2, #174	; 0xae
 800cc6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00b      	beq.n	800cc90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	32ae      	adds	r2, #174	; 0xae
 800cc82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc86:	6a1b      	ldr	r3, [r3, #32]
 800cc88:	78fa      	ldrb	r2, [r7, #3]
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	460b      	mov	r3, r1
 800cca4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	32ae      	adds	r2, #174	; 0xae
 800ccb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e01c      	b.n	800ccf6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	2b03      	cmp	r3, #3
 800ccc6:	d115      	bne.n	800ccf4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	32ae      	adds	r2, #174	; 0xae
 800ccd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00b      	beq.n	800ccf4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	32ae      	adds	r2, #174	; 0xae
 800cce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	78fa      	ldrb	r2, [r7, #3]
 800ccee:	4611      	mov	r1, r2
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b083      	sub	sp, #12
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00e      	beq.n	800cd50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	6852      	ldr	r2, [r2, #4]
 800cd3e:	b2d2      	uxtb	r2, r2
 800cd40:	4611      	mov	r1, r2
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	4798      	blx	r3
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b083      	sub	sp, #12
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	460b      	mov	r3, r1
 800cd64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b086      	sub	sp, #24
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	460b      	mov	r3, r1
 800cd98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	885b      	ldrh	r3, [r3, #2]
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d920      	bls.n	800cdf8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cdbe:	e013      	b.n	800cde8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cdc0:	f107 030a 	add.w	r3, r7, #10
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6978      	ldr	r0, [r7, #20]
 800cdc8:	f000 f81b 	bl	800ce02 <USBD_GetNextDesc>
 800cdcc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	785b      	ldrb	r3, [r3, #1]
 800cdd2:	2b05      	cmp	r3, #5
 800cdd4:	d108      	bne.n	800cde8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	789b      	ldrb	r3, [r3, #2]
 800cdde:	78fa      	ldrb	r2, [r7, #3]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d008      	beq.n	800cdf6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cde4:	2300      	movs	r3, #0
 800cde6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	885b      	ldrh	r3, [r3, #2]
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	897b      	ldrh	r3, [r7, #10]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d8e5      	bhi.n	800cdc0 <USBD_GetEpDesc+0x32>
 800cdf4:	e000      	b.n	800cdf8 <USBD_GetEpDesc+0x6a>
          break;
 800cdf6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cdf8:	693b      	ldr	r3, [r7, #16]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ce02:	b480      	push	{r7}
 800ce04:	b085      	sub	sp, #20
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	881a      	ldrh	r2, [r3, #0]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	4413      	add	r3, r2
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	461a      	mov	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b087      	sub	sp, #28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	3301      	adds	r3, #1
 800ce52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ce5a:	8a3b      	ldrh	r3, [r7, #16]
 800ce5c:	021b      	lsls	r3, r3, #8
 800ce5e:	b21a      	sxth	r2, r3
 800ce60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	b21b      	sxth	r3, r3
 800ce68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ce6a:	89fb      	ldrh	r3, [r7, #14]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	371c      	adds	r7, #28
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce8e:	2b40      	cmp	r3, #64	; 0x40
 800ce90:	d005      	beq.n	800ce9e <USBD_StdDevReq+0x26>
 800ce92:	2b40      	cmp	r3, #64	; 0x40
 800ce94:	d857      	bhi.n	800cf46 <USBD_StdDevReq+0xce>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00f      	beq.n	800ceba <USBD_StdDevReq+0x42>
 800ce9a:	2b20      	cmp	r3, #32
 800ce9c:	d153      	bne.n	800cf46 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	32ae      	adds	r2, #174	; 0xae
 800cea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	4798      	blx	r3
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb8:	e04a      	b.n	800cf50 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	785b      	ldrb	r3, [r3, #1]
 800cebe:	2b09      	cmp	r3, #9
 800cec0:	d83b      	bhi.n	800cf3a <USBD_StdDevReq+0xc2>
 800cec2:	a201      	add	r2, pc, #4	; (adr r2, 800cec8 <USBD_StdDevReq+0x50>)
 800cec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec8:	0800cf1d 	.word	0x0800cf1d
 800cecc:	0800cf31 	.word	0x0800cf31
 800ced0:	0800cf3b 	.word	0x0800cf3b
 800ced4:	0800cf27 	.word	0x0800cf27
 800ced8:	0800cf3b 	.word	0x0800cf3b
 800cedc:	0800cefb 	.word	0x0800cefb
 800cee0:	0800cef1 	.word	0x0800cef1
 800cee4:	0800cf3b 	.word	0x0800cf3b
 800cee8:	0800cf13 	.word	0x0800cf13
 800ceec:	0800cf05 	.word	0x0800cf05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cef0:	6839      	ldr	r1, [r7, #0]
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 fa3c 	bl	800d370 <USBD_GetDescriptor>
          break;
 800cef8:	e024      	b.n	800cf44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cefa:	6839      	ldr	r1, [r7, #0]
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fba1 	bl	800d644 <USBD_SetAddress>
          break;
 800cf02:	e01f      	b.n	800cf44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fbe0 	bl	800d6cc <USBD_SetConfig>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]
          break;
 800cf10:	e018      	b.n	800cf44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fc83 	bl	800d820 <USBD_GetConfig>
          break;
 800cf1a:	e013      	b.n	800cf44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 fcb4 	bl	800d88c <USBD_GetStatus>
          break;
 800cf24:	e00e      	b.n	800cf44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf26:	6839      	ldr	r1, [r7, #0]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fce3 	bl	800d8f4 <USBD_SetFeature>
          break;
 800cf2e:	e009      	b.n	800cf44 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 fd07 	bl	800d946 <USBD_ClrFeature>
          break;
 800cf38:	e004      	b.n	800cf44 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 fd5e 	bl	800d9fe <USBD_CtlError>
          break;
 800cf42:	bf00      	nop
      }
      break;
 800cf44:	e004      	b.n	800cf50 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fd58 	bl	800d9fe <USBD_CtlError>
      break;
 800cf4e:	bf00      	nop
  }

  return ret;
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop

0800cf5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf66:	2300      	movs	r3, #0
 800cf68:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf72:	2b40      	cmp	r3, #64	; 0x40
 800cf74:	d005      	beq.n	800cf82 <USBD_StdItfReq+0x26>
 800cf76:	2b40      	cmp	r3, #64	; 0x40
 800cf78:	d852      	bhi.n	800d020 <USBD_StdItfReq+0xc4>
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <USBD_StdItfReq+0x26>
 800cf7e:	2b20      	cmp	r3, #32
 800cf80:	d14e      	bne.n	800d020 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d840      	bhi.n	800d012 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	889b      	ldrh	r3, [r3, #4]
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d836      	bhi.n	800d008 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	889b      	ldrh	r3, [r3, #4]
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7ff fed9 	bl	800cd5a <USBD_CoreFindIF>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfac:	7bbb      	ldrb	r3, [r7, #14]
 800cfae:	2bff      	cmp	r3, #255	; 0xff
 800cfb0:	d01d      	beq.n	800cfee <USBD_StdItfReq+0x92>
 800cfb2:	7bbb      	ldrb	r3, [r7, #14]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d11a      	bne.n	800cfee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cfb8:	7bba      	ldrb	r2, [r7, #14]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	32ae      	adds	r2, #174	; 0xae
 800cfbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00f      	beq.n	800cfe8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cfc8:	7bba      	ldrb	r2, [r7, #14]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cfd0:	7bba      	ldrb	r2, [r7, #14]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	32ae      	adds	r2, #174	; 0xae
 800cfd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	4798      	blx	r3
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cfe6:	e004      	b.n	800cff2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cfec:	e001      	b.n	800cff2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cfee:	2303      	movs	r3, #3
 800cff0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	88db      	ldrh	r3, [r3, #6]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d110      	bne.n	800d01c <USBD_StdItfReq+0xc0>
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10d      	bne.n	800d01c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fdc7 	bl	800db94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d006:	e009      	b.n	800d01c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fcf7 	bl	800d9fe <USBD_CtlError>
          break;
 800d010:	e004      	b.n	800d01c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fcf2 	bl	800d9fe <USBD_CtlError>
          break;
 800d01a:	e000      	b.n	800d01e <USBD_StdItfReq+0xc2>
          break;
 800d01c:	bf00      	nop
      }
      break;
 800d01e:	e004      	b.n	800d02a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fceb 	bl	800d9fe <USBD_CtlError>
      break;
 800d028:	bf00      	nop
  }

  return ret;
 800d02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3710      	adds	r7, #16
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d03e:	2300      	movs	r3, #0
 800d040:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	889b      	ldrh	r3, [r3, #4]
 800d046:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d050:	2b40      	cmp	r3, #64	; 0x40
 800d052:	d007      	beq.n	800d064 <USBD_StdEPReq+0x30>
 800d054:	2b40      	cmp	r3, #64	; 0x40
 800d056:	f200 817f 	bhi.w	800d358 <USBD_StdEPReq+0x324>
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d02a      	beq.n	800d0b4 <USBD_StdEPReq+0x80>
 800d05e:	2b20      	cmp	r3, #32
 800d060:	f040 817a 	bne.w	800d358 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d064:	7bbb      	ldrb	r3, [r7, #14]
 800d066:	4619      	mov	r1, r3
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f7ff fe83 	bl	800cd74 <USBD_CoreFindEP>
 800d06e:	4603      	mov	r3, r0
 800d070:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d072:	7b7b      	ldrb	r3, [r7, #13]
 800d074:	2bff      	cmp	r3, #255	; 0xff
 800d076:	f000 8174 	beq.w	800d362 <USBD_StdEPReq+0x32e>
 800d07a:	7b7b      	ldrb	r3, [r7, #13]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f040 8170 	bne.w	800d362 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d082:	7b7a      	ldrb	r2, [r7, #13]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d08a:	7b7a      	ldrb	r2, [r7, #13]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	32ae      	adds	r2, #174	; 0xae
 800d090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	f000 8163 	beq.w	800d362 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d09c:	7b7a      	ldrb	r2, [r7, #13]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	32ae      	adds	r2, #174	; 0xae
 800d0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	6839      	ldr	r1, [r7, #0]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	4798      	blx	r3
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d0b2:	e156      	b.n	800d362 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	785b      	ldrb	r3, [r3, #1]
 800d0b8:	2b03      	cmp	r3, #3
 800d0ba:	d008      	beq.n	800d0ce <USBD_StdEPReq+0x9a>
 800d0bc:	2b03      	cmp	r3, #3
 800d0be:	f300 8145 	bgt.w	800d34c <USBD_StdEPReq+0x318>
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 809b 	beq.w	800d1fe <USBD_StdEPReq+0x1ca>
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d03c      	beq.n	800d146 <USBD_StdEPReq+0x112>
 800d0cc:	e13e      	b.n	800d34c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d002      	beq.n	800d0e0 <USBD_StdEPReq+0xac>
 800d0da:	2b03      	cmp	r3, #3
 800d0dc:	d016      	beq.n	800d10c <USBD_StdEPReq+0xd8>
 800d0de:	e02c      	b.n	800d13a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0e0:	7bbb      	ldrb	r3, [r7, #14]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00d      	beq.n	800d102 <USBD_StdEPReq+0xce>
 800d0e6:	7bbb      	ldrb	r3, [r7, #14]
 800d0e8:	2b80      	cmp	r3, #128	; 0x80
 800d0ea:	d00a      	beq.n	800d102 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d0ec:	7bbb      	ldrb	r3, [r7, #14]
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 f96f 	bl	800e3d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0f6:	2180      	movs	r1, #128	; 0x80
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f001 f96b 	bl	800e3d4 <USBD_LL_StallEP>
 800d0fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d100:	e020      	b.n	800d144 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d102:	6839      	ldr	r1, [r7, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fc7a 	bl	800d9fe <USBD_CtlError>
              break;
 800d10a:	e01b      	b.n	800d144 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	885b      	ldrh	r3, [r3, #2]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10e      	bne.n	800d132 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d114:	7bbb      	ldrb	r3, [r7, #14]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00b      	beq.n	800d132 <USBD_StdEPReq+0xfe>
 800d11a:	7bbb      	ldrb	r3, [r7, #14]
 800d11c:	2b80      	cmp	r3, #128	; 0x80
 800d11e:	d008      	beq.n	800d132 <USBD_StdEPReq+0xfe>
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	88db      	ldrh	r3, [r3, #6]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d104      	bne.n	800d132 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d128:	7bbb      	ldrb	r3, [r7, #14]
 800d12a:	4619      	mov	r1, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f001 f951 	bl	800e3d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fd2e 	bl	800db94 <USBD_CtlSendStatus>

              break;
 800d138:	e004      	b.n	800d144 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d13a:	6839      	ldr	r1, [r7, #0]
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fc5e 	bl	800d9fe <USBD_CtlError>
              break;
 800d142:	bf00      	nop
          }
          break;
 800d144:	e107      	b.n	800d356 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d002      	beq.n	800d158 <USBD_StdEPReq+0x124>
 800d152:	2b03      	cmp	r3, #3
 800d154:	d016      	beq.n	800d184 <USBD_StdEPReq+0x150>
 800d156:	e04b      	b.n	800d1f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d158:	7bbb      	ldrb	r3, [r7, #14]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00d      	beq.n	800d17a <USBD_StdEPReq+0x146>
 800d15e:	7bbb      	ldrb	r3, [r7, #14]
 800d160:	2b80      	cmp	r3, #128	; 0x80
 800d162:	d00a      	beq.n	800d17a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	4619      	mov	r1, r3
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f001 f933 	bl	800e3d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d16e:	2180      	movs	r1, #128	; 0x80
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 f92f 	bl	800e3d4 <USBD_LL_StallEP>
 800d176:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d178:	e040      	b.n	800d1fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fc3e 	bl	800d9fe <USBD_CtlError>
              break;
 800d182:	e03b      	b.n	800d1fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	885b      	ldrh	r3, [r3, #2]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d136      	bne.n	800d1fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d18c:	7bbb      	ldrb	r3, [r7, #14]
 800d18e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d192:	2b00      	cmp	r3, #0
 800d194:	d004      	beq.n	800d1a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d196:	7bbb      	ldrb	r3, [r7, #14]
 800d198:	4619      	mov	r1, r3
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f001 f939 	bl	800e412 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 fcf7 	bl	800db94 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d1a6:	7bbb      	ldrb	r3, [r7, #14]
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff fde2 	bl	800cd74 <USBD_CoreFindEP>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1b4:	7b7b      	ldrb	r3, [r7, #13]
 800d1b6:	2bff      	cmp	r3, #255	; 0xff
 800d1b8:	d01f      	beq.n	800d1fa <USBD_StdEPReq+0x1c6>
 800d1ba:	7b7b      	ldrb	r3, [r7, #13]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d11c      	bne.n	800d1fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d1c0:	7b7a      	ldrb	r2, [r7, #13]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d1c8:	7b7a      	ldrb	r2, [r7, #13]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	32ae      	adds	r2, #174	; 0xae
 800d1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d010      	beq.n	800d1fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d1d8:	7b7a      	ldrb	r2, [r7, #13]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	32ae      	adds	r2, #174	; 0xae
 800d1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	4798      	blx	r3
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d1ee:	e004      	b.n	800d1fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d1f0:	6839      	ldr	r1, [r7, #0]
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 fc03 	bl	800d9fe <USBD_CtlError>
              break;
 800d1f8:	e000      	b.n	800d1fc <USBD_StdEPReq+0x1c8>
              break;
 800d1fa:	bf00      	nop
          }
          break;
 800d1fc:	e0ab      	b.n	800d356 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d204:	b2db      	uxtb	r3, r3
 800d206:	2b02      	cmp	r3, #2
 800d208:	d002      	beq.n	800d210 <USBD_StdEPReq+0x1dc>
 800d20a:	2b03      	cmp	r3, #3
 800d20c:	d032      	beq.n	800d274 <USBD_StdEPReq+0x240>
 800d20e:	e097      	b.n	800d340 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d210:	7bbb      	ldrb	r3, [r7, #14]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d007      	beq.n	800d226 <USBD_StdEPReq+0x1f2>
 800d216:	7bbb      	ldrb	r3, [r7, #14]
 800d218:	2b80      	cmp	r3, #128	; 0x80
 800d21a:	d004      	beq.n	800d226 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d21c:	6839      	ldr	r1, [r7, #0]
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fbed 	bl	800d9fe <USBD_CtlError>
                break;
 800d224:	e091      	b.n	800d34a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d226:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	da0b      	bge.n	800d246 <USBD_StdEPReq+0x212>
 800d22e:	7bbb      	ldrb	r3, [r7, #14]
 800d230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d234:	4613      	mov	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	3310      	adds	r3, #16
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	4413      	add	r3, r2
 800d242:	3304      	adds	r3, #4
 800d244:	e00b      	b.n	800d25e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d246:	7bbb      	ldrb	r3, [r7, #14]
 800d248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d24c:	4613      	mov	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	4413      	add	r3, r2
 800d25c:	3304      	adds	r3, #4
 800d25e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	2200      	movs	r2, #0
 800d264:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2202      	movs	r2, #2
 800d26a:	4619      	mov	r1, r3
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fc37 	bl	800dae0 <USBD_CtlSendData>
              break;
 800d272:	e06a      	b.n	800d34a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	da11      	bge.n	800d2a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	f003 020f 	and.w	r2, r3, #15
 800d282:	6879      	ldr	r1, [r7, #4]
 800d284:	4613      	mov	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	440b      	add	r3, r1
 800d28e:	3324      	adds	r3, #36	; 0x24
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d117      	bne.n	800d2c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d296:	6839      	ldr	r1, [r7, #0]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fbb0 	bl	800d9fe <USBD_CtlError>
                  break;
 800d29e:	e054      	b.n	800d34a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d2a0:	7bbb      	ldrb	r3, [r7, #14]
 800d2a2:	f003 020f 	and.w	r2, r3, #15
 800d2a6:	6879      	ldr	r1, [r7, #4]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4413      	add	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	440b      	add	r3, r1
 800d2b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d2b6:	881b      	ldrh	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d104      	bne.n	800d2c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 fb9d 	bl	800d9fe <USBD_CtlError>
                  break;
 800d2c4:	e041      	b.n	800d34a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	da0b      	bge.n	800d2e6 <USBD_StdEPReq+0x2b2>
 800d2ce:	7bbb      	ldrb	r3, [r7, #14]
 800d2d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	4413      	add	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	3310      	adds	r3, #16
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	e00b      	b.n	800d2fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2e6:	7bbb      	ldrb	r3, [r7, #14]
 800d2e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4413      	add	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	3304      	adds	r3, #4
 800d2fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d300:	7bbb      	ldrb	r3, [r7, #14]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d002      	beq.n	800d30c <USBD_StdEPReq+0x2d8>
 800d306:	7bbb      	ldrb	r3, [r7, #14]
 800d308:	2b80      	cmp	r3, #128	; 0x80
 800d30a:	d103      	bne.n	800d314 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	2200      	movs	r2, #0
 800d310:	601a      	str	r2, [r3, #0]
 800d312:	e00e      	b.n	800d332 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d314:	7bbb      	ldrb	r3, [r7, #14]
 800d316:	4619      	mov	r1, r3
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f001 f899 	bl	800e450 <USBD_LL_IsStallEP>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d003      	beq.n	800d32c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2201      	movs	r2, #1
 800d328:	601a      	str	r2, [r3, #0]
 800d32a:	e002      	b.n	800d332 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	2200      	movs	r2, #0
 800d330:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	2202      	movs	r2, #2
 800d336:	4619      	mov	r1, r3
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 fbd1 	bl	800dae0 <USBD_CtlSendData>
              break;
 800d33e:	e004      	b.n	800d34a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fb5b 	bl	800d9fe <USBD_CtlError>
              break;
 800d348:	bf00      	nop
          }
          break;
 800d34a:	e004      	b.n	800d356 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d34c:	6839      	ldr	r1, [r7, #0]
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 fb55 	bl	800d9fe <USBD_CtlError>
          break;
 800d354:	bf00      	nop
      }
      break;
 800d356:	e005      	b.n	800d364 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fb4f 	bl	800d9fe <USBD_CtlError>
      break;
 800d360:	e000      	b.n	800d364 <USBD_StdEPReq+0x330>
      break;
 800d362:	bf00      	nop
  }

  return ret;
 800d364:	7bfb      	ldrb	r3, [r7, #15]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d37a:	2300      	movs	r3, #0
 800d37c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d37e:	2300      	movs	r3, #0
 800d380:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d382:	2300      	movs	r3, #0
 800d384:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	885b      	ldrh	r3, [r3, #2]
 800d38a:	0a1b      	lsrs	r3, r3, #8
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	3b01      	subs	r3, #1
 800d390:	2b06      	cmp	r3, #6
 800d392:	f200 8128 	bhi.w	800d5e6 <USBD_GetDescriptor+0x276>
 800d396:	a201      	add	r2, pc, #4	; (adr r2, 800d39c <USBD_GetDescriptor+0x2c>)
 800d398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39c:	0800d3b9 	.word	0x0800d3b9
 800d3a0:	0800d3d1 	.word	0x0800d3d1
 800d3a4:	0800d411 	.word	0x0800d411
 800d3a8:	0800d5e7 	.word	0x0800d5e7
 800d3ac:	0800d5e7 	.word	0x0800d5e7
 800d3b0:	0800d587 	.word	0x0800d587
 800d3b4:	0800d5b3 	.word	0x0800d5b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	7c12      	ldrb	r2, [r2, #16]
 800d3c4:	f107 0108 	add.w	r1, r7, #8
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	4798      	blx	r3
 800d3cc:	60f8      	str	r0, [r7, #12]
      break;
 800d3ce:	e112      	b.n	800d5f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	7c1b      	ldrb	r3, [r3, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d10d      	bne.n	800d3f4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e0:	f107 0208 	add.w	r2, r7, #8
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4798      	blx	r3
 800d3e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d3f2:	e100      	b.n	800d5f6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	f107 0208 	add.w	r2, r7, #8
 800d400:	4610      	mov	r0, r2
 800d402:	4798      	blx	r3
 800d404:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3301      	adds	r3, #1
 800d40a:	2202      	movs	r2, #2
 800d40c:	701a      	strb	r2, [r3, #0]
      break;
 800d40e:	e0f2      	b.n	800d5f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	885b      	ldrh	r3, [r3, #2]
 800d414:	b2db      	uxtb	r3, r3
 800d416:	2b05      	cmp	r3, #5
 800d418:	f200 80ac 	bhi.w	800d574 <USBD_GetDescriptor+0x204>
 800d41c:	a201      	add	r2, pc, #4	; (adr r2, 800d424 <USBD_GetDescriptor+0xb4>)
 800d41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d422:	bf00      	nop
 800d424:	0800d43d 	.word	0x0800d43d
 800d428:	0800d471 	.word	0x0800d471
 800d42c:	0800d4a5 	.word	0x0800d4a5
 800d430:	0800d4d9 	.word	0x0800d4d9
 800d434:	0800d50d 	.word	0x0800d50d
 800d438:	0800d541 	.word	0x0800d541
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d00b      	beq.n	800d460 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	7c12      	ldrb	r2, [r2, #16]
 800d454:	f107 0108 	add.w	r1, r7, #8
 800d458:	4610      	mov	r0, r2
 800d45a:	4798      	blx	r3
 800d45c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d45e:	e091      	b.n	800d584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d460:	6839      	ldr	r1, [r7, #0]
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 facb 	bl	800d9fe <USBD_CtlError>
            err++;
 800d468:	7afb      	ldrb	r3, [r7, #11]
 800d46a:	3301      	adds	r3, #1
 800d46c:	72fb      	strb	r3, [r7, #11]
          break;
 800d46e:	e089      	b.n	800d584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00b      	beq.n	800d494 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	7c12      	ldrb	r2, [r2, #16]
 800d488:	f107 0108 	add.w	r1, r7, #8
 800d48c:	4610      	mov	r0, r2
 800d48e:	4798      	blx	r3
 800d490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d492:	e077      	b.n	800d584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d494:	6839      	ldr	r1, [r7, #0]
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 fab1 	bl	800d9fe <USBD_CtlError>
            err++;
 800d49c:	7afb      	ldrb	r3, [r7, #11]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d4a2:	e06f      	b.n	800d584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00b      	beq.n	800d4c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	7c12      	ldrb	r2, [r2, #16]
 800d4bc:	f107 0108 	add.w	r1, r7, #8
 800d4c0:	4610      	mov	r0, r2
 800d4c2:	4798      	blx	r3
 800d4c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4c6:	e05d      	b.n	800d584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4c8:	6839      	ldr	r1, [r7, #0]
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fa97 	bl	800d9fe <USBD_CtlError>
            err++;
 800d4d0:	7afb      	ldrb	r3, [r7, #11]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d4d6:	e055      	b.n	800d584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00b      	beq.n	800d4fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ea:	691b      	ldr	r3, [r3, #16]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	7c12      	ldrb	r2, [r2, #16]
 800d4f0:	f107 0108 	add.w	r1, r7, #8
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	4798      	blx	r3
 800d4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4fa:	e043      	b.n	800d584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 fa7d 	bl	800d9fe <USBD_CtlError>
            err++;
 800d504:	7afb      	ldrb	r3, [r7, #11]
 800d506:	3301      	adds	r3, #1
 800d508:	72fb      	strb	r3, [r7, #11]
          break;
 800d50a:	e03b      	b.n	800d584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d00b      	beq.n	800d530 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d51e:	695b      	ldr	r3, [r3, #20]
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	7c12      	ldrb	r2, [r2, #16]
 800d524:	f107 0108 	add.w	r1, r7, #8
 800d528:	4610      	mov	r0, r2
 800d52a:	4798      	blx	r3
 800d52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d52e:	e029      	b.n	800d584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d530:	6839      	ldr	r1, [r7, #0]
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fa63 	bl	800d9fe <USBD_CtlError>
            err++;
 800d538:	7afb      	ldrb	r3, [r7, #11]
 800d53a:	3301      	adds	r3, #1
 800d53c:	72fb      	strb	r3, [r7, #11]
          break;
 800d53e:	e021      	b.n	800d584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d546:	699b      	ldr	r3, [r3, #24]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00b      	beq.n	800d564 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d552:	699b      	ldr	r3, [r3, #24]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	7c12      	ldrb	r2, [r2, #16]
 800d558:	f107 0108 	add.w	r1, r7, #8
 800d55c:	4610      	mov	r0, r2
 800d55e:	4798      	blx	r3
 800d560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d562:	e00f      	b.n	800d584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d564:	6839      	ldr	r1, [r7, #0]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fa49 	bl	800d9fe <USBD_CtlError>
            err++;
 800d56c:	7afb      	ldrb	r3, [r7, #11]
 800d56e:	3301      	adds	r3, #1
 800d570:	72fb      	strb	r3, [r7, #11]
          break;
 800d572:	e007      	b.n	800d584 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d574:	6839      	ldr	r1, [r7, #0]
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fa41 	bl	800d9fe <USBD_CtlError>
          err++;
 800d57c:	7afb      	ldrb	r3, [r7, #11]
 800d57e:	3301      	adds	r3, #1
 800d580:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d582:	bf00      	nop
      }
      break;
 800d584:	e037      	b.n	800d5f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	7c1b      	ldrb	r3, [r3, #16]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d109      	bne.n	800d5a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d596:	f107 0208 	add.w	r2, r7, #8
 800d59a:	4610      	mov	r0, r2
 800d59c:	4798      	blx	r3
 800d59e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5a0:	e029      	b.n	800d5f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d5a2:	6839      	ldr	r1, [r7, #0]
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 fa2a 	bl	800d9fe <USBD_CtlError>
        err++;
 800d5aa:	7afb      	ldrb	r3, [r7, #11]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	72fb      	strb	r3, [r7, #11]
      break;
 800d5b0:	e021      	b.n	800d5f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	7c1b      	ldrb	r3, [r3, #16]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10d      	bne.n	800d5d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c2:	f107 0208 	add.w	r2, r7, #8
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	4798      	blx	r3
 800d5ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	2207      	movs	r2, #7
 800d5d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5d4:	e00f      	b.n	800d5f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d5d6:	6839      	ldr	r1, [r7, #0]
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 fa10 	bl	800d9fe <USBD_CtlError>
        err++;
 800d5de:	7afb      	ldrb	r3, [r7, #11]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	72fb      	strb	r3, [r7, #11]
      break;
 800d5e4:	e007      	b.n	800d5f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d5e6:	6839      	ldr	r1, [r7, #0]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fa08 	bl	800d9fe <USBD_CtlError>
      err++;
 800d5ee:	7afb      	ldrb	r3, [r7, #11]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	72fb      	strb	r3, [r7, #11]
      break;
 800d5f4:	bf00      	nop
  }

  if (err != 0U)
 800d5f6:	7afb      	ldrb	r3, [r7, #11]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d11e      	bne.n	800d63a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	88db      	ldrh	r3, [r3, #6]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d016      	beq.n	800d632 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d604:	893b      	ldrh	r3, [r7, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00e      	beq.n	800d628 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	88da      	ldrh	r2, [r3, #6]
 800d60e:	893b      	ldrh	r3, [r7, #8]
 800d610:	4293      	cmp	r3, r2
 800d612:	bf28      	it	cs
 800d614:	4613      	movcs	r3, r2
 800d616:	b29b      	uxth	r3, r3
 800d618:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d61a:	893b      	ldrh	r3, [r7, #8]
 800d61c:	461a      	mov	r2, r3
 800d61e:	68f9      	ldr	r1, [r7, #12]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 fa5d 	bl	800dae0 <USBD_CtlSendData>
 800d626:	e009      	b.n	800d63c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f9e7 	bl	800d9fe <USBD_CtlError>
 800d630:	e004      	b.n	800d63c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 faae 	bl	800db94 <USBD_CtlSendStatus>
 800d638:	e000      	b.n	800d63c <USBD_GetDescriptor+0x2cc>
    return;
 800d63a:	bf00      	nop
  }
}
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop

0800d644 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	889b      	ldrh	r3, [r3, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d131      	bne.n	800d6ba <USBD_SetAddress+0x76>
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	88db      	ldrh	r3, [r3, #6]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d12d      	bne.n	800d6ba <USBD_SetAddress+0x76>
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	885b      	ldrh	r3, [r3, #2]
 800d662:	2b7f      	cmp	r3, #127	; 0x7f
 800d664:	d829      	bhi.n	800d6ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	885b      	ldrh	r3, [r3, #2]
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d670:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b03      	cmp	r3, #3
 800d67c:	d104      	bne.n	800d688 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f9bc 	bl	800d9fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d686:	e01d      	b.n	800d6c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	7bfa      	ldrb	r2, [r7, #15]
 800d68c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 ff07 	bl	800e4a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fa7a 	bl	800db94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d6a0:	7bfb      	ldrb	r3, [r7, #15]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d004      	beq.n	800d6b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2202      	movs	r2, #2
 800d6aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ae:	e009      	b.n	800d6c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6b8:	e004      	b.n	800d6c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f99e 	bl	800d9fe <USBD_CtlError>
  }
}
 800d6c2:	bf00      	nop
 800d6c4:	bf00      	nop
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	885b      	ldrh	r3, [r3, #2]
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	4b4e      	ldr	r3, [pc, #312]	; (800d81c <USBD_SetConfig+0x150>)
 800d6e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d6e4:	4b4d      	ldr	r3, [pc, #308]	; (800d81c <USBD_SetConfig+0x150>)
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d905      	bls.n	800d6f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d6ec:	6839      	ldr	r1, [r7, #0]
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 f985 	bl	800d9fe <USBD_CtlError>
    return USBD_FAIL;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e08c      	b.n	800d812 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	2b02      	cmp	r3, #2
 800d702:	d002      	beq.n	800d70a <USBD_SetConfig+0x3e>
 800d704:	2b03      	cmp	r3, #3
 800d706:	d029      	beq.n	800d75c <USBD_SetConfig+0x90>
 800d708:	e075      	b.n	800d7f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d70a:	4b44      	ldr	r3, [pc, #272]	; (800d81c <USBD_SetConfig+0x150>)
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d020      	beq.n	800d754 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d712:	4b42      	ldr	r3, [pc, #264]	; (800d81c <USBD_SetConfig+0x150>)
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	461a      	mov	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d71c:	4b3f      	ldr	r3, [pc, #252]	; (800d81c <USBD_SetConfig+0x150>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	4619      	mov	r1, r3
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7fe ffe1 	bl	800c6ea <USBD_SetClassConfig>
 800d728:	4603      	mov	r3, r0
 800d72a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d008      	beq.n	800d744 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 f962 	bl	800d9fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2202      	movs	r2, #2
 800d73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d742:	e065      	b.n	800d810 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fa25 	bl	800db94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2203      	movs	r2, #3
 800d74e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d752:	e05d      	b.n	800d810 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 fa1d 	bl	800db94 <USBD_CtlSendStatus>
      break;
 800d75a:	e059      	b.n	800d810 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d75c:	4b2f      	ldr	r3, [pc, #188]	; (800d81c <USBD_SetConfig+0x150>)
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d112      	bne.n	800d78a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2202      	movs	r2, #2
 800d768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d76c:	4b2b      	ldr	r3, [pc, #172]	; (800d81c <USBD_SetConfig+0x150>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	461a      	mov	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d776:	4b29      	ldr	r3, [pc, #164]	; (800d81c <USBD_SetConfig+0x150>)
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	4619      	mov	r1, r3
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7fe ffd0 	bl	800c722 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fa06 	bl	800db94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d788:	e042      	b.n	800d810 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d78a:	4b24      	ldr	r3, [pc, #144]	; (800d81c <USBD_SetConfig+0x150>)
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	461a      	mov	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	429a      	cmp	r2, r3
 800d796:	d02a      	beq.n	800d7ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	4619      	mov	r1, r3
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7fe ffbe 	bl	800c722 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d7a6:	4b1d      	ldr	r3, [pc, #116]	; (800d81c <USBD_SetConfig+0x150>)
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7b0:	4b1a      	ldr	r3, [pc, #104]	; (800d81c <USBD_SetConfig+0x150>)
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7fe ff97 	bl	800c6ea <USBD_SetClassConfig>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00f      	beq.n	800d7e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 f918 	bl	800d9fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7fe ffa3 	bl	800c722 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2202      	movs	r2, #2
 800d7e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d7e4:	e014      	b.n	800d810 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f9d4 	bl	800db94 <USBD_CtlSendStatus>
      break;
 800d7ec:	e010      	b.n	800d810 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 f9d0 	bl	800db94 <USBD_CtlSendStatus>
      break;
 800d7f4:	e00c      	b.n	800d810 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f900 	bl	800d9fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7fe:	4b07      	ldr	r3, [pc, #28]	; (800d81c <USBD_SetConfig+0x150>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	4619      	mov	r1, r3
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7fe ff8c 	bl	800c722 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d80a:	2303      	movs	r3, #3
 800d80c:	73fb      	strb	r3, [r7, #15]
      break;
 800d80e:	bf00      	nop
  }

  return ret;
 800d810:	7bfb      	ldrb	r3, [r7, #15]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	20004e30 	.word	0x20004e30

0800d820 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	88db      	ldrh	r3, [r3, #6]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d004      	beq.n	800d83c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f8e2 	bl	800d9fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d83a:	e023      	b.n	800d884 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b02      	cmp	r3, #2
 800d846:	dc02      	bgt.n	800d84e <USBD_GetConfig+0x2e>
 800d848:	2b00      	cmp	r3, #0
 800d84a:	dc03      	bgt.n	800d854 <USBD_GetConfig+0x34>
 800d84c:	e015      	b.n	800d87a <USBD_GetConfig+0x5a>
 800d84e:	2b03      	cmp	r3, #3
 800d850:	d00b      	beq.n	800d86a <USBD_GetConfig+0x4a>
 800d852:	e012      	b.n	800d87a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3308      	adds	r3, #8
 800d85e:	2201      	movs	r2, #1
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f93c 	bl	800dae0 <USBD_CtlSendData>
        break;
 800d868:	e00c      	b.n	800d884 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	3304      	adds	r3, #4
 800d86e:	2201      	movs	r2, #1
 800d870:	4619      	mov	r1, r3
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f934 	bl	800dae0 <USBD_CtlSendData>
        break;
 800d878:	e004      	b.n	800d884 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d87a:	6839      	ldr	r1, [r7, #0]
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f8be 	bl	800d9fe <USBD_CtlError>
        break;
 800d882:	bf00      	nop
}
 800d884:	bf00      	nop
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d81e      	bhi.n	800d8e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	88db      	ldrh	r3, [r3, #6]
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d004      	beq.n	800d8b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 f8a5 	bl	800d9fe <USBD_CtlError>
        break;
 800d8b4:	e01a      	b.n	800d8ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d005      	beq.n	800d8d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	f043 0202 	orr.w	r2, r3, #2
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	330c      	adds	r3, #12
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	4619      	mov	r1, r3
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 f900 	bl	800dae0 <USBD_CtlSendData>
      break;
 800d8e0:	e004      	b.n	800d8ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f88a 	bl	800d9fe <USBD_CtlError>
      break;
 800d8ea:	bf00      	nop
  }
}
 800d8ec:	bf00      	nop
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	885b      	ldrh	r3, [r3, #2]
 800d902:	2b01      	cmp	r3, #1
 800d904:	d107      	bne.n	800d916 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2201      	movs	r2, #1
 800d90a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 f940 	bl	800db94 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d914:	e013      	b.n	800d93e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	885b      	ldrh	r3, [r3, #2]
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d10b      	bne.n	800d936 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	889b      	ldrh	r3, [r3, #4]
 800d922:	0a1b      	lsrs	r3, r3, #8
 800d924:	b29b      	uxth	r3, r3
 800d926:	b2da      	uxtb	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 f930 	bl	800db94 <USBD_CtlSendStatus>
}
 800d934:	e003      	b.n	800d93e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d936:	6839      	ldr	r1, [r7, #0]
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f860 	bl	800d9fe <USBD_CtlError>
}
 800d93e:	bf00      	nop
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d956:	b2db      	uxtb	r3, r3
 800d958:	3b01      	subs	r3, #1
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d80b      	bhi.n	800d976 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	885b      	ldrh	r3, [r3, #2]
 800d962:	2b01      	cmp	r3, #1
 800d964:	d10c      	bne.n	800d980 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 f910 	bl	800db94 <USBD_CtlSendStatus>
      }
      break;
 800d974:	e004      	b.n	800d980 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d976:	6839      	ldr	r1, [r7, #0]
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 f840 	bl	800d9fe <USBD_CtlError>
      break;
 800d97e:	e000      	b.n	800d982 <USBD_ClrFeature+0x3c>
      break;
 800d980:	bf00      	nop
  }
}
 800d982:	bf00      	nop
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b084      	sub	sp, #16
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
 800d992:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	781a      	ldrb	r2, [r3, #0]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	781a      	ldrb	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f7ff fa41 	bl	800ce3c <SWAPBYTE>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	461a      	mov	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f7ff fa34 	bl	800ce3c <SWAPBYTE>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7ff fa27 	bl	800ce3c <SWAPBYTE>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	80da      	strh	r2, [r3, #6]
}
 800d9f6:	bf00      	nop
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b082      	sub	sp, #8
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800da08:	2180      	movs	r1, #128	; 0x80
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fce2 	bl	800e3d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800da10:	2100      	movs	r1, #0
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 fcde 	bl	800e3d4 <USBD_LL_StallEP>
}
 800da18:	bf00      	nop
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800da2c:	2300      	movs	r3, #0
 800da2e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d036      	beq.n	800daa4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800da3a:	6938      	ldr	r0, [r7, #16]
 800da3c:	f000 f836 	bl	800daac <USBD_GetLen>
 800da40:	4603      	mov	r3, r0
 800da42:	3301      	adds	r3, #1
 800da44:	b29b      	uxth	r3, r3
 800da46:	005b      	lsls	r3, r3, #1
 800da48:	b29a      	uxth	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	4413      	add	r3, r2
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	7812      	ldrb	r2, [r2, #0]
 800da58:	701a      	strb	r2, [r3, #0]
  idx++;
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
 800da5c:	3301      	adds	r3, #1
 800da5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800da60:	7dfb      	ldrb	r3, [r7, #23]
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	4413      	add	r3, r2
 800da66:	2203      	movs	r2, #3
 800da68:	701a      	strb	r2, [r3, #0]
  idx++;
 800da6a:	7dfb      	ldrb	r3, [r7, #23]
 800da6c:	3301      	adds	r3, #1
 800da6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800da70:	e013      	b.n	800da9a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800da72:	7dfb      	ldrb	r3, [r7, #23]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	4413      	add	r3, r2
 800da78:	693a      	ldr	r2, [r7, #16]
 800da7a:	7812      	ldrb	r2, [r2, #0]
 800da7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	3301      	adds	r3, #1
 800da82:	613b      	str	r3, [r7, #16]
    idx++;
 800da84:	7dfb      	ldrb	r3, [r7, #23]
 800da86:	3301      	adds	r3, #1
 800da88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800da8a:	7dfb      	ldrb	r3, [r7, #23]
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	4413      	add	r3, r2
 800da90:	2200      	movs	r2, #0
 800da92:	701a      	strb	r2, [r3, #0]
    idx++;
 800da94:	7dfb      	ldrb	r3, [r7, #23]
 800da96:	3301      	adds	r3, #1
 800da98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1e7      	bne.n	800da72 <USBD_GetString+0x52>
 800daa2:	e000      	b.n	800daa6 <USBD_GetString+0x86>
    return;
 800daa4:	bf00      	nop
  }
}
 800daa6:	3718      	adds	r7, #24
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dabc:	e005      	b.n	800daca <USBD_GetLen+0x1e>
  {
    len++;
 800dabe:	7bfb      	ldrb	r3, [r7, #15]
 800dac0:	3301      	adds	r3, #1
 800dac2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	3301      	adds	r3, #1
 800dac8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1f5      	bne.n	800dabe <USBD_GetLen+0x12>
  }

  return len;
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3714      	adds	r7, #20
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2202      	movs	r2, #2
 800daf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	2100      	movs	r1, #0
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f000 fced 	bl	800e4e6 <USBD_LL_Transmit>

  return USBD_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b084      	sub	sp, #16
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	60f8      	str	r0, [r7, #12]
 800db1e:	60b9      	str	r1, [r7, #8]
 800db20:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	2100      	movs	r1, #0
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f000 fcdc 	bl	800e4e6 <USBD_LL_Transmit>

  return USBD_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2203      	movs	r2, #3
 800db48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	687a      	ldr	r2, [r7, #4]
 800db50:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	2100      	movs	r1, #0
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	f000 fce0 	bl	800e528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b084      	sub	sp, #16
 800db76:	af00      	add	r7, sp, #0
 800db78:	60f8      	str	r0, [r7, #12]
 800db7a:	60b9      	str	r1, [r7, #8]
 800db7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	2100      	movs	r1, #0
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f000 fccf 	bl	800e528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2204      	movs	r2, #4
 800dba0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dba4:	2300      	movs	r3, #0
 800dba6:	2200      	movs	r2, #0
 800dba8:	2100      	movs	r1, #0
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fc9b 	bl	800e4e6 <USBD_LL_Transmit>

  return USBD_OK;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b082      	sub	sp, #8
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2205      	movs	r2, #5
 800dbc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dbca:	2300      	movs	r3, #0
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2100      	movs	r1, #0
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 fca9 	bl	800e528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	4912      	ldr	r1, [pc, #72]	; (800dc30 <MX_USB_DEVICE_Init+0x50>)
 800dbe8:	4812      	ldr	r0, [pc, #72]	; (800dc34 <MX_USB_DEVICE_Init+0x54>)
 800dbea:	f7fe fd01 	bl	800c5f0 <USBD_Init>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dbf4:	f7f2 ff80 	bl	8000af8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800dbf8:	490f      	ldr	r1, [pc, #60]	; (800dc38 <MX_USB_DEVICE_Init+0x58>)
 800dbfa:	480e      	ldr	r0, [pc, #56]	; (800dc34 <MX_USB_DEVICE_Init+0x54>)
 800dbfc:	f7fe fd28 	bl	800c650 <USBD_RegisterClass>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d001      	beq.n	800dc0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dc06:	f7f2 ff77 	bl	8000af8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800dc0a:	490c      	ldr	r1, [pc, #48]	; (800dc3c <MX_USB_DEVICE_Init+0x5c>)
 800dc0c:	4809      	ldr	r0, [pc, #36]	; (800dc34 <MX_USB_DEVICE_Init+0x54>)
 800dc0e:	f7fe fc1f 	bl	800c450 <USBD_CDC_RegisterInterface>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d001      	beq.n	800dc1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dc18:	f7f2 ff6e 	bl	8000af8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800dc1c:	4805      	ldr	r0, [pc, #20]	; (800dc34 <MX_USB_DEVICE_Init+0x54>)
 800dc1e:	f7fe fd4d 	bl	800c6bc <USBD_Start>
 800dc22:	4603      	mov	r3, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d001      	beq.n	800dc2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dc28:	f7f2 ff66 	bl	8000af8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dc2c:	bf00      	nop
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20000138 	.word	0x20000138
 800dc34:	20004e34 	.word	0x20004e34
 800dc38:	200000a4 	.word	0x200000a4
 800dc3c:	20000124 	.word	0x20000124

0800dc40 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800dc44:	2200      	movs	r2, #0
 800dc46:	4905      	ldr	r1, [pc, #20]	; (800dc5c <CDC_Init_HS+0x1c>)
 800dc48:	4805      	ldr	r0, [pc, #20]	; (800dc60 <CDC_Init_HS+0x20>)
 800dc4a:	f7fe fc1b 	bl	800c484 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800dc4e:	4905      	ldr	r1, [pc, #20]	; (800dc64 <CDC_Init_HS+0x24>)
 800dc50:	4803      	ldr	r0, [pc, #12]	; (800dc60 <CDC_Init_HS+0x20>)
 800dc52:	f7fe fc39 	bl	800c4c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dc56:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	20005910 	.word	0x20005910
 800dc60:	20004e34 	.word	0x20004e34
 800dc64:	20005110 	.word	0x20005110

0800dc68 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800dc6c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	6039      	str	r1, [r7, #0]
 800dc82:	71fb      	strb	r3, [r7, #7]
 800dc84:	4613      	mov	r3, r2
 800dc86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800dc88:	79fb      	ldrb	r3, [r7, #7]
 800dc8a:	2b23      	cmp	r3, #35	; 0x23
 800dc8c:	d84a      	bhi.n	800dd24 <CDC_Control_HS+0xac>
 800dc8e:	a201      	add	r2, pc, #4	; (adr r2, 800dc94 <CDC_Control_HS+0x1c>)
 800dc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc94:	0800dd25 	.word	0x0800dd25
 800dc98:	0800dd25 	.word	0x0800dd25
 800dc9c:	0800dd25 	.word	0x0800dd25
 800dca0:	0800dd25 	.word	0x0800dd25
 800dca4:	0800dd25 	.word	0x0800dd25
 800dca8:	0800dd25 	.word	0x0800dd25
 800dcac:	0800dd25 	.word	0x0800dd25
 800dcb0:	0800dd25 	.word	0x0800dd25
 800dcb4:	0800dd25 	.word	0x0800dd25
 800dcb8:	0800dd25 	.word	0x0800dd25
 800dcbc:	0800dd25 	.word	0x0800dd25
 800dcc0:	0800dd25 	.word	0x0800dd25
 800dcc4:	0800dd25 	.word	0x0800dd25
 800dcc8:	0800dd25 	.word	0x0800dd25
 800dccc:	0800dd25 	.word	0x0800dd25
 800dcd0:	0800dd25 	.word	0x0800dd25
 800dcd4:	0800dd25 	.word	0x0800dd25
 800dcd8:	0800dd25 	.word	0x0800dd25
 800dcdc:	0800dd25 	.word	0x0800dd25
 800dce0:	0800dd25 	.word	0x0800dd25
 800dce4:	0800dd25 	.word	0x0800dd25
 800dce8:	0800dd25 	.word	0x0800dd25
 800dcec:	0800dd25 	.word	0x0800dd25
 800dcf0:	0800dd25 	.word	0x0800dd25
 800dcf4:	0800dd25 	.word	0x0800dd25
 800dcf8:	0800dd25 	.word	0x0800dd25
 800dcfc:	0800dd25 	.word	0x0800dd25
 800dd00:	0800dd25 	.word	0x0800dd25
 800dd04:	0800dd25 	.word	0x0800dd25
 800dd08:	0800dd25 	.word	0x0800dd25
 800dd0c:	0800dd25 	.word	0x0800dd25
 800dd10:	0800dd25 	.word	0x0800dd25
 800dd14:	0800dd25 	.word	0x0800dd25
 800dd18:	0800dd25 	.word	0x0800dd25
 800dd1c:	0800dd25 	.word	0x0800dd25
 800dd20:	0800dd25 	.word	0x0800dd25
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dd24:	bf00      	nop
  }

  return (USBD_OK);
 800dd26:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	4805      	ldr	r0, [pc, #20]	; (800dd58 <CDC_Receive_HS+0x24>)
 800dd42:	f7fe fbc1 	bl	800c4c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800dd46:	4804      	ldr	r0, [pc, #16]	; (800dd58 <CDC_Receive_HS+0x24>)
 800dd48:	f7fe fc1c 	bl	800c584 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dd4c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	20004e34 	.word	0x20004e34

0800dd5c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	460b      	mov	r3, r1
 800dd66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800dd6c:	4b0d      	ldr	r3, [pc, #52]	; (800dda4 <CDC_Transmit_HS+0x48>)
 800dd6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e00b      	b.n	800dd9a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800dd82:	887b      	ldrh	r3, [r7, #2]
 800dd84:	461a      	mov	r2, r3
 800dd86:	6879      	ldr	r1, [r7, #4]
 800dd88:	4806      	ldr	r0, [pc, #24]	; (800dda4 <CDC_Transmit_HS+0x48>)
 800dd8a:	f7fe fb7b 	bl	800c484 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800dd8e:	4805      	ldr	r0, [pc, #20]	; (800dda4 <CDC_Transmit_HS+0x48>)
 800dd90:	f7fe fbb8 	bl	800c504 <USBD_CDC_TransmitPacket>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	20004e34 	.word	0x20004e34

0800dda8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b087      	sub	sp, #28
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ddba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	371c      	adds	r7, #28
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr
	...

0800ddcc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	6039      	str	r1, [r7, #0]
 800ddd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	2212      	movs	r2, #18
 800dddc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ddde:	4b03      	ldr	r3, [pc, #12]	; (800ddec <USBD_HS_DeviceDescriptor+0x20>)
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr
 800ddec:	20000154 	.word	0x20000154

0800ddf0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	6039      	str	r1, [r7, #0]
 800ddfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2204      	movs	r2, #4
 800de00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800de02:	4b03      	ldr	r3, [pc, #12]	; (800de10 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800de04:	4618      	mov	r0, r3
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	20000168 	.word	0x20000168

0800de14 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	4603      	mov	r3, r0
 800de1c:	6039      	str	r1, [r7, #0]
 800de1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de20:	79fb      	ldrb	r3, [r7, #7]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d105      	bne.n	800de32 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	4907      	ldr	r1, [pc, #28]	; (800de48 <USBD_HS_ProductStrDescriptor+0x34>)
 800de2a:	4808      	ldr	r0, [pc, #32]	; (800de4c <USBD_HS_ProductStrDescriptor+0x38>)
 800de2c:	f7ff fdf8 	bl	800da20 <USBD_GetString>
 800de30:	e004      	b.n	800de3c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800de32:	683a      	ldr	r2, [r7, #0]
 800de34:	4904      	ldr	r1, [pc, #16]	; (800de48 <USBD_HS_ProductStrDescriptor+0x34>)
 800de36:	4805      	ldr	r0, [pc, #20]	; (800de4c <USBD_HS_ProductStrDescriptor+0x38>)
 800de38:	f7ff fdf2 	bl	800da20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de3c:	4b02      	ldr	r3, [pc, #8]	; (800de48 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3708      	adds	r7, #8
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	20006110 	.word	0x20006110
 800de4c:	0800efd4 	.word	0x0800efd4

0800de50 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	4603      	mov	r3, r0
 800de58:	6039      	str	r1, [r7, #0]
 800de5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	4904      	ldr	r1, [pc, #16]	; (800de70 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800de60:	4804      	ldr	r0, [pc, #16]	; (800de74 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800de62:	f7ff fddd 	bl	800da20 <USBD_GetString>
  return USBD_StrDesc;
 800de66:	4b02      	ldr	r3, [pc, #8]	; (800de70 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	20006110 	.word	0x20006110
 800de74:	0800efec 	.word	0x0800efec

0800de78 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	4603      	mov	r3, r0
 800de80:	6039      	str	r1, [r7, #0]
 800de82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	221a      	movs	r2, #26
 800de88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de8a:	f000 f843 	bl	800df14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800de8e:	4b02      	ldr	r3, [pc, #8]	; (800de98 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800de90:	4618      	mov	r0, r3
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	2000016c 	.word	0x2000016c

0800de9c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	4603      	mov	r3, r0
 800dea4:	6039      	str	r1, [r7, #0]
 800dea6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d105      	bne.n	800deba <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	4907      	ldr	r1, [pc, #28]	; (800ded0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800deb2:	4808      	ldr	r0, [pc, #32]	; (800ded4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800deb4:	f7ff fdb4 	bl	800da20 <USBD_GetString>
 800deb8:	e004      	b.n	800dec4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	4904      	ldr	r1, [pc, #16]	; (800ded0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800debe:	4805      	ldr	r0, [pc, #20]	; (800ded4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800dec0:	f7ff fdae 	bl	800da20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dec4:	4b02      	ldr	r3, [pc, #8]	; (800ded0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	20006110 	.word	0x20006110
 800ded4:	0800f000 	.word	0x0800f000

0800ded8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	4603      	mov	r3, r0
 800dee0:	6039      	str	r1, [r7, #0]
 800dee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dee4:	79fb      	ldrb	r3, [r7, #7]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d105      	bne.n	800def6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	4907      	ldr	r1, [pc, #28]	; (800df0c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800deee:	4808      	ldr	r0, [pc, #32]	; (800df10 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800def0:	f7ff fd96 	bl	800da20 <USBD_GetString>
 800def4:	e004      	b.n	800df00 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	4904      	ldr	r1, [pc, #16]	; (800df0c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800defa:	4805      	ldr	r0, [pc, #20]	; (800df10 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800defc:	f7ff fd90 	bl	800da20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df00:	4b02      	ldr	r3, [pc, #8]	; (800df0c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	20006110 	.word	0x20006110
 800df10:	0800f00c 	.word	0x0800f00c

0800df14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df1a:	4b0f      	ldr	r3, [pc, #60]	; (800df58 <Get_SerialNum+0x44>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df20:	4b0e      	ldr	r3, [pc, #56]	; (800df5c <Get_SerialNum+0x48>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df26:	4b0e      	ldr	r3, [pc, #56]	; (800df60 <Get_SerialNum+0x4c>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4413      	add	r3, r2
 800df32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d009      	beq.n	800df4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df3a:	2208      	movs	r2, #8
 800df3c:	4909      	ldr	r1, [pc, #36]	; (800df64 <Get_SerialNum+0x50>)
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f000 f814 	bl	800df6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df44:	2204      	movs	r2, #4
 800df46:	4908      	ldr	r1, [pc, #32]	; (800df68 <Get_SerialNum+0x54>)
 800df48:	68b8      	ldr	r0, [r7, #8]
 800df4a:	f000 f80f 	bl	800df6c <IntToUnicode>
  }
}
 800df4e:	bf00      	nop
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	1fff7a10 	.word	0x1fff7a10
 800df5c:	1fff7a14 	.word	0x1fff7a14
 800df60:	1fff7a18 	.word	0x1fff7a18
 800df64:	2000016e 	.word	0x2000016e
 800df68:	2000017e 	.word	0x2000017e

0800df6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b087      	sub	sp, #28
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	4613      	mov	r3, r2
 800df78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df7a:	2300      	movs	r3, #0
 800df7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df7e:	2300      	movs	r3, #0
 800df80:	75fb      	strb	r3, [r7, #23]
 800df82:	e027      	b.n	800dfd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	0f1b      	lsrs	r3, r3, #28
 800df88:	2b09      	cmp	r3, #9
 800df8a:	d80b      	bhi.n	800dfa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	0f1b      	lsrs	r3, r3, #28
 800df90:	b2da      	uxtb	r2, r3
 800df92:	7dfb      	ldrb	r3, [r7, #23]
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	4619      	mov	r1, r3
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	440b      	add	r3, r1
 800df9c:	3230      	adds	r2, #48	; 0x30
 800df9e:	b2d2      	uxtb	r2, r2
 800dfa0:	701a      	strb	r2, [r3, #0]
 800dfa2:	e00a      	b.n	800dfba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	0f1b      	lsrs	r3, r3, #28
 800dfa8:	b2da      	uxtb	r2, r3
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	005b      	lsls	r3, r3, #1
 800dfae:	4619      	mov	r1, r3
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	440b      	add	r3, r1
 800dfb4:	3237      	adds	r2, #55	; 0x37
 800dfb6:	b2d2      	uxtb	r2, r2
 800dfb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	011b      	lsls	r3, r3, #4
 800dfbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dfc0:	7dfb      	ldrb	r3, [r7, #23]
 800dfc2:	005b      	lsls	r3, r3, #1
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	68ba      	ldr	r2, [r7, #8]
 800dfc8:	4413      	add	r3, r2
 800dfca:	2200      	movs	r2, #0
 800dfcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dfce:	7dfb      	ldrb	r3, [r7, #23]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	75fb      	strb	r3, [r7, #23]
 800dfd4:	7dfa      	ldrb	r2, [r7, #23]
 800dfd6:	79fb      	ldrb	r3, [r7, #7]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d3d3      	bcc.n	800df84 <IntToUnicode+0x18>
  }
}
 800dfdc:	bf00      	nop
 800dfde:	bf00      	nop
 800dfe0:	371c      	adds	r7, #28
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr
	...

0800dfec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b08a      	sub	sp, #40	; 0x28
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dff4:	f107 0314 	add.w	r3, r7, #20
 800dff8:	2200      	movs	r2, #0
 800dffa:	601a      	str	r2, [r3, #0]
 800dffc:	605a      	str	r2, [r3, #4]
 800dffe:	609a      	str	r2, [r3, #8]
 800e000:	60da      	str	r2, [r3, #12]
 800e002:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a1d      	ldr	r2, [pc, #116]	; (800e080 <HAL_PCD_MspInit+0x94>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d134      	bne.n	800e078 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e00e:	2300      	movs	r3, #0
 800e010:	613b      	str	r3, [r7, #16]
 800e012:	4b1c      	ldr	r3, [pc, #112]	; (800e084 <HAL_PCD_MspInit+0x98>)
 800e014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e016:	4a1b      	ldr	r2, [pc, #108]	; (800e084 <HAL_PCD_MspInit+0x98>)
 800e018:	f043 0302 	orr.w	r3, r3, #2
 800e01c:	6313      	str	r3, [r2, #48]	; 0x30
 800e01e:	4b19      	ldr	r3, [pc, #100]	; (800e084 <HAL_PCD_MspInit+0x98>)
 800e020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e022:	f003 0302 	and.w	r3, r3, #2
 800e026:	613b      	str	r3, [r7, #16]
 800e028:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800e02a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800e02e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e030:	2302      	movs	r3, #2
 800e032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e034:	2300      	movs	r3, #0
 800e036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e038:	2303      	movs	r3, #3
 800e03a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e03c:	230c      	movs	r3, #12
 800e03e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e040:	f107 0314 	add.w	r3, r7, #20
 800e044:	4619      	mov	r1, r3
 800e046:	4810      	ldr	r0, [pc, #64]	; (800e088 <HAL_PCD_MspInit+0x9c>)
 800e048:	f7f5 faf4 	bl	8003634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e04c:	2300      	movs	r3, #0
 800e04e:	60fb      	str	r3, [r7, #12]
 800e050:	4b0c      	ldr	r3, [pc, #48]	; (800e084 <HAL_PCD_MspInit+0x98>)
 800e052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e054:	4a0b      	ldr	r2, [pc, #44]	; (800e084 <HAL_PCD_MspInit+0x98>)
 800e056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e05a:	6313      	str	r3, [r2, #48]	; 0x30
 800e05c:	4b09      	ldr	r3, [pc, #36]	; (800e084 <HAL_PCD_MspInit+0x98>)
 800e05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e064:	60fb      	str	r3, [r7, #12]
 800e066:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e068:	2200      	movs	r2, #0
 800e06a:	2105      	movs	r1, #5
 800e06c:	204d      	movs	r0, #77	; 0x4d
 800e06e:	f7f4 fe63 	bl	8002d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e072:	204d      	movs	r0, #77	; 0x4d
 800e074:	f7f4 fe7c 	bl	8002d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e078:	bf00      	nop
 800e07a:	3728      	adds	r7, #40	; 0x28
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	40040000 	.word	0x40040000
 800e084:	40023800 	.word	0x40023800
 800e088:	40020400 	.word	0x40020400

0800e08c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	f7fe fb57 	bl	800c756 <USBD_LL_SetupStage>
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800e0c2:	78fa      	ldrb	r2, [r7, #3]
 800e0c4:	6879      	ldr	r1, [r7, #4]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	00db      	lsls	r3, r3, #3
 800e0ca:	4413      	add	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	440b      	add	r3, r1
 800e0d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	78fb      	ldrb	r3, [r7, #3]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	f7fe fb91 	bl	800c800 <USBD_LL_DataOutStage>
}
 800e0de:	bf00      	nop
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b082      	sub	sp, #8
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800e0f8:	78fa      	ldrb	r2, [r7, #3]
 800e0fa:	6879      	ldr	r1, [r7, #4]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	00db      	lsls	r3, r3, #3
 800e100:	4413      	add	r3, r2
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	440b      	add	r3, r1
 800e106:	3320      	adds	r3, #32
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	78fb      	ldrb	r3, [r7, #3]
 800e10c:	4619      	mov	r1, r3
 800e10e:	f7fe fc2a 	bl	800c966 <USBD_LL_DataInStage>
}
 800e112:	bf00      	nop
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b082      	sub	sp, #8
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fe fd64 	bl	800cbf6 <USBD_LL_SOF>
}
 800e12e:	bf00      	nop
 800e130:	3708      	adds	r7, #8
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e136:	b580      	push	{r7, lr}
 800e138:	b084      	sub	sp, #16
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e13e:	2301      	movs	r3, #1
 800e140:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	79db      	ldrb	r3, [r3, #7]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d102      	bne.n	800e150 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e14a:	2300      	movs	r3, #0
 800e14c:	73fb      	strb	r3, [r7, #15]
 800e14e:	e008      	b.n	800e162 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	79db      	ldrb	r3, [r3, #7]
 800e154:	2b02      	cmp	r3, #2
 800e156:	d102      	bne.n	800e15e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e158:	2301      	movs	r3, #1
 800e15a:	73fb      	strb	r3, [r7, #15]
 800e15c:	e001      	b.n	800e162 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e15e:	f7f2 fccb 	bl	8000af8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e168:	7bfa      	ldrb	r2, [r7, #15]
 800e16a:	4611      	mov	r1, r2
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fe fcfe 	bl	800cb6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fe fca6 	bl	800caca <USBD_LL_Reset>
}
 800e17e:	bf00      	nop
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
	...

0800e188 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe fcf9 	bl	800cb8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	6812      	ldr	r2, [r2, #0]
 800e1aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1ae:	f043 0301 	orr.w	r3, r3, #1
 800e1b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	7adb      	ldrb	r3, [r3, #11]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d005      	beq.n	800e1c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1bc:	4b04      	ldr	r3, [pc, #16]	; (800e1d0 <HAL_PCD_SuspendCallback+0x48>)
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	4a03      	ldr	r2, [pc, #12]	; (800e1d0 <HAL_PCD_SuspendCallback+0x48>)
 800e1c2:	f043 0306 	orr.w	r3, r3, #6
 800e1c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1c8:	bf00      	nop
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	e000ed00 	.word	0xe000ed00

0800e1d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fe fcef 	bl	800cbc6 <USBD_LL_Resume>
}
 800e1e8:	bf00      	nop
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e202:	78fa      	ldrb	r2, [r7, #3]
 800e204:	4611      	mov	r1, r2
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe fd47 	bl	800cc9a <USBD_LL_IsoOUTIncomplete>
}
 800e20c:	bf00      	nop
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e226:	78fa      	ldrb	r2, [r7, #3]
 800e228:	4611      	mov	r1, r2
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fe fd03 	bl	800cc36 <USBD_LL_IsoINIncomplete>
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe fd59 	bl	800ccfe <USBD_LL_DevConnected>
}
 800e24c:	bf00      	nop
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e262:	4618      	mov	r0, r3
 800e264:	f7fe fd56 	bl	800cd14 <USBD_LL_DevDisconnected>
}
 800e268:	bf00      	nop
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d140      	bne.n	800e302 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e280:	4a22      	ldr	r2, [pc, #136]	; (800e30c <USBD_LL_Init+0x9c>)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4a20      	ldr	r2, [pc, #128]	; (800e30c <USBD_LL_Init+0x9c>)
 800e28c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e290:	4b1e      	ldr	r3, [pc, #120]	; (800e30c <USBD_LL_Init+0x9c>)
 800e292:	4a1f      	ldr	r2, [pc, #124]	; (800e310 <USBD_LL_Init+0xa0>)
 800e294:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800e296:	4b1d      	ldr	r3, [pc, #116]	; (800e30c <USBD_LL_Init+0x9c>)
 800e298:	2206      	movs	r2, #6
 800e29a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e29c:	4b1b      	ldr	r3, [pc, #108]	; (800e30c <USBD_LL_Init+0x9c>)
 800e29e:	2202      	movs	r2, #2
 800e2a0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e2a2:	4b1a      	ldr	r3, [pc, #104]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e2a8:	4b18      	ldr	r3, [pc, #96]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e2ae:	4b17      	ldr	r3, [pc, #92]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e2b4:	4b15      	ldr	r3, [pc, #84]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e2ba:	4b14      	ldr	r3, [pc, #80]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e2c0:	4b12      	ldr	r3, [pc, #72]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e2c6:	4b11      	ldr	r3, [pc, #68]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e2cc:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e2d2:	480e      	ldr	r0, [pc, #56]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2d4:	f7f5 fe4d 	bl	8003f72 <HAL_PCD_Init>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e2de:	f7f2 fc0b 	bl	8000af8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e2e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2e6:	4809      	ldr	r0, [pc, #36]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2e8:	f7f7 f877 	bl	80053da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e2ec:	2280      	movs	r2, #128	; 0x80
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	4806      	ldr	r0, [pc, #24]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2f2:	f7f7 f82b 	bl	800534c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e2f6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e2fa:	2101      	movs	r1, #1
 800e2fc:	4803      	ldr	r0, [pc, #12]	; (800e30c <USBD_LL_Init+0x9c>)
 800e2fe:	f7f7 f825 	bl	800534c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20006310 	.word	0x20006310
 800e310:	40040000 	.word	0x40040000

0800e314 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7f5 ff30 	bl	8004190 <HAL_PCD_Start>
 800e330:	4603      	mov	r3, r0
 800e332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	4618      	mov	r0, r3
 800e338:	f000 f942 	bl	800e5c0 <USBD_Get_USB_Status>
 800e33c:	4603      	mov	r3, r0
 800e33e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e340:	7bbb      	ldrb	r3, [r7, #14]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b084      	sub	sp, #16
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	461a      	mov	r2, r3
 800e358:	4603      	mov	r3, r0
 800e35a:	70fb      	strb	r3, [r7, #3]
 800e35c:	460b      	mov	r3, r1
 800e35e:	70bb      	strb	r3, [r7, #2]
 800e360:	4613      	mov	r3, r2
 800e362:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e364:	2300      	movs	r3, #0
 800e366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e368:	2300      	movs	r3, #0
 800e36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e372:	78bb      	ldrb	r3, [r7, #2]
 800e374:	883a      	ldrh	r2, [r7, #0]
 800e376:	78f9      	ldrb	r1, [r7, #3]
 800e378:	f7f6 fc04 	bl	8004b84 <HAL_PCD_EP_Open>
 800e37c:	4603      	mov	r3, r0
 800e37e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e380:	7bfb      	ldrb	r3, [r7, #15]
 800e382:	4618      	mov	r0, r3
 800e384:	f000 f91c 	bl	800e5c0 <USBD_Get_USB_Status>
 800e388:	4603      	mov	r3, r0
 800e38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e396:	b580      	push	{r7, lr}
 800e398:	b084      	sub	sp, #16
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
 800e39e:	460b      	mov	r3, r1
 800e3a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3b0:	78fa      	ldrb	r2, [r7, #3]
 800e3b2:	4611      	mov	r1, r2
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7f6 fc4d 	bl	8004c54 <HAL_PCD_EP_Close>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 f8fd 	bl	800e5c0 <USBD_Get_USB_Status>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3ee:	78fa      	ldrb	r2, [r7, #3]
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7f6 fd05 	bl	8004e02 <HAL_PCD_EP_SetStall>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 f8de 	bl	800e5c0 <USBD_Get_USB_Status>
 800e404:	4603      	mov	r3, r0
 800e406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e408:	7bbb      	ldrb	r3, [r7, #14]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b084      	sub	sp, #16
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	460b      	mov	r3, r1
 800e41c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e41e:	2300      	movs	r3, #0
 800e420:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e422:	2300      	movs	r3, #0
 800e424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e42c:	78fa      	ldrb	r2, [r7, #3]
 800e42e:	4611      	mov	r1, r2
 800e430:	4618      	mov	r0, r3
 800e432:	f7f6 fd49 	bl	8004ec8 <HAL_PCD_EP_ClrStall>
 800e436:	4603      	mov	r3, r0
 800e438:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f000 f8bf 	bl	800e5c0 <USBD_Get_USB_Status>
 800e442:	4603      	mov	r3, r0
 800e444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e446:	7bbb      	ldrb	r3, [r7, #14]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e462:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	da0b      	bge.n	800e484 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e46c:	78fb      	ldrb	r3, [r7, #3]
 800e46e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e472:	68f9      	ldr	r1, [r7, #12]
 800e474:	4613      	mov	r3, r2
 800e476:	00db      	lsls	r3, r3, #3
 800e478:	4413      	add	r3, r2
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	440b      	add	r3, r1
 800e47e:	3316      	adds	r3, #22
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	e00b      	b.n	800e49c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e48a:	68f9      	ldr	r1, [r7, #12]
 800e48c:	4613      	mov	r3, r2
 800e48e:	00db      	lsls	r3, r3, #3
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	440b      	add	r3, r1
 800e496:	f203 2356 	addw	r3, r3, #598	; 0x256
 800e49a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3714      	adds	r7, #20
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr

0800e4a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4c2:	78fa      	ldrb	r2, [r7, #3]
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7f6 fb38 	bl	8004b3c <HAL_PCD_SetAddress>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f000 f874 	bl	800e5c0 <USBD_Get_USB_Status>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b086      	sub	sp, #24
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	60f8      	str	r0, [r7, #12]
 800e4ee:	607a      	str	r2, [r7, #4]
 800e4f0:	603b      	str	r3, [r7, #0]
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e504:	7af9      	ldrb	r1, [r7, #11]
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	f7f6 fc40 	bl	8004d8e <HAL_PCD_EP_Transmit>
 800e50e:	4603      	mov	r3, r0
 800e510:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e512:	7dfb      	ldrb	r3, [r7, #23]
 800e514:	4618      	mov	r0, r3
 800e516:	f000 f853 	bl	800e5c0 <USBD_Get_USB_Status>
 800e51a:	4603      	mov	r3, r0
 800e51c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e51e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3718      	adds	r7, #24
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	607a      	str	r2, [r7, #4]
 800e532:	603b      	str	r3, [r7, #0]
 800e534:	460b      	mov	r3, r1
 800e536:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e538:	2300      	movs	r3, #0
 800e53a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e546:	7af9      	ldrb	r1, [r7, #11]
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	f7f6 fbcc 	bl	8004ce8 <HAL_PCD_EP_Receive>
 800e550:	4603      	mov	r3, r0
 800e552:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e554:	7dfb      	ldrb	r3, [r7, #23]
 800e556:	4618      	mov	r0, r3
 800e558:	f000 f832 	bl	800e5c0 <USBD_Get_USB_Status>
 800e55c:	4603      	mov	r3, r0
 800e55e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e560:	7dbb      	ldrb	r3, [r7, #22]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3718      	adds	r7, #24
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b082      	sub	sp, #8
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
 800e572:	460b      	mov	r3, r1
 800e574:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e57c:	78fa      	ldrb	r2, [r7, #3]
 800e57e:	4611      	mov	r1, r2
 800e580:	4618      	mov	r0, r3
 800e582:	f7f6 fbec 	bl	8004d5e <HAL_PCD_EP_GetRxCount>
 800e586:	4603      	mov	r3, r0
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e598:	4b03      	ldr	r3, [pc, #12]	; (800e5a8 <USBD_static_malloc+0x18>)
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	200067f4 	.word	0x200067f4

0800e5ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]

}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e5ce:	79fb      	ldrb	r3, [r7, #7]
 800e5d0:	2b03      	cmp	r3, #3
 800e5d2:	d817      	bhi.n	800e604 <USBD_Get_USB_Status+0x44>
 800e5d4:	a201      	add	r2, pc, #4	; (adr r2, 800e5dc <USBD_Get_USB_Status+0x1c>)
 800e5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5da:	bf00      	nop
 800e5dc:	0800e5ed 	.word	0x0800e5ed
 800e5e0:	0800e5f3 	.word	0x0800e5f3
 800e5e4:	0800e5f9 	.word	0x0800e5f9
 800e5e8:	0800e5ff 	.word	0x0800e5ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e5f0:	e00b      	b.n	800e60a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800e5f6:	e008      	b.n	800e60a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e5fc:	e005      	b.n	800e60a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5fe:	2303      	movs	r3, #3
 800e600:	73fb      	strb	r3, [r7, #15]
    break;
 800e602:	e002      	b.n	800e60a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e604:	2303      	movs	r3, #3
 800e606:	73fb      	strb	r3, [r7, #15]
    break;
 800e608:	bf00      	nop
  }
  return usb_status;
 800e60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3714      	adds	r7, #20
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <siprintf>:
 800e618:	b40e      	push	{r1, r2, r3}
 800e61a:	b500      	push	{lr}
 800e61c:	b09c      	sub	sp, #112	; 0x70
 800e61e:	ab1d      	add	r3, sp, #116	; 0x74
 800e620:	9002      	str	r0, [sp, #8]
 800e622:	9006      	str	r0, [sp, #24]
 800e624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e628:	4809      	ldr	r0, [pc, #36]	; (800e650 <siprintf+0x38>)
 800e62a:	9107      	str	r1, [sp, #28]
 800e62c:	9104      	str	r1, [sp, #16]
 800e62e:	4909      	ldr	r1, [pc, #36]	; (800e654 <siprintf+0x3c>)
 800e630:	f853 2b04 	ldr.w	r2, [r3], #4
 800e634:	9105      	str	r1, [sp, #20]
 800e636:	6800      	ldr	r0, [r0, #0]
 800e638:	9301      	str	r3, [sp, #4]
 800e63a:	a902      	add	r1, sp, #8
 800e63c:	f000 f9a0 	bl	800e980 <_svfiprintf_r>
 800e640:	9b02      	ldr	r3, [sp, #8]
 800e642:	2200      	movs	r2, #0
 800e644:	701a      	strb	r2, [r3, #0]
 800e646:	b01c      	add	sp, #112	; 0x70
 800e648:	f85d eb04 	ldr.w	lr, [sp], #4
 800e64c:	b003      	add	sp, #12
 800e64e:	4770      	bx	lr
 800e650:	200001d4 	.word	0x200001d4
 800e654:	ffff0208 	.word	0xffff0208

0800e658 <memset>:
 800e658:	4402      	add	r2, r0
 800e65a:	4603      	mov	r3, r0
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d100      	bne.n	800e662 <memset+0xa>
 800e660:	4770      	bx	lr
 800e662:	f803 1b01 	strb.w	r1, [r3], #1
 800e666:	e7f9      	b.n	800e65c <memset+0x4>

0800e668 <__errno>:
 800e668:	4b01      	ldr	r3, [pc, #4]	; (800e670 <__errno+0x8>)
 800e66a:	6818      	ldr	r0, [r3, #0]
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	200001d4 	.word	0x200001d4

0800e674 <__libc_init_array>:
 800e674:	b570      	push	{r4, r5, r6, lr}
 800e676:	4d0d      	ldr	r5, [pc, #52]	; (800e6ac <__libc_init_array+0x38>)
 800e678:	4c0d      	ldr	r4, [pc, #52]	; (800e6b0 <__libc_init_array+0x3c>)
 800e67a:	1b64      	subs	r4, r4, r5
 800e67c:	10a4      	asrs	r4, r4, #2
 800e67e:	2600      	movs	r6, #0
 800e680:	42a6      	cmp	r6, r4
 800e682:	d109      	bne.n	800e698 <__libc_init_array+0x24>
 800e684:	4d0b      	ldr	r5, [pc, #44]	; (800e6b4 <__libc_init_array+0x40>)
 800e686:	4c0c      	ldr	r4, [pc, #48]	; (800e6b8 <__libc_init_array+0x44>)
 800e688:	f000 fc6a 	bl	800ef60 <_init>
 800e68c:	1b64      	subs	r4, r4, r5
 800e68e:	10a4      	asrs	r4, r4, #2
 800e690:	2600      	movs	r6, #0
 800e692:	42a6      	cmp	r6, r4
 800e694:	d105      	bne.n	800e6a2 <__libc_init_array+0x2e>
 800e696:	bd70      	pop	{r4, r5, r6, pc}
 800e698:	f855 3b04 	ldr.w	r3, [r5], #4
 800e69c:	4798      	blx	r3
 800e69e:	3601      	adds	r6, #1
 800e6a0:	e7ee      	b.n	800e680 <__libc_init_array+0xc>
 800e6a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6a6:	4798      	blx	r3
 800e6a8:	3601      	adds	r6, #1
 800e6aa:	e7f2      	b.n	800e692 <__libc_init_array+0x1e>
 800e6ac:	08010bd8 	.word	0x08010bd8
 800e6b0:	08010bd8 	.word	0x08010bd8
 800e6b4:	08010bd8 	.word	0x08010bd8
 800e6b8:	08010bdc 	.word	0x08010bdc

0800e6bc <__retarget_lock_acquire_recursive>:
 800e6bc:	4770      	bx	lr

0800e6be <__retarget_lock_release_recursive>:
 800e6be:	4770      	bx	lr

0800e6c0 <memcpy>:
 800e6c0:	440a      	add	r2, r1
 800e6c2:	4291      	cmp	r1, r2
 800e6c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6c8:	d100      	bne.n	800e6cc <memcpy+0xc>
 800e6ca:	4770      	bx	lr
 800e6cc:	b510      	push	{r4, lr}
 800e6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6d6:	4291      	cmp	r1, r2
 800e6d8:	d1f9      	bne.n	800e6ce <memcpy+0xe>
 800e6da:	bd10      	pop	{r4, pc}

0800e6dc <_free_r>:
 800e6dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6de:	2900      	cmp	r1, #0
 800e6e0:	d044      	beq.n	800e76c <_free_r+0x90>
 800e6e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6e6:	9001      	str	r0, [sp, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f1a1 0404 	sub.w	r4, r1, #4
 800e6ee:	bfb8      	it	lt
 800e6f0:	18e4      	addlt	r4, r4, r3
 800e6f2:	f000 f8df 	bl	800e8b4 <__malloc_lock>
 800e6f6:	4a1e      	ldr	r2, [pc, #120]	; (800e770 <_free_r+0x94>)
 800e6f8:	9801      	ldr	r0, [sp, #4]
 800e6fa:	6813      	ldr	r3, [r2, #0]
 800e6fc:	b933      	cbnz	r3, 800e70c <_free_r+0x30>
 800e6fe:	6063      	str	r3, [r4, #4]
 800e700:	6014      	str	r4, [r2, #0]
 800e702:	b003      	add	sp, #12
 800e704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e708:	f000 b8da 	b.w	800e8c0 <__malloc_unlock>
 800e70c:	42a3      	cmp	r3, r4
 800e70e:	d908      	bls.n	800e722 <_free_r+0x46>
 800e710:	6825      	ldr	r5, [r4, #0]
 800e712:	1961      	adds	r1, r4, r5
 800e714:	428b      	cmp	r3, r1
 800e716:	bf01      	itttt	eq
 800e718:	6819      	ldreq	r1, [r3, #0]
 800e71a:	685b      	ldreq	r3, [r3, #4]
 800e71c:	1949      	addeq	r1, r1, r5
 800e71e:	6021      	streq	r1, [r4, #0]
 800e720:	e7ed      	b.n	800e6fe <_free_r+0x22>
 800e722:	461a      	mov	r2, r3
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	b10b      	cbz	r3, 800e72c <_free_r+0x50>
 800e728:	42a3      	cmp	r3, r4
 800e72a:	d9fa      	bls.n	800e722 <_free_r+0x46>
 800e72c:	6811      	ldr	r1, [r2, #0]
 800e72e:	1855      	adds	r5, r2, r1
 800e730:	42a5      	cmp	r5, r4
 800e732:	d10b      	bne.n	800e74c <_free_r+0x70>
 800e734:	6824      	ldr	r4, [r4, #0]
 800e736:	4421      	add	r1, r4
 800e738:	1854      	adds	r4, r2, r1
 800e73a:	42a3      	cmp	r3, r4
 800e73c:	6011      	str	r1, [r2, #0]
 800e73e:	d1e0      	bne.n	800e702 <_free_r+0x26>
 800e740:	681c      	ldr	r4, [r3, #0]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	6053      	str	r3, [r2, #4]
 800e746:	440c      	add	r4, r1
 800e748:	6014      	str	r4, [r2, #0]
 800e74a:	e7da      	b.n	800e702 <_free_r+0x26>
 800e74c:	d902      	bls.n	800e754 <_free_r+0x78>
 800e74e:	230c      	movs	r3, #12
 800e750:	6003      	str	r3, [r0, #0]
 800e752:	e7d6      	b.n	800e702 <_free_r+0x26>
 800e754:	6825      	ldr	r5, [r4, #0]
 800e756:	1961      	adds	r1, r4, r5
 800e758:	428b      	cmp	r3, r1
 800e75a:	bf04      	itt	eq
 800e75c:	6819      	ldreq	r1, [r3, #0]
 800e75e:	685b      	ldreq	r3, [r3, #4]
 800e760:	6063      	str	r3, [r4, #4]
 800e762:	bf04      	itt	eq
 800e764:	1949      	addeq	r1, r1, r5
 800e766:	6021      	streq	r1, [r4, #0]
 800e768:	6054      	str	r4, [r2, #4]
 800e76a:	e7ca      	b.n	800e702 <_free_r+0x26>
 800e76c:	b003      	add	sp, #12
 800e76e:	bd30      	pop	{r4, r5, pc}
 800e770:	20006b54 	.word	0x20006b54

0800e774 <sbrk_aligned>:
 800e774:	b570      	push	{r4, r5, r6, lr}
 800e776:	4e0e      	ldr	r6, [pc, #56]	; (800e7b0 <sbrk_aligned+0x3c>)
 800e778:	460c      	mov	r4, r1
 800e77a:	6831      	ldr	r1, [r6, #0]
 800e77c:	4605      	mov	r5, r0
 800e77e:	b911      	cbnz	r1, 800e786 <sbrk_aligned+0x12>
 800e780:	f000 fba6 	bl	800eed0 <_sbrk_r>
 800e784:	6030      	str	r0, [r6, #0]
 800e786:	4621      	mov	r1, r4
 800e788:	4628      	mov	r0, r5
 800e78a:	f000 fba1 	bl	800eed0 <_sbrk_r>
 800e78e:	1c43      	adds	r3, r0, #1
 800e790:	d00a      	beq.n	800e7a8 <sbrk_aligned+0x34>
 800e792:	1cc4      	adds	r4, r0, #3
 800e794:	f024 0403 	bic.w	r4, r4, #3
 800e798:	42a0      	cmp	r0, r4
 800e79a:	d007      	beq.n	800e7ac <sbrk_aligned+0x38>
 800e79c:	1a21      	subs	r1, r4, r0
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f000 fb96 	bl	800eed0 <_sbrk_r>
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	d101      	bne.n	800e7ac <sbrk_aligned+0x38>
 800e7a8:	f04f 34ff 	mov.w	r4, #4294967295
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	bd70      	pop	{r4, r5, r6, pc}
 800e7b0:	20006b58 	.word	0x20006b58

0800e7b4 <_malloc_r>:
 800e7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7b8:	1ccd      	adds	r5, r1, #3
 800e7ba:	f025 0503 	bic.w	r5, r5, #3
 800e7be:	3508      	adds	r5, #8
 800e7c0:	2d0c      	cmp	r5, #12
 800e7c2:	bf38      	it	cc
 800e7c4:	250c      	movcc	r5, #12
 800e7c6:	2d00      	cmp	r5, #0
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	db01      	blt.n	800e7d0 <_malloc_r+0x1c>
 800e7cc:	42a9      	cmp	r1, r5
 800e7ce:	d905      	bls.n	800e7dc <_malloc_r+0x28>
 800e7d0:	230c      	movs	r3, #12
 800e7d2:	603b      	str	r3, [r7, #0]
 800e7d4:	2600      	movs	r6, #0
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e8b0 <_malloc_r+0xfc>
 800e7e0:	f000 f868 	bl	800e8b4 <__malloc_lock>
 800e7e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e7e8:	461c      	mov	r4, r3
 800e7ea:	bb5c      	cbnz	r4, 800e844 <_malloc_r+0x90>
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	4638      	mov	r0, r7
 800e7f0:	f7ff ffc0 	bl	800e774 <sbrk_aligned>
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	d155      	bne.n	800e8a6 <_malloc_r+0xf2>
 800e7fa:	f8d8 4000 	ldr.w	r4, [r8]
 800e7fe:	4626      	mov	r6, r4
 800e800:	2e00      	cmp	r6, #0
 800e802:	d145      	bne.n	800e890 <_malloc_r+0xdc>
 800e804:	2c00      	cmp	r4, #0
 800e806:	d048      	beq.n	800e89a <_malloc_r+0xe6>
 800e808:	6823      	ldr	r3, [r4, #0]
 800e80a:	4631      	mov	r1, r6
 800e80c:	4638      	mov	r0, r7
 800e80e:	eb04 0903 	add.w	r9, r4, r3
 800e812:	f000 fb5d 	bl	800eed0 <_sbrk_r>
 800e816:	4581      	cmp	r9, r0
 800e818:	d13f      	bne.n	800e89a <_malloc_r+0xe6>
 800e81a:	6821      	ldr	r1, [r4, #0]
 800e81c:	1a6d      	subs	r5, r5, r1
 800e81e:	4629      	mov	r1, r5
 800e820:	4638      	mov	r0, r7
 800e822:	f7ff ffa7 	bl	800e774 <sbrk_aligned>
 800e826:	3001      	adds	r0, #1
 800e828:	d037      	beq.n	800e89a <_malloc_r+0xe6>
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	442b      	add	r3, r5
 800e82e:	6023      	str	r3, [r4, #0]
 800e830:	f8d8 3000 	ldr.w	r3, [r8]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d038      	beq.n	800e8aa <_malloc_r+0xf6>
 800e838:	685a      	ldr	r2, [r3, #4]
 800e83a:	42a2      	cmp	r2, r4
 800e83c:	d12b      	bne.n	800e896 <_malloc_r+0xe2>
 800e83e:	2200      	movs	r2, #0
 800e840:	605a      	str	r2, [r3, #4]
 800e842:	e00f      	b.n	800e864 <_malloc_r+0xb0>
 800e844:	6822      	ldr	r2, [r4, #0]
 800e846:	1b52      	subs	r2, r2, r5
 800e848:	d41f      	bmi.n	800e88a <_malloc_r+0xd6>
 800e84a:	2a0b      	cmp	r2, #11
 800e84c:	d917      	bls.n	800e87e <_malloc_r+0xca>
 800e84e:	1961      	adds	r1, r4, r5
 800e850:	42a3      	cmp	r3, r4
 800e852:	6025      	str	r5, [r4, #0]
 800e854:	bf18      	it	ne
 800e856:	6059      	strne	r1, [r3, #4]
 800e858:	6863      	ldr	r3, [r4, #4]
 800e85a:	bf08      	it	eq
 800e85c:	f8c8 1000 	streq.w	r1, [r8]
 800e860:	5162      	str	r2, [r4, r5]
 800e862:	604b      	str	r3, [r1, #4]
 800e864:	4638      	mov	r0, r7
 800e866:	f104 060b 	add.w	r6, r4, #11
 800e86a:	f000 f829 	bl	800e8c0 <__malloc_unlock>
 800e86e:	f026 0607 	bic.w	r6, r6, #7
 800e872:	1d23      	adds	r3, r4, #4
 800e874:	1af2      	subs	r2, r6, r3
 800e876:	d0ae      	beq.n	800e7d6 <_malloc_r+0x22>
 800e878:	1b9b      	subs	r3, r3, r6
 800e87a:	50a3      	str	r3, [r4, r2]
 800e87c:	e7ab      	b.n	800e7d6 <_malloc_r+0x22>
 800e87e:	42a3      	cmp	r3, r4
 800e880:	6862      	ldr	r2, [r4, #4]
 800e882:	d1dd      	bne.n	800e840 <_malloc_r+0x8c>
 800e884:	f8c8 2000 	str.w	r2, [r8]
 800e888:	e7ec      	b.n	800e864 <_malloc_r+0xb0>
 800e88a:	4623      	mov	r3, r4
 800e88c:	6864      	ldr	r4, [r4, #4]
 800e88e:	e7ac      	b.n	800e7ea <_malloc_r+0x36>
 800e890:	4634      	mov	r4, r6
 800e892:	6876      	ldr	r6, [r6, #4]
 800e894:	e7b4      	b.n	800e800 <_malloc_r+0x4c>
 800e896:	4613      	mov	r3, r2
 800e898:	e7cc      	b.n	800e834 <_malloc_r+0x80>
 800e89a:	230c      	movs	r3, #12
 800e89c:	603b      	str	r3, [r7, #0]
 800e89e:	4638      	mov	r0, r7
 800e8a0:	f000 f80e 	bl	800e8c0 <__malloc_unlock>
 800e8a4:	e797      	b.n	800e7d6 <_malloc_r+0x22>
 800e8a6:	6025      	str	r5, [r4, #0]
 800e8a8:	e7dc      	b.n	800e864 <_malloc_r+0xb0>
 800e8aa:	605b      	str	r3, [r3, #4]
 800e8ac:	deff      	udf	#255	; 0xff
 800e8ae:	bf00      	nop
 800e8b0:	20006b54 	.word	0x20006b54

0800e8b4 <__malloc_lock>:
 800e8b4:	4801      	ldr	r0, [pc, #4]	; (800e8bc <__malloc_lock+0x8>)
 800e8b6:	f7ff bf01 	b.w	800e6bc <__retarget_lock_acquire_recursive>
 800e8ba:	bf00      	nop
 800e8bc:	20006b50 	.word	0x20006b50

0800e8c0 <__malloc_unlock>:
 800e8c0:	4801      	ldr	r0, [pc, #4]	; (800e8c8 <__malloc_unlock+0x8>)
 800e8c2:	f7ff befc 	b.w	800e6be <__retarget_lock_release_recursive>
 800e8c6:	bf00      	nop
 800e8c8:	20006b50 	.word	0x20006b50

0800e8cc <__ssputs_r>:
 800e8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d0:	688e      	ldr	r6, [r1, #8]
 800e8d2:	461f      	mov	r7, r3
 800e8d4:	42be      	cmp	r6, r7
 800e8d6:	680b      	ldr	r3, [r1, #0]
 800e8d8:	4682      	mov	sl, r0
 800e8da:	460c      	mov	r4, r1
 800e8dc:	4690      	mov	r8, r2
 800e8de:	d82c      	bhi.n	800e93a <__ssputs_r+0x6e>
 800e8e0:	898a      	ldrh	r2, [r1, #12]
 800e8e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8e6:	d026      	beq.n	800e936 <__ssputs_r+0x6a>
 800e8e8:	6965      	ldr	r5, [r4, #20]
 800e8ea:	6909      	ldr	r1, [r1, #16]
 800e8ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8f0:	eba3 0901 	sub.w	r9, r3, r1
 800e8f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8f8:	1c7b      	adds	r3, r7, #1
 800e8fa:	444b      	add	r3, r9
 800e8fc:	106d      	asrs	r5, r5, #1
 800e8fe:	429d      	cmp	r5, r3
 800e900:	bf38      	it	cc
 800e902:	461d      	movcc	r5, r3
 800e904:	0553      	lsls	r3, r2, #21
 800e906:	d527      	bpl.n	800e958 <__ssputs_r+0x8c>
 800e908:	4629      	mov	r1, r5
 800e90a:	f7ff ff53 	bl	800e7b4 <_malloc_r>
 800e90e:	4606      	mov	r6, r0
 800e910:	b360      	cbz	r0, 800e96c <__ssputs_r+0xa0>
 800e912:	6921      	ldr	r1, [r4, #16]
 800e914:	464a      	mov	r2, r9
 800e916:	f7ff fed3 	bl	800e6c0 <memcpy>
 800e91a:	89a3      	ldrh	r3, [r4, #12]
 800e91c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e924:	81a3      	strh	r3, [r4, #12]
 800e926:	6126      	str	r6, [r4, #16]
 800e928:	6165      	str	r5, [r4, #20]
 800e92a:	444e      	add	r6, r9
 800e92c:	eba5 0509 	sub.w	r5, r5, r9
 800e930:	6026      	str	r6, [r4, #0]
 800e932:	60a5      	str	r5, [r4, #8]
 800e934:	463e      	mov	r6, r7
 800e936:	42be      	cmp	r6, r7
 800e938:	d900      	bls.n	800e93c <__ssputs_r+0x70>
 800e93a:	463e      	mov	r6, r7
 800e93c:	6820      	ldr	r0, [r4, #0]
 800e93e:	4632      	mov	r2, r6
 800e940:	4641      	mov	r1, r8
 800e942:	f000 faab 	bl	800ee9c <memmove>
 800e946:	68a3      	ldr	r3, [r4, #8]
 800e948:	1b9b      	subs	r3, r3, r6
 800e94a:	60a3      	str	r3, [r4, #8]
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	4433      	add	r3, r6
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	2000      	movs	r0, #0
 800e954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e958:	462a      	mov	r2, r5
 800e95a:	f000 fac9 	bl	800eef0 <_realloc_r>
 800e95e:	4606      	mov	r6, r0
 800e960:	2800      	cmp	r0, #0
 800e962:	d1e0      	bne.n	800e926 <__ssputs_r+0x5a>
 800e964:	6921      	ldr	r1, [r4, #16]
 800e966:	4650      	mov	r0, sl
 800e968:	f7ff feb8 	bl	800e6dc <_free_r>
 800e96c:	230c      	movs	r3, #12
 800e96e:	f8ca 3000 	str.w	r3, [sl]
 800e972:	89a3      	ldrh	r3, [r4, #12]
 800e974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e978:	81a3      	strh	r3, [r4, #12]
 800e97a:	f04f 30ff 	mov.w	r0, #4294967295
 800e97e:	e7e9      	b.n	800e954 <__ssputs_r+0x88>

0800e980 <_svfiprintf_r>:
 800e980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e984:	4698      	mov	r8, r3
 800e986:	898b      	ldrh	r3, [r1, #12]
 800e988:	061b      	lsls	r3, r3, #24
 800e98a:	b09d      	sub	sp, #116	; 0x74
 800e98c:	4607      	mov	r7, r0
 800e98e:	460d      	mov	r5, r1
 800e990:	4614      	mov	r4, r2
 800e992:	d50e      	bpl.n	800e9b2 <_svfiprintf_r+0x32>
 800e994:	690b      	ldr	r3, [r1, #16]
 800e996:	b963      	cbnz	r3, 800e9b2 <_svfiprintf_r+0x32>
 800e998:	2140      	movs	r1, #64	; 0x40
 800e99a:	f7ff ff0b 	bl	800e7b4 <_malloc_r>
 800e99e:	6028      	str	r0, [r5, #0]
 800e9a0:	6128      	str	r0, [r5, #16]
 800e9a2:	b920      	cbnz	r0, 800e9ae <_svfiprintf_r+0x2e>
 800e9a4:	230c      	movs	r3, #12
 800e9a6:	603b      	str	r3, [r7, #0]
 800e9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ac:	e0d0      	b.n	800eb50 <_svfiprintf_r+0x1d0>
 800e9ae:	2340      	movs	r3, #64	; 0x40
 800e9b0:	616b      	str	r3, [r5, #20]
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9b6:	2320      	movs	r3, #32
 800e9b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9c0:	2330      	movs	r3, #48	; 0x30
 800e9c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eb68 <_svfiprintf_r+0x1e8>
 800e9c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9ca:	f04f 0901 	mov.w	r9, #1
 800e9ce:	4623      	mov	r3, r4
 800e9d0:	469a      	mov	sl, r3
 800e9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9d6:	b10a      	cbz	r2, 800e9dc <_svfiprintf_r+0x5c>
 800e9d8:	2a25      	cmp	r2, #37	; 0x25
 800e9da:	d1f9      	bne.n	800e9d0 <_svfiprintf_r+0x50>
 800e9dc:	ebba 0b04 	subs.w	fp, sl, r4
 800e9e0:	d00b      	beq.n	800e9fa <_svfiprintf_r+0x7a>
 800e9e2:	465b      	mov	r3, fp
 800e9e4:	4622      	mov	r2, r4
 800e9e6:	4629      	mov	r1, r5
 800e9e8:	4638      	mov	r0, r7
 800e9ea:	f7ff ff6f 	bl	800e8cc <__ssputs_r>
 800e9ee:	3001      	adds	r0, #1
 800e9f0:	f000 80a9 	beq.w	800eb46 <_svfiprintf_r+0x1c6>
 800e9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9f6:	445a      	add	r2, fp
 800e9f8:	9209      	str	r2, [sp, #36]	; 0x24
 800e9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	f000 80a1 	beq.w	800eb46 <_svfiprintf_r+0x1c6>
 800ea04:	2300      	movs	r3, #0
 800ea06:	f04f 32ff 	mov.w	r2, #4294967295
 800ea0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea0e:	f10a 0a01 	add.w	sl, sl, #1
 800ea12:	9304      	str	r3, [sp, #16]
 800ea14:	9307      	str	r3, [sp, #28]
 800ea16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ea1c:	4654      	mov	r4, sl
 800ea1e:	2205      	movs	r2, #5
 800ea20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea24:	4850      	ldr	r0, [pc, #320]	; (800eb68 <_svfiprintf_r+0x1e8>)
 800ea26:	f7f1 fbe3 	bl	80001f0 <memchr>
 800ea2a:	9a04      	ldr	r2, [sp, #16]
 800ea2c:	b9d8      	cbnz	r0, 800ea66 <_svfiprintf_r+0xe6>
 800ea2e:	06d0      	lsls	r0, r2, #27
 800ea30:	bf44      	itt	mi
 800ea32:	2320      	movmi	r3, #32
 800ea34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea38:	0711      	lsls	r1, r2, #28
 800ea3a:	bf44      	itt	mi
 800ea3c:	232b      	movmi	r3, #43	; 0x2b
 800ea3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea42:	f89a 3000 	ldrb.w	r3, [sl]
 800ea46:	2b2a      	cmp	r3, #42	; 0x2a
 800ea48:	d015      	beq.n	800ea76 <_svfiprintf_r+0xf6>
 800ea4a:	9a07      	ldr	r2, [sp, #28]
 800ea4c:	4654      	mov	r4, sl
 800ea4e:	2000      	movs	r0, #0
 800ea50:	f04f 0c0a 	mov.w	ip, #10
 800ea54:	4621      	mov	r1, r4
 800ea56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea5a:	3b30      	subs	r3, #48	; 0x30
 800ea5c:	2b09      	cmp	r3, #9
 800ea5e:	d94d      	bls.n	800eafc <_svfiprintf_r+0x17c>
 800ea60:	b1b0      	cbz	r0, 800ea90 <_svfiprintf_r+0x110>
 800ea62:	9207      	str	r2, [sp, #28]
 800ea64:	e014      	b.n	800ea90 <_svfiprintf_r+0x110>
 800ea66:	eba0 0308 	sub.w	r3, r0, r8
 800ea6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	9304      	str	r3, [sp, #16]
 800ea72:	46a2      	mov	sl, r4
 800ea74:	e7d2      	b.n	800ea1c <_svfiprintf_r+0x9c>
 800ea76:	9b03      	ldr	r3, [sp, #12]
 800ea78:	1d19      	adds	r1, r3, #4
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	9103      	str	r1, [sp, #12]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	bfbb      	ittet	lt
 800ea82:	425b      	neglt	r3, r3
 800ea84:	f042 0202 	orrlt.w	r2, r2, #2
 800ea88:	9307      	strge	r3, [sp, #28]
 800ea8a:	9307      	strlt	r3, [sp, #28]
 800ea8c:	bfb8      	it	lt
 800ea8e:	9204      	strlt	r2, [sp, #16]
 800ea90:	7823      	ldrb	r3, [r4, #0]
 800ea92:	2b2e      	cmp	r3, #46	; 0x2e
 800ea94:	d10c      	bne.n	800eab0 <_svfiprintf_r+0x130>
 800ea96:	7863      	ldrb	r3, [r4, #1]
 800ea98:	2b2a      	cmp	r3, #42	; 0x2a
 800ea9a:	d134      	bne.n	800eb06 <_svfiprintf_r+0x186>
 800ea9c:	9b03      	ldr	r3, [sp, #12]
 800ea9e:	1d1a      	adds	r2, r3, #4
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	9203      	str	r2, [sp, #12]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	bfb8      	it	lt
 800eaa8:	f04f 33ff 	movlt.w	r3, #4294967295
 800eaac:	3402      	adds	r4, #2
 800eaae:	9305      	str	r3, [sp, #20]
 800eab0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eb78 <_svfiprintf_r+0x1f8>
 800eab4:	7821      	ldrb	r1, [r4, #0]
 800eab6:	2203      	movs	r2, #3
 800eab8:	4650      	mov	r0, sl
 800eaba:	f7f1 fb99 	bl	80001f0 <memchr>
 800eabe:	b138      	cbz	r0, 800ead0 <_svfiprintf_r+0x150>
 800eac0:	9b04      	ldr	r3, [sp, #16]
 800eac2:	eba0 000a 	sub.w	r0, r0, sl
 800eac6:	2240      	movs	r2, #64	; 0x40
 800eac8:	4082      	lsls	r2, r0
 800eaca:	4313      	orrs	r3, r2
 800eacc:	3401      	adds	r4, #1
 800eace:	9304      	str	r3, [sp, #16]
 800ead0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead4:	4825      	ldr	r0, [pc, #148]	; (800eb6c <_svfiprintf_r+0x1ec>)
 800ead6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eada:	2206      	movs	r2, #6
 800eadc:	f7f1 fb88 	bl	80001f0 <memchr>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d038      	beq.n	800eb56 <_svfiprintf_r+0x1d6>
 800eae4:	4b22      	ldr	r3, [pc, #136]	; (800eb70 <_svfiprintf_r+0x1f0>)
 800eae6:	bb1b      	cbnz	r3, 800eb30 <_svfiprintf_r+0x1b0>
 800eae8:	9b03      	ldr	r3, [sp, #12]
 800eaea:	3307      	adds	r3, #7
 800eaec:	f023 0307 	bic.w	r3, r3, #7
 800eaf0:	3308      	adds	r3, #8
 800eaf2:	9303      	str	r3, [sp, #12]
 800eaf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf6:	4433      	add	r3, r6
 800eaf8:	9309      	str	r3, [sp, #36]	; 0x24
 800eafa:	e768      	b.n	800e9ce <_svfiprintf_r+0x4e>
 800eafc:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb00:	460c      	mov	r4, r1
 800eb02:	2001      	movs	r0, #1
 800eb04:	e7a6      	b.n	800ea54 <_svfiprintf_r+0xd4>
 800eb06:	2300      	movs	r3, #0
 800eb08:	3401      	adds	r4, #1
 800eb0a:	9305      	str	r3, [sp, #20]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	f04f 0c0a 	mov.w	ip, #10
 800eb12:	4620      	mov	r0, r4
 800eb14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb18:	3a30      	subs	r2, #48	; 0x30
 800eb1a:	2a09      	cmp	r2, #9
 800eb1c:	d903      	bls.n	800eb26 <_svfiprintf_r+0x1a6>
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d0c6      	beq.n	800eab0 <_svfiprintf_r+0x130>
 800eb22:	9105      	str	r1, [sp, #20]
 800eb24:	e7c4      	b.n	800eab0 <_svfiprintf_r+0x130>
 800eb26:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e7f0      	b.n	800eb12 <_svfiprintf_r+0x192>
 800eb30:	ab03      	add	r3, sp, #12
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	462a      	mov	r2, r5
 800eb36:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <_svfiprintf_r+0x1f4>)
 800eb38:	a904      	add	r1, sp, #16
 800eb3a:	4638      	mov	r0, r7
 800eb3c:	f3af 8000 	nop.w
 800eb40:	1c42      	adds	r2, r0, #1
 800eb42:	4606      	mov	r6, r0
 800eb44:	d1d6      	bne.n	800eaf4 <_svfiprintf_r+0x174>
 800eb46:	89ab      	ldrh	r3, [r5, #12]
 800eb48:	065b      	lsls	r3, r3, #25
 800eb4a:	f53f af2d 	bmi.w	800e9a8 <_svfiprintf_r+0x28>
 800eb4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb50:	b01d      	add	sp, #116	; 0x74
 800eb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb56:	ab03      	add	r3, sp, #12
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	462a      	mov	r2, r5
 800eb5c:	4b05      	ldr	r3, [pc, #20]	; (800eb74 <_svfiprintf_r+0x1f4>)
 800eb5e:	a904      	add	r1, sp, #16
 800eb60:	4638      	mov	r0, r7
 800eb62:	f000 f879 	bl	800ec58 <_printf_i>
 800eb66:	e7eb      	b.n	800eb40 <_svfiprintf_r+0x1c0>
 800eb68:	08010b9c 	.word	0x08010b9c
 800eb6c:	08010ba6 	.word	0x08010ba6
 800eb70:	00000000 	.word	0x00000000
 800eb74:	0800e8cd 	.word	0x0800e8cd
 800eb78:	08010ba2 	.word	0x08010ba2

0800eb7c <_printf_common>:
 800eb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb80:	4616      	mov	r6, r2
 800eb82:	4699      	mov	r9, r3
 800eb84:	688a      	ldr	r2, [r1, #8]
 800eb86:	690b      	ldr	r3, [r1, #16]
 800eb88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	bfb8      	it	lt
 800eb90:	4613      	movlt	r3, r2
 800eb92:	6033      	str	r3, [r6, #0]
 800eb94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb98:	4607      	mov	r7, r0
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	b10a      	cbz	r2, 800eba2 <_printf_common+0x26>
 800eb9e:	3301      	adds	r3, #1
 800eba0:	6033      	str	r3, [r6, #0]
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	0699      	lsls	r1, r3, #26
 800eba6:	bf42      	ittt	mi
 800eba8:	6833      	ldrmi	r3, [r6, #0]
 800ebaa:	3302      	addmi	r3, #2
 800ebac:	6033      	strmi	r3, [r6, #0]
 800ebae:	6825      	ldr	r5, [r4, #0]
 800ebb0:	f015 0506 	ands.w	r5, r5, #6
 800ebb4:	d106      	bne.n	800ebc4 <_printf_common+0x48>
 800ebb6:	f104 0a19 	add.w	sl, r4, #25
 800ebba:	68e3      	ldr	r3, [r4, #12]
 800ebbc:	6832      	ldr	r2, [r6, #0]
 800ebbe:	1a9b      	subs	r3, r3, r2
 800ebc0:	42ab      	cmp	r3, r5
 800ebc2:	dc26      	bgt.n	800ec12 <_printf_common+0x96>
 800ebc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebc8:	1e13      	subs	r3, r2, #0
 800ebca:	6822      	ldr	r2, [r4, #0]
 800ebcc:	bf18      	it	ne
 800ebce:	2301      	movne	r3, #1
 800ebd0:	0692      	lsls	r2, r2, #26
 800ebd2:	d42b      	bmi.n	800ec2c <_printf_common+0xb0>
 800ebd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebd8:	4649      	mov	r1, r9
 800ebda:	4638      	mov	r0, r7
 800ebdc:	47c0      	blx	r8
 800ebde:	3001      	adds	r0, #1
 800ebe0:	d01e      	beq.n	800ec20 <_printf_common+0xa4>
 800ebe2:	6823      	ldr	r3, [r4, #0]
 800ebe4:	6922      	ldr	r2, [r4, #16]
 800ebe6:	f003 0306 	and.w	r3, r3, #6
 800ebea:	2b04      	cmp	r3, #4
 800ebec:	bf02      	ittt	eq
 800ebee:	68e5      	ldreq	r5, [r4, #12]
 800ebf0:	6833      	ldreq	r3, [r6, #0]
 800ebf2:	1aed      	subeq	r5, r5, r3
 800ebf4:	68a3      	ldr	r3, [r4, #8]
 800ebf6:	bf0c      	ite	eq
 800ebf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebfc:	2500      	movne	r5, #0
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	bfc4      	itt	gt
 800ec02:	1a9b      	subgt	r3, r3, r2
 800ec04:	18ed      	addgt	r5, r5, r3
 800ec06:	2600      	movs	r6, #0
 800ec08:	341a      	adds	r4, #26
 800ec0a:	42b5      	cmp	r5, r6
 800ec0c:	d11a      	bne.n	800ec44 <_printf_common+0xc8>
 800ec0e:	2000      	movs	r0, #0
 800ec10:	e008      	b.n	800ec24 <_printf_common+0xa8>
 800ec12:	2301      	movs	r3, #1
 800ec14:	4652      	mov	r2, sl
 800ec16:	4649      	mov	r1, r9
 800ec18:	4638      	mov	r0, r7
 800ec1a:	47c0      	blx	r8
 800ec1c:	3001      	adds	r0, #1
 800ec1e:	d103      	bne.n	800ec28 <_printf_common+0xac>
 800ec20:	f04f 30ff 	mov.w	r0, #4294967295
 800ec24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec28:	3501      	adds	r5, #1
 800ec2a:	e7c6      	b.n	800ebba <_printf_common+0x3e>
 800ec2c:	18e1      	adds	r1, r4, r3
 800ec2e:	1c5a      	adds	r2, r3, #1
 800ec30:	2030      	movs	r0, #48	; 0x30
 800ec32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec36:	4422      	add	r2, r4
 800ec38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec40:	3302      	adds	r3, #2
 800ec42:	e7c7      	b.n	800ebd4 <_printf_common+0x58>
 800ec44:	2301      	movs	r3, #1
 800ec46:	4622      	mov	r2, r4
 800ec48:	4649      	mov	r1, r9
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	47c0      	blx	r8
 800ec4e:	3001      	adds	r0, #1
 800ec50:	d0e6      	beq.n	800ec20 <_printf_common+0xa4>
 800ec52:	3601      	adds	r6, #1
 800ec54:	e7d9      	b.n	800ec0a <_printf_common+0x8e>
	...

0800ec58 <_printf_i>:
 800ec58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec5c:	7e0f      	ldrb	r7, [r1, #24]
 800ec5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec60:	2f78      	cmp	r7, #120	; 0x78
 800ec62:	4691      	mov	r9, r2
 800ec64:	4680      	mov	r8, r0
 800ec66:	460c      	mov	r4, r1
 800ec68:	469a      	mov	sl, r3
 800ec6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec6e:	d807      	bhi.n	800ec80 <_printf_i+0x28>
 800ec70:	2f62      	cmp	r7, #98	; 0x62
 800ec72:	d80a      	bhi.n	800ec8a <_printf_i+0x32>
 800ec74:	2f00      	cmp	r7, #0
 800ec76:	f000 80d4 	beq.w	800ee22 <_printf_i+0x1ca>
 800ec7a:	2f58      	cmp	r7, #88	; 0x58
 800ec7c:	f000 80c0 	beq.w	800ee00 <_printf_i+0x1a8>
 800ec80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec88:	e03a      	b.n	800ed00 <_printf_i+0xa8>
 800ec8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec8e:	2b15      	cmp	r3, #21
 800ec90:	d8f6      	bhi.n	800ec80 <_printf_i+0x28>
 800ec92:	a101      	add	r1, pc, #4	; (adr r1, 800ec98 <_printf_i+0x40>)
 800ec94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec98:	0800ecf1 	.word	0x0800ecf1
 800ec9c:	0800ed05 	.word	0x0800ed05
 800eca0:	0800ec81 	.word	0x0800ec81
 800eca4:	0800ec81 	.word	0x0800ec81
 800eca8:	0800ec81 	.word	0x0800ec81
 800ecac:	0800ec81 	.word	0x0800ec81
 800ecb0:	0800ed05 	.word	0x0800ed05
 800ecb4:	0800ec81 	.word	0x0800ec81
 800ecb8:	0800ec81 	.word	0x0800ec81
 800ecbc:	0800ec81 	.word	0x0800ec81
 800ecc0:	0800ec81 	.word	0x0800ec81
 800ecc4:	0800ee09 	.word	0x0800ee09
 800ecc8:	0800ed31 	.word	0x0800ed31
 800eccc:	0800edc3 	.word	0x0800edc3
 800ecd0:	0800ec81 	.word	0x0800ec81
 800ecd4:	0800ec81 	.word	0x0800ec81
 800ecd8:	0800ee2b 	.word	0x0800ee2b
 800ecdc:	0800ec81 	.word	0x0800ec81
 800ece0:	0800ed31 	.word	0x0800ed31
 800ece4:	0800ec81 	.word	0x0800ec81
 800ece8:	0800ec81 	.word	0x0800ec81
 800ecec:	0800edcb 	.word	0x0800edcb
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	1d1a      	adds	r2, r3, #4
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	602a      	str	r2, [r5, #0]
 800ecf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed00:	2301      	movs	r3, #1
 800ed02:	e09f      	b.n	800ee44 <_printf_i+0x1ec>
 800ed04:	6820      	ldr	r0, [r4, #0]
 800ed06:	682b      	ldr	r3, [r5, #0]
 800ed08:	0607      	lsls	r7, r0, #24
 800ed0a:	f103 0104 	add.w	r1, r3, #4
 800ed0e:	6029      	str	r1, [r5, #0]
 800ed10:	d501      	bpl.n	800ed16 <_printf_i+0xbe>
 800ed12:	681e      	ldr	r6, [r3, #0]
 800ed14:	e003      	b.n	800ed1e <_printf_i+0xc6>
 800ed16:	0646      	lsls	r6, r0, #25
 800ed18:	d5fb      	bpl.n	800ed12 <_printf_i+0xba>
 800ed1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ed1e:	2e00      	cmp	r6, #0
 800ed20:	da03      	bge.n	800ed2a <_printf_i+0xd2>
 800ed22:	232d      	movs	r3, #45	; 0x2d
 800ed24:	4276      	negs	r6, r6
 800ed26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed2a:	485a      	ldr	r0, [pc, #360]	; (800ee94 <_printf_i+0x23c>)
 800ed2c:	230a      	movs	r3, #10
 800ed2e:	e012      	b.n	800ed56 <_printf_i+0xfe>
 800ed30:	682b      	ldr	r3, [r5, #0]
 800ed32:	6820      	ldr	r0, [r4, #0]
 800ed34:	1d19      	adds	r1, r3, #4
 800ed36:	6029      	str	r1, [r5, #0]
 800ed38:	0605      	lsls	r5, r0, #24
 800ed3a:	d501      	bpl.n	800ed40 <_printf_i+0xe8>
 800ed3c:	681e      	ldr	r6, [r3, #0]
 800ed3e:	e002      	b.n	800ed46 <_printf_i+0xee>
 800ed40:	0641      	lsls	r1, r0, #25
 800ed42:	d5fb      	bpl.n	800ed3c <_printf_i+0xe4>
 800ed44:	881e      	ldrh	r6, [r3, #0]
 800ed46:	4853      	ldr	r0, [pc, #332]	; (800ee94 <_printf_i+0x23c>)
 800ed48:	2f6f      	cmp	r7, #111	; 0x6f
 800ed4a:	bf0c      	ite	eq
 800ed4c:	2308      	moveq	r3, #8
 800ed4e:	230a      	movne	r3, #10
 800ed50:	2100      	movs	r1, #0
 800ed52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed56:	6865      	ldr	r5, [r4, #4]
 800ed58:	60a5      	str	r5, [r4, #8]
 800ed5a:	2d00      	cmp	r5, #0
 800ed5c:	bfa2      	ittt	ge
 800ed5e:	6821      	ldrge	r1, [r4, #0]
 800ed60:	f021 0104 	bicge.w	r1, r1, #4
 800ed64:	6021      	strge	r1, [r4, #0]
 800ed66:	b90e      	cbnz	r6, 800ed6c <_printf_i+0x114>
 800ed68:	2d00      	cmp	r5, #0
 800ed6a:	d04b      	beq.n	800ee04 <_printf_i+0x1ac>
 800ed6c:	4615      	mov	r5, r2
 800ed6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed72:	fb03 6711 	mls	r7, r3, r1, r6
 800ed76:	5dc7      	ldrb	r7, [r0, r7]
 800ed78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed7c:	4637      	mov	r7, r6
 800ed7e:	42bb      	cmp	r3, r7
 800ed80:	460e      	mov	r6, r1
 800ed82:	d9f4      	bls.n	800ed6e <_printf_i+0x116>
 800ed84:	2b08      	cmp	r3, #8
 800ed86:	d10b      	bne.n	800eda0 <_printf_i+0x148>
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	07de      	lsls	r6, r3, #31
 800ed8c:	d508      	bpl.n	800eda0 <_printf_i+0x148>
 800ed8e:	6923      	ldr	r3, [r4, #16]
 800ed90:	6861      	ldr	r1, [r4, #4]
 800ed92:	4299      	cmp	r1, r3
 800ed94:	bfde      	ittt	le
 800ed96:	2330      	movle	r3, #48	; 0x30
 800ed98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eda0:	1b52      	subs	r2, r2, r5
 800eda2:	6122      	str	r2, [r4, #16]
 800eda4:	f8cd a000 	str.w	sl, [sp]
 800eda8:	464b      	mov	r3, r9
 800edaa:	aa03      	add	r2, sp, #12
 800edac:	4621      	mov	r1, r4
 800edae:	4640      	mov	r0, r8
 800edb0:	f7ff fee4 	bl	800eb7c <_printf_common>
 800edb4:	3001      	adds	r0, #1
 800edb6:	d14a      	bne.n	800ee4e <_printf_i+0x1f6>
 800edb8:	f04f 30ff 	mov.w	r0, #4294967295
 800edbc:	b004      	add	sp, #16
 800edbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc2:	6823      	ldr	r3, [r4, #0]
 800edc4:	f043 0320 	orr.w	r3, r3, #32
 800edc8:	6023      	str	r3, [r4, #0]
 800edca:	4833      	ldr	r0, [pc, #204]	; (800ee98 <_printf_i+0x240>)
 800edcc:	2778      	movs	r7, #120	; 0x78
 800edce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800edd2:	6823      	ldr	r3, [r4, #0]
 800edd4:	6829      	ldr	r1, [r5, #0]
 800edd6:	061f      	lsls	r7, r3, #24
 800edd8:	f851 6b04 	ldr.w	r6, [r1], #4
 800eddc:	d402      	bmi.n	800ede4 <_printf_i+0x18c>
 800edde:	065f      	lsls	r7, r3, #25
 800ede0:	bf48      	it	mi
 800ede2:	b2b6      	uxthmi	r6, r6
 800ede4:	07df      	lsls	r7, r3, #31
 800ede6:	bf48      	it	mi
 800ede8:	f043 0320 	orrmi.w	r3, r3, #32
 800edec:	6029      	str	r1, [r5, #0]
 800edee:	bf48      	it	mi
 800edf0:	6023      	strmi	r3, [r4, #0]
 800edf2:	b91e      	cbnz	r6, 800edfc <_printf_i+0x1a4>
 800edf4:	6823      	ldr	r3, [r4, #0]
 800edf6:	f023 0320 	bic.w	r3, r3, #32
 800edfa:	6023      	str	r3, [r4, #0]
 800edfc:	2310      	movs	r3, #16
 800edfe:	e7a7      	b.n	800ed50 <_printf_i+0xf8>
 800ee00:	4824      	ldr	r0, [pc, #144]	; (800ee94 <_printf_i+0x23c>)
 800ee02:	e7e4      	b.n	800edce <_printf_i+0x176>
 800ee04:	4615      	mov	r5, r2
 800ee06:	e7bd      	b.n	800ed84 <_printf_i+0x12c>
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	6826      	ldr	r6, [r4, #0]
 800ee0c:	6961      	ldr	r1, [r4, #20]
 800ee0e:	1d18      	adds	r0, r3, #4
 800ee10:	6028      	str	r0, [r5, #0]
 800ee12:	0635      	lsls	r5, r6, #24
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	d501      	bpl.n	800ee1c <_printf_i+0x1c4>
 800ee18:	6019      	str	r1, [r3, #0]
 800ee1a:	e002      	b.n	800ee22 <_printf_i+0x1ca>
 800ee1c:	0670      	lsls	r0, r6, #25
 800ee1e:	d5fb      	bpl.n	800ee18 <_printf_i+0x1c0>
 800ee20:	8019      	strh	r1, [r3, #0]
 800ee22:	2300      	movs	r3, #0
 800ee24:	6123      	str	r3, [r4, #16]
 800ee26:	4615      	mov	r5, r2
 800ee28:	e7bc      	b.n	800eda4 <_printf_i+0x14c>
 800ee2a:	682b      	ldr	r3, [r5, #0]
 800ee2c:	1d1a      	adds	r2, r3, #4
 800ee2e:	602a      	str	r2, [r5, #0]
 800ee30:	681d      	ldr	r5, [r3, #0]
 800ee32:	6862      	ldr	r2, [r4, #4]
 800ee34:	2100      	movs	r1, #0
 800ee36:	4628      	mov	r0, r5
 800ee38:	f7f1 f9da 	bl	80001f0 <memchr>
 800ee3c:	b108      	cbz	r0, 800ee42 <_printf_i+0x1ea>
 800ee3e:	1b40      	subs	r0, r0, r5
 800ee40:	6060      	str	r0, [r4, #4]
 800ee42:	6863      	ldr	r3, [r4, #4]
 800ee44:	6123      	str	r3, [r4, #16]
 800ee46:	2300      	movs	r3, #0
 800ee48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee4c:	e7aa      	b.n	800eda4 <_printf_i+0x14c>
 800ee4e:	6923      	ldr	r3, [r4, #16]
 800ee50:	462a      	mov	r2, r5
 800ee52:	4649      	mov	r1, r9
 800ee54:	4640      	mov	r0, r8
 800ee56:	47d0      	blx	sl
 800ee58:	3001      	adds	r0, #1
 800ee5a:	d0ad      	beq.n	800edb8 <_printf_i+0x160>
 800ee5c:	6823      	ldr	r3, [r4, #0]
 800ee5e:	079b      	lsls	r3, r3, #30
 800ee60:	d413      	bmi.n	800ee8a <_printf_i+0x232>
 800ee62:	68e0      	ldr	r0, [r4, #12]
 800ee64:	9b03      	ldr	r3, [sp, #12]
 800ee66:	4298      	cmp	r0, r3
 800ee68:	bfb8      	it	lt
 800ee6a:	4618      	movlt	r0, r3
 800ee6c:	e7a6      	b.n	800edbc <_printf_i+0x164>
 800ee6e:	2301      	movs	r3, #1
 800ee70:	4632      	mov	r2, r6
 800ee72:	4649      	mov	r1, r9
 800ee74:	4640      	mov	r0, r8
 800ee76:	47d0      	blx	sl
 800ee78:	3001      	adds	r0, #1
 800ee7a:	d09d      	beq.n	800edb8 <_printf_i+0x160>
 800ee7c:	3501      	adds	r5, #1
 800ee7e:	68e3      	ldr	r3, [r4, #12]
 800ee80:	9903      	ldr	r1, [sp, #12]
 800ee82:	1a5b      	subs	r3, r3, r1
 800ee84:	42ab      	cmp	r3, r5
 800ee86:	dcf2      	bgt.n	800ee6e <_printf_i+0x216>
 800ee88:	e7eb      	b.n	800ee62 <_printf_i+0x20a>
 800ee8a:	2500      	movs	r5, #0
 800ee8c:	f104 0619 	add.w	r6, r4, #25
 800ee90:	e7f5      	b.n	800ee7e <_printf_i+0x226>
 800ee92:	bf00      	nop
 800ee94:	08010bad 	.word	0x08010bad
 800ee98:	08010bbe 	.word	0x08010bbe

0800ee9c <memmove>:
 800ee9c:	4288      	cmp	r0, r1
 800ee9e:	b510      	push	{r4, lr}
 800eea0:	eb01 0402 	add.w	r4, r1, r2
 800eea4:	d902      	bls.n	800eeac <memmove+0x10>
 800eea6:	4284      	cmp	r4, r0
 800eea8:	4623      	mov	r3, r4
 800eeaa:	d807      	bhi.n	800eebc <memmove+0x20>
 800eeac:	1e43      	subs	r3, r0, #1
 800eeae:	42a1      	cmp	r1, r4
 800eeb0:	d008      	beq.n	800eec4 <memmove+0x28>
 800eeb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eeb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eeba:	e7f8      	b.n	800eeae <memmove+0x12>
 800eebc:	4402      	add	r2, r0
 800eebe:	4601      	mov	r1, r0
 800eec0:	428a      	cmp	r2, r1
 800eec2:	d100      	bne.n	800eec6 <memmove+0x2a>
 800eec4:	bd10      	pop	{r4, pc}
 800eec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eeca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eece:	e7f7      	b.n	800eec0 <memmove+0x24>

0800eed0 <_sbrk_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4d06      	ldr	r5, [pc, #24]	; (800eeec <_sbrk_r+0x1c>)
 800eed4:	2300      	movs	r3, #0
 800eed6:	4604      	mov	r4, r0
 800eed8:	4608      	mov	r0, r1
 800eeda:	602b      	str	r3, [r5, #0]
 800eedc:	f7f1 fee4 	bl	8000ca8 <_sbrk>
 800eee0:	1c43      	adds	r3, r0, #1
 800eee2:	d102      	bne.n	800eeea <_sbrk_r+0x1a>
 800eee4:	682b      	ldr	r3, [r5, #0]
 800eee6:	b103      	cbz	r3, 800eeea <_sbrk_r+0x1a>
 800eee8:	6023      	str	r3, [r4, #0]
 800eeea:	bd38      	pop	{r3, r4, r5, pc}
 800eeec:	20006b4c 	.word	0x20006b4c

0800eef0 <_realloc_r>:
 800eef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef4:	4680      	mov	r8, r0
 800eef6:	4614      	mov	r4, r2
 800eef8:	460e      	mov	r6, r1
 800eefa:	b921      	cbnz	r1, 800ef06 <_realloc_r+0x16>
 800eefc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef00:	4611      	mov	r1, r2
 800ef02:	f7ff bc57 	b.w	800e7b4 <_malloc_r>
 800ef06:	b92a      	cbnz	r2, 800ef14 <_realloc_r+0x24>
 800ef08:	f7ff fbe8 	bl	800e6dc <_free_r>
 800ef0c:	4625      	mov	r5, r4
 800ef0e:	4628      	mov	r0, r5
 800ef10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef14:	f000 f81b 	bl	800ef4e <_malloc_usable_size_r>
 800ef18:	4284      	cmp	r4, r0
 800ef1a:	4607      	mov	r7, r0
 800ef1c:	d802      	bhi.n	800ef24 <_realloc_r+0x34>
 800ef1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef22:	d812      	bhi.n	800ef4a <_realloc_r+0x5a>
 800ef24:	4621      	mov	r1, r4
 800ef26:	4640      	mov	r0, r8
 800ef28:	f7ff fc44 	bl	800e7b4 <_malloc_r>
 800ef2c:	4605      	mov	r5, r0
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d0ed      	beq.n	800ef0e <_realloc_r+0x1e>
 800ef32:	42bc      	cmp	r4, r7
 800ef34:	4622      	mov	r2, r4
 800ef36:	4631      	mov	r1, r6
 800ef38:	bf28      	it	cs
 800ef3a:	463a      	movcs	r2, r7
 800ef3c:	f7ff fbc0 	bl	800e6c0 <memcpy>
 800ef40:	4631      	mov	r1, r6
 800ef42:	4640      	mov	r0, r8
 800ef44:	f7ff fbca 	bl	800e6dc <_free_r>
 800ef48:	e7e1      	b.n	800ef0e <_realloc_r+0x1e>
 800ef4a:	4635      	mov	r5, r6
 800ef4c:	e7df      	b.n	800ef0e <_realloc_r+0x1e>

0800ef4e <_malloc_usable_size_r>:
 800ef4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef52:	1f18      	subs	r0, r3, #4
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	bfbc      	itt	lt
 800ef58:	580b      	ldrlt	r3, [r1, r0]
 800ef5a:	18c0      	addlt	r0, r0, r3
 800ef5c:	4770      	bx	lr
	...

0800ef60 <_init>:
 800ef60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef62:	bf00      	nop
 800ef64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef66:	bc08      	pop	{r3}
 800ef68:	469e      	mov	lr, r3
 800ef6a:	4770      	bx	lr

0800ef6c <_fini>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	bf00      	nop
 800ef70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef72:	bc08      	pop	{r3}
 800ef74:	469e      	mov	lr, r3
 800ef76:	4770      	bx	lr
